"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkAllowance = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const ethers_1 = require("ethers");
const utils_1 = require("../allowance/utils");
const getProvider_1 = require("../utils/getProvider");
const parseError_1 = require("../utils/parseError");
const checkAllowance = (signer, step, chain, token, amount, spenderAddress, statusManager, infiniteApproval = false, allowUserInteraction = false
// eslint-disable-next-line max-params
) => __awaiter(void 0, void 0, void 0, function* () {
    // Ask user to set allowance
    // -> set currentExecution
    let allowanceProcess = statusManager.findOrCreateProcess('TOKEN_ALLOWANCE', step);
    // -> check allowance
    try {
        if (allowanceProcess.txHash) {
            allowanceProcess = statusManager.updateProcess(step, allowanceProcess.type, 'PENDING');
            yield (0, getProvider_1.getProvider)(signer).waitForTransaction(allowanceProcess.txHash);
            allowanceProcess = statusManager.updateProcess(step, allowanceProcess.type, 'DONE');
            // TODO: Do we need this check?
        }
        else if (allowanceProcess.status === 'DONE') {
            allowanceProcess = statusManager.updateProcess(step, allowanceProcess.type, 'DONE');
        }
        else {
            const approved = yield (0, utils_1.getApproved)(signer, token.address, spenderAddress);
            if (new bignumber_js_1.default(amount).gt(approved)) {
                if (!allowUserInteraction) {
                    return;
                }
                const approvalAmount = infiniteApproval
                    ? ethers_1.constants.MaxUint256.toString()
                    : amount;
                const approveTx = yield (0, utils_1.setApproval)(signer, token.address, spenderAddress, approvalAmount);
                // update currentExecution
                allowanceProcess = statusManager.updateProcess(step, allowanceProcess.type, 'PENDING', {
                    txHash: approveTx.hash,
                    txLink: chain.metamask.blockExplorerUrls[0] + 'tx/' + approveTx.hash,
                });
                // wait for transcation
                yield approveTx.wait();
                allowanceProcess = statusManager.updateProcess(step, allowanceProcess.type, 'DONE');
            }
            else {
                allowanceProcess = statusManager.updateProcess(step, allowanceProcess.type, 'DONE');
            }
        }
    }
    catch (e) {
        // -> set status
        if (e.code === 'TRANSACTION_REPLACED' && e.replacement) {
            yield transactionReplaced(e.replacement, allowanceProcess, step, chain, statusManager);
        }
        else {
            const error = yield (0, parseError_1.parseError)(e, step, allowanceProcess);
            allowanceProcess = statusManager.updateProcess(step, allowanceProcess.type, 'FAILED', {
                error: {
                    message: error.message,
                    htmlMessage: error.htmlMessage,
                    code: error.code,
                },
            });
            statusManager.updateExecution(step, 'FAILED');
            throw error;
        }
    }
});
exports.checkAllowance = checkAllowance;
const transactionReplaced = (replacementTx, allowanceProcess, step, chain, statusManager) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        allowanceProcess = statusManager.updateProcess(step, allowanceProcess.type, 'PENDING', {
            txHash: replacementTx.hash,
            txLink: chain.metamask.blockExplorerUrls[0] + 'tx/' + replacementTx.hash,
        });
        yield replacementTx.wait();
        allowanceProcess = statusManager.updateProcess(step, allowanceProcess.type, 'DONE');
    }
    catch (e) {
        if (e.code === 'TRANSACTION_REPLACED' && e.replacement) {
            yield transactionReplaced(e.replacement, allowanceProcess, step, chain, statusManager);
        }
        throw e;
    }
});
