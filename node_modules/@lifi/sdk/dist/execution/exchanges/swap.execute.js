var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { constants } from 'ethers';
import ApiService from '../../services/ApiService';
import ChainsService from '../../services/ChainsService';
import { LifiErrorCode, TransactionError } from '../../utils/errors';
import { getProvider } from '../../utils/getProvider';
import { getTransactionFailedMessage, parseError } from '../../utils/parseError';
import { personalizeStep } from '../../utils/utils';
import { checkAllowance } from '../allowance.execute';
import { balanceCheck } from '../balanceCheck.execute';
import { stepComparison } from '../stepComparison';
import { switchChain } from '../switchChain';
import { waitForReceivingTransaction } from '../utils';
export class SwapExecutionManager {
    constructor() {
        this.shouldContinue = true;
        this.setShouldContinue = (val) => {
            this.shouldContinue = val;
        };
        this.execute = ({ signer, step, statusManager, settings, }) => __awaiter(this, void 0, void 0, function* () {
            // setup
            var _a, _b, _c, _d;
            const { action, estimate } = step;
            step.execution = statusManager.initExecutionObject(step);
            const chainsService = ChainsService.getInstance();
            const fromChain = yield chainsService.getChainById(action.fromChainId);
            // Approval
            if (action.fromToken.address !== constants.AddressZero) {
                yield checkAllowance(signer, step, fromChain, action.fromToken, action.fromAmount, estimate.approvalAddress, statusManager, settings.infiniteApproval, this.shouldContinue);
            }
            // Start Swap
            // -> set step.execution
            let swapProcess = statusManager.findOrCreateProcess('SWAP', step);
            // -> swapping
            let tx;
            try {
                if (swapProcess.txHash) {
                    // -> restore existing tx
                    tx = yield getProvider(signer).getTransaction(swapProcess.txHash);
                }
                else {
                    // -> check balance
                    yield balanceCheck(signer, step);
                    // -> get tx from backend
                    const personalizedStep = yield personalizeStep(signer, step);
                    const updatedStep = yield ApiService.getStepTransaction(personalizedStep);
                    step = Object.assign(Object.assign({}, (yield stepComparison(statusManager, personalizedStep, updatedStep, settings.acceptSlippageUpdateHook, this.shouldContinue))), { execution: step.execution });
                    const { transactionRequest } = step;
                    if (!transactionRequest) {
                        throw new TransactionError(LifiErrorCode.TransactionUnprepared, 'Unable to prepare transaction.');
                    }
                    // make sure that chain is still correct
                    const updatedSigner = yield switchChain(signer, statusManager, step, settings.switchChainHook, this.shouldContinue);
                    if (!updatedSigner) {
                        // chain switch was not successful, stop execution here
                        return step.execution;
                    }
                    signer = updatedSigner;
                    // -> set step.execution
                    swapProcess = swapProcess = statusManager.updateProcess(step, swapProcess.type, 'ACTION_REQUIRED');
                    if (!this.shouldContinue) {
                        return step.execution; // stop before user interaction is needed
                    }
                    // -> submit tx
                    tx = yield signer.sendTransaction(transactionRequest);
                }
            }
            catch (e) {
                const error = yield parseError(e, step, swapProcess);
                swapProcess = statusManager.updateProcess(step, swapProcess.type, 'FAILED', {
                    error: {
                        message: error.message,
                        htmlMessage: error.htmlMessage,
                        code: error.code,
                    },
                });
                statusManager.updateExecution(step, 'FAILED');
                throw error;
            }
            // Wait for Transaction
            swapProcess = statusManager.updateProcess(step, swapProcess.type, 'PENDING', {
                txLink: fromChain.metamask.blockExplorerUrls[0] + 'tx/' + tx.hash,
                txHash: tx.hash,
            });
            // -> waiting
            let receipt;
            try {
                receipt = yield tx.wait();
            }
            catch (e) {
                // -> set status
                if (e.code === 'TRANSACTION_REPLACED' && e.replacement) {
                    receipt = e.replacement;
                    swapProcess = statusManager.updateProcess(step, swapProcess.type, 'PENDING', {
                        txHash: e.replacement.hash,
                        txLink: fromChain.metamask.blockExplorerUrls[0] +
                            'tx/' +
                            e.replacement.hash,
                    });
                }
                else {
                    const error = yield parseError(e);
                    swapProcess = statusManager.updateProcess(step, swapProcess.type, 'FAILED', {
                        error: {
                            message: error.message,
                            htmlMessage: error.htmlMessage,
                            code: error.code,
                        },
                    });
                    statusManager.updateExecution(step, 'FAILED');
                    throw error;
                }
            }
            let statusResponse;
            try {
                if (!swapProcess.txHash) {
                    throw new Error('Transaction hash is undefined.');
                }
                statusResponse = yield waitForReceivingTransaction(swapProcess.txHash, statusManager, swapProcess.type, step);
            }
            catch (e) {
                swapProcess = statusManager.updateProcess(step, swapProcess.type, 'FAILED', {
                    error: {
                        code: LifiErrorCode.TransactionFailed,
                        message: 'Failed while waiting for receiving chain.',
                        htmlMessage: getTransactionFailedMessage(step, swapProcess.txLink),
                    },
                });
                statusManager.updateExecution(step, 'FAILED');
                throw e;
            }
            swapProcess = statusManager.updateProcess(step, swapProcess.type, 'DONE', {
                txHash: (_a = statusResponse.receiving) === null || _a === void 0 ? void 0 : _a.txHash,
                txLink: fromChain.metamask.blockExplorerUrls[0] +
                    'tx/' +
                    ((_b = statusResponse.receiving) === null || _b === void 0 ? void 0 : _b.txHash),
            });
            statusManager.updateExecution(step, 'DONE', {
                fromAmount: statusResponse.sending.amount,
                toAmount: (_c = statusResponse.receiving) === null || _c === void 0 ? void 0 : _c.amount,
                toToken: (_d = statusResponse.receiving) === null || _d === void 0 ? void 0 : _d.token,
                gasUsed: statusResponse.sending.gasUsed,
                gasPrice: statusResponse.sending.gasPrice,
            });
            // DONE
            return step.execution;
        });
    }
}
