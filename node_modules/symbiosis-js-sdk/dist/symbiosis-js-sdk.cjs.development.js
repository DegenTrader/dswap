'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var JSBI = require('jsbi');
var invariant = require('tiny-invariant');
var _Decimal = require('decimal.js-light');
var _Big = require('big.js');
var toFormat = require('toformat');
var address = require('@ethersproject/address');
var solidity = require('@ethersproject/solidity');
var contracts = require('@ethersproject/contracts');
var networks = require('@ethersproject/networks');
var providers = require('@ethersproject/providers');
var ethers = require('ethers');
var fetch = require('node-fetch-native');
var constants = require('@ethersproject/constants');
var units = require('@ethersproject/units');
var addresses = require('@ethersproject/constants/lib/addresses');
var flatMap = require('lodash.flatmap');
var RenJS = require('@renproject/ren');
var chainsBitcoin = require('@renproject/chains-bitcoin');
var chainsEthereum = require('@renproject/chains-ethereum');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var JSBI__default = /*#__PURE__*/_interopDefaultLegacy(JSBI);
var invariant__default = /*#__PURE__*/_interopDefaultLegacy(invariant);
var _Decimal__default = /*#__PURE__*/_interopDefaultLegacy(_Decimal);
var _Big__default = /*#__PURE__*/_interopDefaultLegacy(_Big);
var toFormat__default = /*#__PURE__*/_interopDefaultLegacy(toFormat);
var fetch__default = /*#__PURE__*/_interopDefaultLegacy(fetch);
var flatMap__default = /*#__PURE__*/_interopDefaultLegacy(flatMap);
var RenJS__default = /*#__PURE__*/_interopDefaultLegacy(RenJS);

var _FACTORY_ADDRESS, _INIT_CODE_HASH, _SOLIDITY_TYPE_MAXIMA;
exports.ChainId = void 0;

(function (ChainId) {
  ChainId[ChainId["ETH_MAINNET"] = 1] = "ETH_MAINNET";
  ChainId[ChainId["ETH_RINKEBY"] = 4] = "ETH_RINKEBY";
  ChainId[ChainId["ETH_KOVAN"] = 42] = "ETH_KOVAN";
  ChainId[ChainId["BSC_MAINNET"] = 56] = "BSC_MAINNET";
  ChainId[ChainId["BSC_TESTNET"] = 97] = "BSC_TESTNET";
  ChainId[ChainId["MATIC_MAINNET"] = 137] = "MATIC_MAINNET";
  ChainId[ChainId["MATIC_MUMBAI"] = 80001] = "MATIC_MUMBAI";
  ChainId[ChainId["AVAX_MAINNET"] = 43114] = "AVAX_MAINNET";
  ChainId[ChainId["AVAX_TESTNET"] = 43113] = "AVAX_TESTNET";
  ChainId[ChainId["HECO_MAINNET"] = 128] = "HECO_MAINNET";
  ChainId[ChainId["HECO_TESTNET"] = 256] = "HECO_TESTNET";
  ChainId[ChainId["OKEX_MAINNET"] = 66] = "OKEX_MAINNET";
  ChainId[ChainId["OKEX_TESTNET"] = 65] = "OKEX_TESTNET";
  ChainId[ChainId["BOBA_MAINNET"] = 288] = "BOBA_MAINNET";
  ChainId[ChainId["BOBA_RINKEBY"] = 28] = "BOBA_RINKEBY";
  ChainId[ChainId["MILKOMEDA_MAINNET"] = 2001] = "MILKOMEDA_MAINNET";
  ChainId[ChainId["MILKOMEDA_DEVNET"] = 200101] = "MILKOMEDA_DEVNET";
  ChainId[ChainId["BTC_MAINNET"] = 5555] = "BTC_MAINNET";
  ChainId[ChainId["BTC_TESTNET"] = 55555] = "BTC_TESTNET";
  ChainId[ChainId["AURORA_MAINNET"] = 1313161554] = "AURORA_MAINNET";
  ChainId[ChainId["AURORA_TESTNET"] = 1313161555] = "AURORA_TESTNET";
  ChainId[ChainId["TELOS_MAINNET"] = 40] = "TELOS_MAINNET";
  ChainId[ChainId["TELOS_TESTNET"] = 41] = "TELOS_TESTNET";
})(exports.ChainId || (exports.ChainId = {}));

exports.TradeType = void 0;

(function (TradeType) {
  TradeType[TradeType["EXACT_INPUT"] = 0] = "EXACT_INPUT";
  TradeType[TradeType["EXACT_OUTPUT"] = 1] = "EXACT_OUTPUT";
})(exports.TradeType || (exports.TradeType = {}));

exports.Rounding = void 0;

(function (Rounding) {
  Rounding[Rounding["ROUND_DOWN"] = 0] = "ROUND_DOWN";
  Rounding[Rounding["ROUND_HALF_UP"] = 1] = "ROUND_HALF_UP";
  Rounding[Rounding["ROUND_UP"] = 2] = "ROUND_UP";
})(exports.Rounding || (exports.Rounding = {}));

var FACTORY_ADDRESS = (_FACTORY_ADDRESS = {}, _FACTORY_ADDRESS[exports.ChainId.ETH_MAINNET] = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f', _FACTORY_ADDRESS[exports.ChainId.ETH_RINKEBY] = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f', _FACTORY_ADDRESS[exports.ChainId.ETH_KOVAN] = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f', _FACTORY_ADDRESS[exports.ChainId.BSC_MAINNET] = '0xBCfCcbde45cE874adCB698cC183deBcF17952812', _FACTORY_ADDRESS[exports.ChainId.BSC_TESTNET] = '0x6725F303b657a9451d8BA641348b6761A6CC7a17', _FACTORY_ADDRESS[exports.ChainId.MATIC_MAINNET] = '0x5757371414417b8C6CAad45bAeF941aBc7d3Ab32', _FACTORY_ADDRESS[exports.ChainId.MATIC_MUMBAI] = '0x8a628F00710993c1cebbaa02338d2264ee7056C6', _FACTORY_ADDRESS[exports.ChainId.AVAX_MAINNET] = '0xefa94DE7a4656D787667C749f7E1223D71E9FD88', _FACTORY_ADDRESS[exports.ChainId.AVAX_TESTNET] = '0xb278D63e2E2a4aeb5A398eB87a91FF909B72C8D5', _FACTORY_ADDRESS[exports.ChainId.HECO_MAINNET] = '0x0000000000000000000000000000000000000000', _FACTORY_ADDRESS[exports.ChainId.HECO_TESTNET] = '0xca33f6D096BDD7FcB28d708f631cD76E73Ecfc2d', _FACTORY_ADDRESS[exports.ChainId.OKEX_MAINNET] = '0x0000000000000000000000000000000000000000', _FACTORY_ADDRESS[exports.ChainId.OKEX_TESTNET] = '0xD68B1DCDe3bAeB3FF1483Ad33c3efC6B6e0A8E4C', _FACTORY_ADDRESS[exports.ChainId.BOBA_MAINNET] = '0x7DDaF116889D655D1c486bEB95017a8211265d29', _FACTORY_ADDRESS[exports.ChainId.BOBA_RINKEBY] = '0xab740666e226cb5b6b451eb943b0257a7cb3ce0a', _FACTORY_ADDRESS[exports.ChainId.MILKOMEDA_MAINNET] = '0x2ef06A90b0E7Ae3ae508e83Ea6628a3987945460', _FACTORY_ADDRESS[exports.ChainId.MILKOMEDA_DEVNET] = '0x428779a1a596c9cfdb68f5daef78b14901b95566', _FACTORY_ADDRESS[exports.ChainId.BTC_MAINNET] = '0x0000000000000000000000000000000000000000', _FACTORY_ADDRESS[exports.ChainId.BTC_TESTNET] = '0x0000000000000000000000000000000000000000', _FACTORY_ADDRESS[exports.ChainId.AURORA_MAINNET] = '0xc66F594268041dB60507F00703b152492fb176E7', _FACTORY_ADDRESS[exports.ChainId.AURORA_TESTNET] = '0x60913758635b54e6C9685f92201A5704eEe74748', _FACTORY_ADDRESS[exports.ChainId.TELOS_MAINNET] = '0x7a2A35706f5d1CeE2faa8A254dd6F6D7d7Becc25', _FACTORY_ADDRESS[exports.ChainId.TELOS_TESTNET] = '0x6db1D2C691DcdF4DA36d3497F68a63C7282a4a44', _FACTORY_ADDRESS);
var INIT_CODE_HASH = (_INIT_CODE_HASH = {}, _INIT_CODE_HASH[exports.ChainId.ETH_MAINNET] = '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f', _INIT_CODE_HASH[exports.ChainId.ETH_RINKEBY] = '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f', _INIT_CODE_HASH[exports.ChainId.ETH_KOVAN] = '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f', _INIT_CODE_HASH[exports.ChainId.BSC_MAINNET] = '0xd0d4c4cd0848c93cb4fd1f498d7013ee6bfb25783ea21593d5834f5d250ece66', _INIT_CODE_HASH[exports.ChainId.BSC_TESTNET] = '0xd0d4c4cd0848c93cb4fd1f498d7013ee6bfb25783ea21593d5834f5d250ece66', _INIT_CODE_HASH[exports.ChainId.MATIC_MAINNET] = '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f', _INIT_CODE_HASH[exports.ChainId.MATIC_MUMBAI] = '0x85f8ad645fe62917d6939782650649d3d7c4b5f25d81415a9fac4a9f341793ca', _INIT_CODE_HASH[exports.ChainId.AVAX_MAINNET] = '0x40231f6b438bce0797c9ada29b718a87ea0a5cea3fe9a771abdd76bd41a3e545', _INIT_CODE_HASH[exports.ChainId.AVAX_TESTNET] = '0x85f8ad645fe62917d6939782650649d3d7c4b5f25d81415a9fac4a9f341793ca', _INIT_CODE_HASH[exports.ChainId.HECO_MAINNET] = '0x0000000000000000000000000000000000000000000000000000000000000000', _INIT_CODE_HASH[exports.ChainId.HECO_TESTNET] = '0x85f8ad645fe62917d6939782650649d3d7c4b5f25d81415a9fac4a9f341793ca', _INIT_CODE_HASH[exports.ChainId.OKEX_MAINNET] = '0x0000000000000000000000000000000000000000000000000000000000000000', _INIT_CODE_HASH[exports.ChainId.OKEX_TESTNET] = '0x7f08f1b43a5b37be17b2d24d4f2c6b1311e19eedc53cc4528f0e72cdfb5d8d37', _INIT_CODE_HASH[exports.ChainId.BOBA_MAINNET] = '0x1db9efb13a1398e31bb71895c392fa1217130f78dc65080174491adcec5da9b9', _INIT_CODE_HASH[exports.ChainId.BOBA_RINKEBY] = '0x1db9efb13a1398e31bb71895c392fa1217130f78dc65080174491adcec5da9b9', _INIT_CODE_HASH[exports.ChainId.MILKOMEDA_MAINNET] = '0x0103d86123641edae209ed992b2bf060ae2baab6a28f5b1eb7dad61335915104', _INIT_CODE_HASH[exports.ChainId.MILKOMEDA_DEVNET] = '0x0103d86123641edae209ed992b2bf060ae2baab6a28f5b1eb7dad61335915104', _INIT_CODE_HASH[exports.ChainId.BTC_MAINNET] = '0x0000000000000000000000000000000000000000000000000000000000000000', _INIT_CODE_HASH[exports.ChainId.BTC_TESTNET] = '0x0000000000000000000000000000000000000000000000000000000000000000', _INIT_CODE_HASH[exports.ChainId.AURORA_MAINNET] = '0x4a697f690d1f46e0f1a897a8662acae31ced3039b00c052392ed0bc179f9f28c', _INIT_CODE_HASH[exports.ChainId.AURORA_TESTNET] = '0x4a697f690d1f46e0f1a897a8662acae31ced3039b00c052392ed0bc179f9f28c', _INIT_CODE_HASH[exports.ChainId.TELOS_MAINNET] = '0x840ca6a45470897b370d3e68dd8c3d42470f47974a933a260edf6652c3e9ba25', _INIT_CODE_HASH[exports.ChainId.TELOS_TESTNET] = '0x4386561b28c0ca71b777ab3684458dd9f6c1b3b7fc609c5758f0f00a48625996', _INIT_CODE_HASH);
var MINIMUM_LIQUIDITY = /*#__PURE__*/JSBI__default["default"].BigInt(1000); // exports for internal consumption

var ZERO = /*#__PURE__*/JSBI__default["default"].BigInt(0);
var ONE = /*#__PURE__*/JSBI__default["default"].BigInt(1);
var TWO = /*#__PURE__*/JSBI__default["default"].BigInt(2);
var THREE = /*#__PURE__*/JSBI__default["default"].BigInt(3);
var FIVE = /*#__PURE__*/JSBI__default["default"].BigInt(5);
var TEN = /*#__PURE__*/JSBI__default["default"].BigInt(10);
var _100 = /*#__PURE__*/JSBI__default["default"].BigInt(100);
var _998 = /*#__PURE__*/JSBI__default["default"].BigInt(998);
var _1000 = /*#__PURE__*/JSBI__default["default"].BigInt(1000);
var SolidityType;

(function (SolidityType) {
  SolidityType["uint8"] = "uint8";
  SolidityType["uint256"] = "uint256";
})(SolidityType || (SolidityType = {}));

var SOLIDITY_TYPE_MAXIMA = (_SOLIDITY_TYPE_MAXIMA = {}, _SOLIDITY_TYPE_MAXIMA[SolidityType.uint8] = /*#__PURE__*/JSBI__default["default"].BigInt('0xff'), _SOLIDITY_TYPE_MAXIMA[SolidityType.uint256] = /*#__PURE__*/JSBI__default["default"].BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'), _SOLIDITY_TYPE_MAXIMA);

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;

  _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct()) {
    _construct = Reflect.construct;
  } else {
    _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) _setPrototypeOf(instance, Class.prototype);
      return instance;
    };
  }

  return _construct.apply(null, arguments);
}

function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}

function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? new Map() : undefined;

  _wrapNativeSuper = function _wrapNativeSuper(Class) {
    if (Class === null || !_isNativeFunction(Class)) return Class;

    if (typeof Class !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }

    if (typeof _cache !== "undefined") {
      if (_cache.has(Class)) return _cache.get(Class);

      _cache.set(Class, Wrapper);
    }

    function Wrapper() {
      return _construct(Class, arguments, _getPrototypeOf(this).constructor);
    }

    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return _setPrototypeOf(Wrapper, Class);
  };

  return _wrapNativeSuper(Class);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _createForOfIteratorHelperLoose(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it) return (it = it.call(o)).next.bind(it);

  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it) o = it;
    var i = 0;
    return function () {
      if (i >= o.length) return {
        done: true
      };
      return {
        done: false,
        value: o[i++]
      };
    };
  }

  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

// see https://stackoverflow.com/a/41102306
var CAN_SET_PROTOTYPE = ('setPrototypeOf' in Object);
/**
 * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be
 * obtained by sending any amount of input.
 */

var InsufficientReservesError = /*#__PURE__*/function (_Error) {
  _inheritsLoose(InsufficientReservesError, _Error);

  function InsufficientReservesError() {
    var _this;

    _this = _Error.call(this) || this;
    _this.isInsufficientReservesError = true;
    _this.name = _this.constructor.name;
    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(_assertThisInitialized(_this), (this instanceof InsufficientReservesError ? this.constructor : void 0).prototype);
    return _this;
  }

  return InsufficientReservesError;
}( /*#__PURE__*/_wrapNativeSuper(Error));
/**
 * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less
 * than the price of a single unit of output after fees.
 */

var InsufficientInputAmountError = /*#__PURE__*/function (_Error2) {
  _inheritsLoose(InsufficientInputAmountError, _Error2);

  function InsufficientInputAmountError() {
    var _this2;

    _this2 = _Error2.call(this) || this;
    _this2.isInsufficientInputAmountError = true;
    _this2.name = _this2.constructor.name;
    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(_assertThisInitialized(_this2), (this instanceof InsufficientInputAmountError ? this.constructor : void 0).prototype);
    return _this2;
  }

  return InsufficientInputAmountError;
}( /*#__PURE__*/_wrapNativeSuper(Error));

var Chain = function Chain(params) {
  this.id = void 0;
  this.name = void 0;
  this.disabled = void 0;
  this.swappable = void 0;
  this.evm = void 0;
  this.explorer = void 0;
  this.icons = void 0;
  this.id = params.id;
  this.name = params.name;
  this.disabled = params.disabled;
  this.explorer = params.explorer;
  this.icons = params.icons;
  this.swappable = (params == null ? void 0 : params.swappable) !== false;
  this.evm = (params == null ? void 0 : params.evm) !== false;
};
var chains = [/*#__PURE__*/new Chain({
  id: exports.ChainId.BTC_MAINNET,
  name: 'Bitcoin',
  disabled: false,
  explorer: 'https://www.blockchain.com/btc',
  icons: {
    small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1.png',
    large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1.png'
  },
  evm: false
}), /*#__PURE__*/new Chain({
  id: exports.ChainId.BTC_TESTNET,
  name: 'Bitcoin',
  disabled: false,
  explorer: 'https://www.blockchain.com/btc-testnet',
  icons: {
    small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1.png',
    large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1.png'
  },
  evm: false
}), /*#__PURE__*/new Chain({
  id: exports.ChainId.ETH_MAINNET,
  name: 'Ethereum',
  disabled: false,
  explorer: 'https://etherscan.io',
  icons: {
    small: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/info/logo.png',
    large: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/info/logo.png'
  }
}), /*#__PURE__*/new Chain({
  id: exports.ChainId.ETH_RINKEBY,
  name: 'Rinkeby',
  disabled: false,
  explorer: 'https://rinkeby.etherscan.io',
  icons: {
    small: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/info/logo.png',
    large: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/info/logo.png'
  }
}), /*#__PURE__*/new Chain({
  id: exports.ChainId.ETH_KOVAN,
  name: 'Kovan',
  disabled: false,
  explorer: 'https://kovan.etherscan.io',
  icons: {
    small: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/info/logo.png',
    large: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/info/logo.png'
  }
}), /*#__PURE__*/new Chain({
  id: exports.ChainId.BSC_MAINNET,
  name: 'BNB',
  disabled: false,
  explorer: 'https://bscscan.com',
  icons: {
    small: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/smartchain/info/logo.png',
    large: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/smartchain/info/logo.png'
  }
}), /*#__PURE__*/new Chain({
  id: exports.ChainId.BSC_TESTNET,
  name: 'BNB',
  disabled: false,
  explorer: 'https://testnet.bscscan.com',
  icons: {
    small: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/smartchain/info/logo.png',
    large: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/smartchain/info/logo.png'
  }
}), /*#__PURE__*/new Chain({
  id: exports.ChainId.MATIC_MAINNET,
  name: 'Polygon',
  disabled: false,
  explorer: 'https://polygonscan.com',
  icons: {
    small: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/polygon/info/logo.png',
    large: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/polygon/info/logo.png'
  }
}), /*#__PURE__*/new Chain({
  id: exports.ChainId.MATIC_MUMBAI,
  name: 'Mumbai',
  disabled: false,
  explorer: 'https://mumbai.polygonscan.com',
  icons: {
    small: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/polygon/info/logo.png',
    large: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/polygon/info/logo.png'
  }
}), /*#__PURE__*/new Chain({
  id: exports.ChainId.AVAX_MAINNET,
  name: 'Avalanche',
  disabled: false,
  explorer: 'https://snowtrace.io',
  icons: {
    small: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/avalanchex/info/logo.png',
    large: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/avalanchex/info/logo.png'
  }
}), /*#__PURE__*/new Chain({
  id: exports.ChainId.AVAX_TESTNET,
  name: 'Fuji',
  disabled: false,
  explorer: 'https://testnet.snowtrace.io',
  icons: {
    small: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/avalanchex/info/logo.png',
    large: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/avalanchex/info/logo.png'
  }
}), /*#__PURE__*/new Chain({
  id: exports.ChainId.HECO_MAINNET,
  name: 'HECO',
  disabled: false,
  explorer: 'https://hecoinfo.com',
  icons: {
    small: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/heco/info/logo.png',
    large: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/heco/info/logo.png'
  }
}), /*#__PURE__*/new Chain({
  id: exports.ChainId.HECO_TESTNET,
  name: 'HECO',
  disabled: false,
  explorer: 'https://testnet.hecoinfo.com',
  icons: {
    small: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/heco/info/logo.png',
    large: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/heco/info/logo.png'
  }
}), /*#__PURE__*/new Chain({
  id: exports.ChainId.OKEX_MAINNET,
  name: 'OEC',
  disabled: false,
  explorer: 'https://www.oklink.com/oec',
  icons: {
    small: 'https://s2.coinmarketcap.com/static/img/exchanges/64x64/294.png',
    large: 'https://s2.coinmarketcap.com/static/img/exchanges/64x64/294.png'
  }
}), /*#__PURE__*/new Chain({
  id: exports.ChainId.OKEX_TESTNET,
  name: 'OEC',
  disabled: false,
  explorer: 'https://www.oklink.com/oec-test',
  icons: {
    small: 'https://s2.coinmarketcap.com/static/img/exchanges/64x64/294.png',
    large: 'https://s2.coinmarketcap.com/static/img/exchanges/64x64/294.png'
  }
}), /*#__PURE__*/new Chain({
  id: exports.ChainId.BOBA_MAINNET,
  name: 'Boba',
  disabled: false,
  explorer: 'https://blockexplorer.boba.network',
  icons: {
    small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/14556.png',
    large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/14556.png'
  }
}), /*#__PURE__*/new Chain({
  id: exports.ChainId.BOBA_RINKEBY,
  name: 'Boba',
  disabled: false,
  explorer: 'https://blockexplorer.rinkeby.boba.network',
  icons: {
    small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/14556.png',
    large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/14556.png'
  }
}), /*#__PURE__*/new Chain({
  id: exports.ChainId.MILKOMEDA_MAINNET,
  name: 'Milkomeda',
  disabled: false,
  explorer: 'https://explorer-mainnet-cardano-evm.c1.milkomeda.com',
  icons: {
    small: 'https://raw.githubusercontent.com/allush/assets/main/images/blockchains/milkomeda/logo.png',
    large: 'https://raw.githubusercontent.com/allush/assets/main/images/blockchains/milkomeda/logo.png'
  }
}), /*#__PURE__*/new Chain({
  id: exports.ChainId.MILKOMEDA_DEVNET,
  name: 'Milkomeda',
  disabled: false,
  explorer: 'https://explorer-devnet-cardano-evm.c1.milkomeda.com',
  icons: {
    small: 'https://raw.githubusercontent.com/allush/assets/main/images/blockchains/milkomeda/logo.png',
    large: 'https://raw.githubusercontent.com/allush/assets/main/images/blockchains/milkomeda/logo.png'
  }
}), /*#__PURE__*/new Chain({
  id: exports.ChainId.AURORA_MAINNET,
  name: 'Aurora',
  disabled: false,
  explorer: 'https://aurorascan.dev',
  icons: {
    small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/14803.png',
    large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/14803.png'
  }
}), /*#__PURE__*/new Chain({
  id: exports.ChainId.AURORA_TESTNET,
  name: 'Aurora',
  disabled: false,
  explorer: 'https://testnet.aurorascan.dev',
  icons: {
    small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/14803.png',
    large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/14803.png'
  }
}), /*#__PURE__*/new Chain({
  id: exports.ChainId.TELOS_MAINNET,
  name: 'Telos',
  disabled: false,
  explorer: 'https://teloscan.io',
  icons: {
    small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/4660.png',
    large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/4660.png'
  }
}), /*#__PURE__*/new Chain({
  id: exports.ChainId.TELOS_TESTNET,
  name: 'Telos',
  disabled: false,
  explorer: 'https://testnet.teloscan.io',
  icons: {
    small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/4660.png',
    large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/4660.png'
  }
})];
var getChainById = function getChainById(chainId) {
  if (!chainId) return undefined;
  return chains.find(function (chain) {
    return chain.id === chainId;
  });
};

function validateSolidityTypeInstance(value, solidityType) {
  !JSBI__default["default"].greaterThanOrEqual(value, ZERO) ? invariant__default["default"](false, value + " is not a " + solidityType + ".")  : void 0;
  !JSBI__default["default"].lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]) ? invariant__default["default"](false, value + " is not a " + solidityType + ".")  : void 0;
} // warns if addresses are not checksummed

function validateAndParseAddress(address$1) {
  if (address$1 === '') {
    return address$1;
  }

  try {
    return address.getAddress(address$1);
  } catch (error) {
    invariant__default["default"](false, address$1 + " is not a valid address.")  ;
  }
}
function parseBigintIsh(bigintIsh) {
  return bigintIsh instanceof JSBI__default["default"] ? bigintIsh : typeof bigintIsh === 'bigint' ? JSBI__default["default"].BigInt(bigintIsh.toString()) : JSBI__default["default"].BigInt(bigintIsh);
} // mock the on-chain sqrt function

function sqrt(y) {
  validateSolidityTypeInstance(y, SolidityType.uint256);
  var z = ZERO;
  var x;

  if (JSBI__default["default"].greaterThan(y, THREE)) {
    z = y;
    x = JSBI__default["default"].add(JSBI__default["default"].divide(y, TWO), ONE);

    while (JSBI__default["default"].lessThan(x, z)) {
      z = x;
      x = JSBI__default["default"].divide(JSBI__default["default"].add(JSBI__default["default"].divide(y, x), x), TWO);
    }
  } else if (JSBI__default["default"].notEqual(y, ZERO)) {
    z = ONE;
  }

  return z;
} // given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to
// `maxSize` by removing the last item

function sortedInsert(items, add, maxSize, comparator) {
  !(maxSize > 0) ? invariant__default["default"](false, 'MAX_SIZE_ZERO')  : void 0; // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize

  !(items.length <= maxSize) ? invariant__default["default"](false, 'ITEMS_SIZE')  : void 0; // short circuit first item add

  if (items.length === 0) {
    items.push(add);
    return null;
  } else {
    var isFull = items.length === maxSize; // short circuit if full and the additional item does not come before the last item

    if (isFull && comparator(items[items.length - 1], add) <= 0) {
      return add;
    }

    var lo = 0,
        hi = items.length;

    while (lo < hi) {
      var mid = lo + hi >>> 1;

      if (comparator(items[mid], add) <= 0) {
        lo = mid + 1;
      } else {
        hi = mid;
      }
    }

    items.splice(lo, 0, add);
    return isFull ? items.pop() : null;
  }
}

var _toSignificantRoundin, _toFixedRounding;
var Decimal = /*#__PURE__*/toFormat__default["default"](_Decimal__default["default"]);
var Big = /*#__PURE__*/toFormat__default["default"](_Big__default["default"]);
var toSignificantRounding = (_toSignificantRoundin = {}, _toSignificantRoundin[exports.Rounding.ROUND_DOWN] = Decimal.ROUND_DOWN, _toSignificantRoundin[exports.Rounding.ROUND_HALF_UP] = Decimal.ROUND_HALF_UP, _toSignificantRoundin[exports.Rounding.ROUND_UP] = Decimal.ROUND_UP, _toSignificantRoundin);
var toFixedRounding = (_toFixedRounding = {}, _toFixedRounding[exports.Rounding.ROUND_DOWN] = 0, _toFixedRounding[exports.Rounding.ROUND_HALF_UP] = 1, _toFixedRounding[exports.Rounding.ROUND_UP] = 3, _toFixedRounding);
var Fraction = /*#__PURE__*/function () {
  function Fraction(numerator, denominator) {
    if (denominator === void 0) {
      denominator = ONE;
    }

    this.numerator = void 0;
    this.denominator = void 0;
    this.numerator = parseBigintIsh(numerator);
    this.denominator = parseBigintIsh(denominator);
  } // performs floor division


  var _proto = Fraction.prototype;

  _proto.invert = function invert() {
    return new Fraction(this.denominator, this.numerator);
  };

  _proto.add = function add(other) {
    var otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));

    if (JSBI__default["default"].equal(this.denominator, otherParsed.denominator)) {
      return new Fraction(JSBI__default["default"].add(this.numerator, otherParsed.numerator), this.denominator);
    }

    return new Fraction(JSBI__default["default"].add(JSBI__default["default"].multiply(this.numerator, otherParsed.denominator), JSBI__default["default"].multiply(otherParsed.numerator, this.denominator)), JSBI__default["default"].multiply(this.denominator, otherParsed.denominator));
  };

  _proto.subtract = function subtract(other) {
    var otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));

    if (JSBI__default["default"].equal(this.denominator, otherParsed.denominator)) {
      return new Fraction(JSBI__default["default"].subtract(this.numerator, otherParsed.numerator), this.denominator);
    }

    return new Fraction(JSBI__default["default"].subtract(JSBI__default["default"].multiply(this.numerator, otherParsed.denominator), JSBI__default["default"].multiply(otherParsed.numerator, this.denominator)), JSBI__default["default"].multiply(this.denominator, otherParsed.denominator));
  };

  _proto.lessThan = function lessThan(other) {
    var otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));
    return JSBI__default["default"].lessThan(JSBI__default["default"].multiply(this.numerator, otherParsed.denominator), JSBI__default["default"].multiply(otherParsed.numerator, this.denominator));
  };

  _proto.equalTo = function equalTo(other) {
    var otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));
    return JSBI__default["default"].equal(JSBI__default["default"].multiply(this.numerator, otherParsed.denominator), JSBI__default["default"].multiply(otherParsed.numerator, this.denominator));
  };

  _proto.greaterThan = function greaterThan(other) {
    var otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));
    return JSBI__default["default"].greaterThan(JSBI__default["default"].multiply(this.numerator, otherParsed.denominator), JSBI__default["default"].multiply(otherParsed.numerator, this.denominator));
  };

  _proto.multiply = function multiply(other) {
    var otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));
    return new Fraction(JSBI__default["default"].multiply(this.numerator, otherParsed.numerator), JSBI__default["default"].multiply(this.denominator, otherParsed.denominator));
  };

  _proto.divide = function divide(other) {
    var otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));
    return new Fraction(JSBI__default["default"].multiply(this.numerator, otherParsed.denominator), JSBI__default["default"].multiply(this.denominator, otherParsed.numerator));
  };

  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {
    if (format === void 0) {
      format = {
        groupSeparator: ''
      };
    }

    if (rounding === void 0) {
      rounding = exports.Rounding.ROUND_HALF_UP;
    }

    !Number.isInteger(significantDigits) ? invariant__default["default"](false, significantDigits + " is not an integer.")  : void 0;
    !(significantDigits > 0) ? invariant__default["default"](false, significantDigits + " is not positive.")  : void 0;
    Decimal.set({
      precision: significantDigits + 1,
      rounding: toSignificantRounding[rounding]
    });
    var quotient = new Decimal(this.numerator.toString()).div(this.denominator.toString()).toSignificantDigits(significantDigits);
    return quotient.toFormat(quotient.decimalPlaces(), format);
  };

  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {
    if (format === void 0) {
      format = {
        groupSeparator: ''
      };
    }

    if (rounding === void 0) {
      rounding = exports.Rounding.ROUND_HALF_UP;
    }

    !Number.isInteger(decimalPlaces) ? invariant__default["default"](false, decimalPlaces + " is not an integer.")  : void 0;
    !(decimalPlaces >= 0) ? invariant__default["default"](false, decimalPlaces + " is negative.")  : void 0;
    Big.DP = decimalPlaces;
    Big.RM = toFixedRounding[rounding];
    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format);
  };

  _proto.toExact = function toExact(decimalPlaces, format) {
    if (format === void 0) {
      format = {
        groupSeparator: ''
      };
    }

    Big.DP = decimalPlaces;
    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format);
  };

  _createClass(Fraction, [{
    key: "quotient",
    get: function get() {
      return JSBI__default["default"].divide(this.numerator, this.denominator);
    } // remainder after floor division

  }, {
    key: "remainder",
    get: function get() {
      return new Fraction(JSBI__default["default"].remainder(this.numerator, this.denominator), this.denominator);
    }
  }]);

  return Fraction;
}();

var _100_PERCENT = /*#__PURE__*/new Fraction(_100);

var Percent = /*#__PURE__*/function (_Fraction) {
  _inheritsLoose(Percent, _Fraction);

  function Percent() {
    return _Fraction.apply(this, arguments) || this;
  }

  var _proto = Percent.prototype;

  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {
    if (significantDigits === void 0) {
      significantDigits = 5;
    }

    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding);
  };

  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {
    if (decimalPlaces === void 0) {
      decimalPlaces = 2;
    }

    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding);
  };

  return Percent;
}(Fraction);

var TokenAmount = /*#__PURE__*/function (_Fraction) {
  _inheritsLoose(TokenAmount, _Fraction);

  function TokenAmount(token, amount) {
    var _this;

    var parsedAmount = parseBigintIsh(amount);
    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256);
    _this = _Fraction.call(this, parsedAmount, JSBI__default["default"].exponentiate(TEN, JSBI__default["default"].BigInt(token.decimals))) || this;
    _this.token = void 0;
    _this.token = token;
    return _this;
  }

  var _proto = TokenAmount.prototype;

  _proto.add = function add(other) {
    !this.token.equals(other.token) ? invariant__default["default"](false, 'TOKEN')  : void 0;
    return new TokenAmount(this.token, JSBI__default["default"].add(this.raw, other.raw));
  };

  _proto.subtract = function subtract(other) {
    !this.token.equals(other.token) ? invariant__default["default"](false, 'TOKEN')  : void 0;
    return new TokenAmount(this.token, JSBI__default["default"].subtract(this.raw, other.raw));
  };

  _proto.greaterThanOrEqual = function greaterThanOrEqual(amount) {
    return JSBI__default["default"].greaterThanOrEqual(this.raw, amount);
  };

  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {
    if (significantDigits === void 0) {
      significantDigits = 6;
    }

    if (rounding === void 0) {
      rounding = exports.Rounding.ROUND_DOWN;
    }

    return _Fraction.prototype.toSignificant.call(this, significantDigits, format, rounding);
  };

  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {
    if (decimalPlaces === void 0) {
      decimalPlaces = this.token.decimals;
    }

    if (rounding === void 0) {
      rounding = exports.Rounding.ROUND_DOWN;
    }

    !(decimalPlaces <= this.token.decimals) ? invariant__default["default"](false, 'DECIMALS')  : void 0;
    return _Fraction.prototype.toFixed.call(this, decimalPlaces, format, rounding);
  };

  _proto.toExact = function toExact(decimalPlaces, format) {
    if (decimalPlaces === void 0) {
      decimalPlaces = this.token.decimals;
    }

    if (format === void 0) {
      format = {
        groupSeparator: ''
      };
    }

    return _Fraction.prototype.toExact.call(this, decimalPlaces, format);
  };

  _createClass(TokenAmount, [{
    key: "raw",
    get: function get() {
      return this.numerator;
    }
  }]);

  return TokenAmount;
}(Fraction);

var _WETH;
/**
 * A token is any fungible financial instrument on Ethereum.
 *
 */

var Token = /*#__PURE__*/function () {
  /**
   * Constructs an instance of the base class `Token`.
   * @param params TokenConstructor
   */
  function Token(params) {
    this.decimals = void 0;
    this.symbol = void 0;
    this.name = void 0;
    this.chainId = void 0;
    this.address = void 0;
    this.icons = void 0;
    this.chainFromId = void 0;
    this.isNative = void 0;
    this.isStable = void 0;
    this.userToken = void 0;
    validateSolidityTypeInstance(JSBI__default["default"].BigInt(params.decimals), SolidityType.uint8);
    this.decimals = params.decimals;
    this.symbol = params.symbol;
    this.name = params.name;
    this.chainId = params.chainId;
    this.address = validateAndParseAddress(params.address);
    this.isNative = !!params.isNative;
    this.icons = params.icons;
    this.chainFromId = params.chainFromId;
    this.isStable = params.isStable;
    this.userToken = params.userToken;
  }
  /**
   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.
   * @param other other token to compare
   */


  var _proto = Token.prototype;

  _proto.equals = function equals(other) {
    // short circuit on reference equality
    if (this === other) {
      return true;
    }

    return this.chainId === other.chainId && this.address === other.address;
  }
  /**
   * Returns true if the address of this token sorts before the address of the other token
   * @param other other token to compare
   * @throws if the tokens have the same address
   * @throws if the tokens are on different chains
   */
  ;

  _proto.sortsBefore = function sortsBefore(other) {
    !(this.chainId === other.chainId) ? invariant__default["default"](false, 'CHAIN_IDS')  : void 0;
    !(this.address !== other.address) ? invariant__default["default"](false, 'ADDRESSES')  : void 0;
    return this.address.toLowerCase() < other.address.toLowerCase();
  };

  _createClass(Token, [{
    key: "isSynthetic",
    get: function get() {
      return !!this.chainFromId;
    }
  }, {
    key: "chain",
    get: function get() {
      return getChainById(this.chainId);
    }
  }, {
    key: "chainFrom",
    get: function get() {
      return getChainById(this.chainFromId);
    }
  }]);

  return Token;
}();
/**
 * Compares two currencies for equality
 */

function tokenEquals(tokenA, tokenB) {
  return tokenA.equals(tokenB);
}
var WETH = (_WETH = {}, _WETH[exports.ChainId.BTC_MAINNET] = /*#__PURE__*/new Token({
  chainId: exports.ChainId.BTC_MAINNET,
  address: '',
  decimals: 8
}), _WETH[exports.ChainId.BTC_TESTNET] = /*#__PURE__*/new Token({
  chainId: exports.ChainId.BTC_TESTNET,
  address: '',
  decimals: 8
}), _WETH[exports.ChainId.ETH_MAINNET] = /*#__PURE__*/new Token({
  chainId: exports.ChainId.ETH_MAINNET,
  address: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',
  decimals: 18,
  symbol: 'WETH',
  isNative: false,
  name: 'Wrapped ETH',
  icons: {
    large: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png',
    small: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png'
  }
}), _WETH[exports.ChainId.ETH_RINKEBY] = /*#__PURE__*/new Token({
  chainId: exports.ChainId.ETH_RINKEBY,
  address: '0xc778417e063141139fce010982780140aa0cd5ab',
  decimals: 18,
  symbol: 'WETH',
  isNative: false,
  name: 'Wrapped ETH',
  icons: {
    large: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png',
    small: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png'
  }
}), _WETH[exports.ChainId.ETH_KOVAN] = /*#__PURE__*/new Token({
  chainId: exports.ChainId.ETH_KOVAN,
  address: '0xd0A1E359811322d97991E03f863a0C30C2cF029C',
  decimals: 18,
  symbol: 'WETH',
  isNative: false,
  name: 'Wrapped ETH',
  icons: {
    large: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png',
    small: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png'
  }
}), _WETH[exports.ChainId.BSC_MAINNET] = /*#__PURE__*/new Token({
  chainId: exports.ChainId.BSC_MAINNET,
  address: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',
  decimals: 18,
  symbol: 'WBNB',
  isNative: false,
  name: 'Wrapped BNB',
  icons: {
    large: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/binance/info/logo.png',
    small: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/binance/info/logo.png'
  }
}), _WETH[exports.ChainId.BSC_TESTNET] = /*#__PURE__*/new Token({
  chainId: exports.ChainId.BSC_TESTNET,
  address: '0xae13d989dac2f0debff460ac112a837c89baa7cd',
  decimals: 18,
  symbol: 'WBNB',
  isNative: false,
  name: 'Wrapped BNB',
  icons: {
    large: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/binance/info/logo.png',
    small: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/binance/info/logo.png'
  }
}), _WETH[exports.ChainId.MATIC_MAINNET] = /*#__PURE__*/new Token({
  chainId: exports.ChainId.MATIC_MAINNET,
  address: '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270',
  decimals: 18,
  symbol: 'WMATIC',
  isNative: false,
  name: 'Wrapped MATIC',
  icons: {
    large: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/polygon/info/logo.png',
    small: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/polygon/info/logo.png'
  }
}), _WETH[exports.ChainId.MATIC_MUMBAI] = /*#__PURE__*/new Token({
  chainId: exports.ChainId.MATIC_MUMBAI,
  address: '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889',
  decimals: 18,
  symbol: 'WMATIC',
  isNative: false,
  name: 'Wrapped MATIC',
  icons: {
    large: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/polygon/info/logo.png',
    small: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/polygon/info/logo.png'
  }
}), _WETH[exports.ChainId.AVAX_MAINNET] = /*#__PURE__*/new Token({
  chainId: exports.ChainId.AVAX_MAINNET,
  address: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',
  decimals: 18,
  symbol: 'WAVAX',
  isNative: false,
  name: 'Wrapped AVAX',
  icons: {
    small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/9462.png',
    large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/9462.png'
  }
}), _WETH[exports.ChainId.AVAX_TESTNET] = /*#__PURE__*/new Token({
  chainId: exports.ChainId.AVAX_TESTNET,
  address: '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',
  decimals: 18,
  symbol: 'WAVAX',
  isNative: false,
  name: 'Wrapped AVAX',
  icons: {
    small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/9462.png',
    large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/9462.png'
  }
}), _WETH[exports.ChainId.HECO_MAINNET] = /*#__PURE__*/new Token({
  chainId: exports.ChainId.HECO_MAINNET,
  address: '0x5545153ccfca01fbd7dd11c0b23ba694d9509a6f',
  decimals: 18,
  symbol: 'WHT',
  isNative: false,
  name: 'Wrapped HT',
  icons: {
    small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/8524.png',
    large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/8524.png'
  }
}), _WETH[exports.ChainId.HECO_TESTNET] = /*#__PURE__*/new Token({
  chainId: exports.ChainId.HECO_TESTNET,
  address: '0x7aF326B6351C8A9b8fb8CD205CBe11d4Ac5FA836',
  decimals: 18,
  symbol: 'WHT',
  isNative: false,
  name: 'Wrapped HT',
  icons: {
    small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/8524.png',
    large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/8524.png'
  }
}), _WETH[exports.ChainId.OKEX_MAINNET] = /*#__PURE__*/new Token({
  chainId: exports.ChainId.OKEX_MAINNET,
  address: '0x8F8526dbfd6E38E3D8307702cA8469Bae6C56C15',
  decimals: 18,
  symbol: 'WOKT',
  isNative: false,
  name: 'Wrapped OKT',
  icons: {
    small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/11132.png',
    large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/11132.png'
  }
}), _WETH[exports.ChainId.OKEX_TESTNET] = /*#__PURE__*/new Token({
  chainId: exports.ChainId.OKEX_TESTNET,
  address: '0x2219845942d28716c0F7C605765fABDcA1a7d9E0',
  decimals: 18,
  symbol: 'WOKT',
  isNative: false,
  name: 'Wrapped OKT',
  icons: {
    small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/11132.png',
    large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/11132.png'
  }
}), _WETH[exports.ChainId.BOBA_MAINNET] = /*#__PURE__*/new Token({
  chainId: exports.ChainId.BOBA_MAINNET,
  address: '0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000',
  decimals: 18,
  symbol: 'WETH',
  isNative: false,
  name: 'Wrapped ETH',
  icons: {
    large: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png',
    small: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png'
  }
}), _WETH[exports.ChainId.BOBA_RINKEBY] = /*#__PURE__*/new Token({
  chainId: exports.ChainId.BOBA_RINKEBY,
  address: '0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000',
  decimals: 18,
  symbol: 'WETH',
  isNative: false,
  name: 'Wrapped ETH',
  icons: {
    large: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png',
    small: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png'
  }
}), _WETH[exports.ChainId.MILKOMEDA_MAINNET] = /*#__PURE__*/new Token({
  chainId: exports.ChainId.MILKOMEDA_MAINNET,
  address: '0xAE83571000aF4499798d1e3b0fA0070EB3A3E3F9',
  decimals: 18,
  symbol: 'WADA',
  isNative: false,
  name: 'Wrapped ADA',
  icons: {
    large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/19369.png',
    small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/19369.png'
  }
}), _WETH[exports.ChainId.MILKOMEDA_DEVNET] = /*#__PURE__*/new Token({
  chainId: exports.ChainId.MILKOMEDA_DEVNET,
  // address: '0x65a51E52eCD17B641f8F0D1d56a6c9738951FDC9',
  address: '0x01bbbb9c97fc43e3393e860fc8bbead47b6960db',
  decimals: 18,
  symbol: 'WTADA',
  isNative: false,
  name: 'Wrapped TADA',
  icons: {
    large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/19369.png',
    small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/19369.png'
  }
}), _WETH[exports.ChainId.AURORA_MAINNET] = /*#__PURE__*/new Token({
  chainId: exports.ChainId.AURORA_MAINNET,
  address: '0xC9BdeEd33CD01541e1eeD10f90519d2C06Fe3feB',
  decimals: 18,
  symbol: 'WETH',
  isNative: false,
  name: 'Wrapped ETH',
  icons: {
    large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/2396.png',
    small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/2396.png'
  }
}), _WETH[exports.ChainId.AURORA_TESTNET] = /*#__PURE__*/new Token({
  chainId: exports.ChainId.AURORA_TESTNET,
  address: '0x1b6A3d5B5DCdF7a37CFE35CeBC0C4bD28eA7e946',
  decimals: 18,
  symbol: 'WETH',
  isNative: false,
  name: 'Wrapped ETH',
  icons: {
    large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/2396.png',
    small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/2396.png'
  }
}), _WETH[exports.ChainId.TELOS_MAINNET] = /*#__PURE__*/new Token({
  chainId: exports.ChainId.TELOS_MAINNET,
  address: '0xD102cE6A4dB07D247fcc28F366A623Df0938CA9E',
  decimals: 18,
  symbol: 'WTLOS',
  isNative: false,
  name: 'Wrapped TLOS',
  icons: {
    large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/18580.png',
    small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/18580.png'
  }
}), _WETH[exports.ChainId.TELOS_TESTNET] = /*#__PURE__*/new Token({
  chainId: exports.ChainId.TELOS_TESTNET,
  address: '0xaE85Bf723A9e74d6c663dd226996AC1b8d075AA9',
  decimals: 18,
  symbol: 'WTLOS',
  isNative: false,
  name: 'Wrapped TLOS',
  icons: {
    large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/18580.png',
    small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/18580.png'
  }
}), _WETH);

var Price = /*#__PURE__*/function (_Fraction) {
  _inheritsLoose(Price, _Fraction);

  // input i.e. denominator
  // output i.e. numerator
  // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token
  Price.fromRoute = function fromRoute(route) {
    var prices = [];

    for (var _iterator = _createForOfIteratorHelperLoose(route.pairs.entries()), _step; !(_step = _iterator()).done;) {
      var _step$value = _step.value,
          i = _step$value[0],
          pair = _step$value[1];
      prices.push(route.path[i].equals(pair.token0) ? new Price(pair.reserve0.token, pair.reserve1.token, pair.reserve0.raw, pair.reserve1.raw) : new Price(pair.reserve1.token, pair.reserve0.token, pair.reserve1.raw, pair.reserve0.raw));
    }

    return prices.slice(1).reduce(function (accumulator, currentValue) {
      return accumulator.multiply(currentValue);
    }, prices[0]);
  } // denominator and numerator _must_ be raw, i.e. in the native representation
  ;

  function Price(baseToken, quoteToken, denominator, numerator) {
    var _this;

    _this = _Fraction.call(this, numerator, denominator) || this;
    _this.baseToken = void 0;
    _this.quoteToken = void 0;
    _this.scalar = void 0;
    _this.baseToken = baseToken;
    _this.quoteToken = quoteToken;
    _this.scalar = new Fraction(JSBI__default["default"].exponentiate(TEN, JSBI__default["default"].BigInt(baseToken.decimals)), JSBI__default["default"].exponentiate(TEN, JSBI__default["default"].BigInt(quoteToken.decimals)));
    return _this;
  }

  var _proto = Price.prototype;

  _proto.invert = function invert() {
    return new Price(this.quoteToken, this.baseToken, this.numerator, this.denominator);
  };

  _proto.multiply = function multiply(other) {
    !tokenEquals(this.quoteToken, other.baseToken) ? invariant__default["default"](false, 'TOKEN')  : void 0;

    var fraction = _Fraction.prototype.multiply.call(this, other);

    return new Price(this.baseToken, other.quoteToken, fraction.denominator, fraction.numerator);
  } // performs floor division on overflow
  ;

  _proto.quote = function quote(tokenAmount) {
    !tokenEquals(tokenAmount.token, this.baseToken) ? invariant__default["default"](false, 'TOKEN')  : void 0;
    return new TokenAmount(this.quoteToken, _Fraction.prototype.multiply.call(this, tokenAmount.raw).quotient);
  };

  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {
    if (significantDigits === void 0) {
      significantDigits = 6;
    }

    return this.adjusted.toSignificant(significantDigits, format, rounding);
  };

  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {
    if (decimalPlaces === void 0) {
      decimalPlaces = 4;
    }

    return this.adjusted.toFixed(decimalPlaces, format, rounding);
  };

  _createClass(Price, [{
    key: "raw",
    get: function get() {
      return new Fraction(this.numerator, this.denominator);
    }
  }, {
    key: "adjusted",
    get: function get() {
      return _Fraction.prototype.multiply.call(this, this.scalar);
    }
  }]);

  return Price;
}(Fraction);

var PAIR_ADDRESS_CACHE = {};
var Pair = /*#__PURE__*/function () {
  Pair.getAddress = function getAddress(tokenA, tokenB) {
    var _PAIR_ADDRESS_CACHE, _PAIR_ADDRESS_CACHE$t;

    var tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA]; // does safety checks

    if (((_PAIR_ADDRESS_CACHE = PAIR_ADDRESS_CACHE) == null ? void 0 : (_PAIR_ADDRESS_CACHE$t = _PAIR_ADDRESS_CACHE[tokens[0].address]) == null ? void 0 : _PAIR_ADDRESS_CACHE$t[tokens[1].address]) === undefined) {
      var _PAIR_ADDRESS_CACHE2, _extends2, _extends3;

      PAIR_ADDRESS_CACHE = _extends({}, PAIR_ADDRESS_CACHE, (_extends3 = {}, _extends3[tokens[0].address] = _extends({}, (_PAIR_ADDRESS_CACHE2 = PAIR_ADDRESS_CACHE) == null ? void 0 : _PAIR_ADDRESS_CACHE2[tokens[0].address], (_extends2 = {}, _extends2[tokens[1].address] = address.getCreate2Address(FACTORY_ADDRESS[tokens[0].chainId], solidity.keccak256(['bytes'], [solidity.pack(['address', 'address'], [tokens[0].address, tokens[1].address])]), INIT_CODE_HASH[tokens[0].chainId]), _extends2)), _extends3));
    }

    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address];
  };

  function Pair(tokenAmountA, tokenAmountB) {
    this.liquidityToken = void 0;
    this.tokenAmounts = void 0;
    var tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks
    ? [tokenAmountA, tokenAmountB] : [tokenAmountB, tokenAmountA];
    this.liquidityToken = new Token({
      chainId: tokenAmounts[0].token.chainId,
      address: Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),
      decimals: 18,
      symbol: 'UNI-V2',
      name: 'Uniswap V2'
    });
    this.tokenAmounts = tokenAmounts;
  }
  /**
   * Returns true if the token is either token0 or token1
   * @param token to check
   */


  var _proto = Pair.prototype;

  _proto.involvesToken = function involvesToken(token) {
    return token.equals(this.token0) || token.equals(this.token1);
  }
  /**
   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0
   */
  ;

  /**
   * Return the price of the given token in terms of the other token in the pair.
   * @param token token to return price of
   */
  _proto.priceOf = function priceOf(token) {
    !this.involvesToken(token) ? invariant__default["default"](false, 'TOKEN')  : void 0;
    return token.equals(this.token0) ? this.token0Price : this.token1Price;
  }
  /**
   * Returns the chain ID of the tokens in the pair.
   */
  ;

  _proto.reserveOf = function reserveOf(token) {
    !this.involvesToken(token) ? invariant__default["default"](false, 'TOKEN')  : void 0;
    return token.equals(this.token0) ? this.reserve0 : this.reserve1;
  };

  _proto.getOutputAmount = function getOutputAmount(inputAmount) {
    !this.involvesToken(inputAmount.token) ? invariant__default["default"](false, 'TOKEN')  : void 0;

    if (JSBI__default["default"].equal(this.reserve0.raw, ZERO) || JSBI__default["default"].equal(this.reserve1.raw, ZERO)) {
      throw new InsufficientReservesError();
    }

    var inputReserve = this.reserveOf(inputAmount.token);
    var outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0);
    var inputAmountWithFee = JSBI__default["default"].multiply(inputAmount.raw, _998);
    var numerator = JSBI__default["default"].multiply(inputAmountWithFee, outputReserve.raw);
    var denominator = JSBI__default["default"].add(JSBI__default["default"].multiply(inputReserve.raw, _1000), inputAmountWithFee);
    var outputAmount = new TokenAmount(inputAmount.token.equals(this.token0) ? this.token1 : this.token0, JSBI__default["default"].divide(numerator, denominator));

    if (JSBI__default["default"].equal(outputAmount.raw, ZERO)) {
      throw new InsufficientInputAmountError();
    }

    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))];
  };

  _proto.getInputAmount = function getInputAmount(outputAmount) {
    !this.involvesToken(outputAmount.token) ? invariant__default["default"](false, 'TOKEN')  : void 0;

    if (JSBI__default["default"].equal(this.reserve0.raw, ZERO) || JSBI__default["default"].equal(this.reserve1.raw, ZERO) || JSBI__default["default"].greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)) {
      throw new InsufficientReservesError();
    }

    var outputReserve = this.reserveOf(outputAmount.token);
    var inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0);
    var numerator = JSBI__default["default"].multiply(JSBI__default["default"].multiply(inputReserve.raw, outputAmount.raw), _1000);
    var denominator = JSBI__default["default"].multiply(JSBI__default["default"].subtract(outputReserve.raw, outputAmount.raw), _998);
    var inputAmount = new TokenAmount(outputAmount.token.equals(this.token0) ? this.token1 : this.token0, JSBI__default["default"].add(JSBI__default["default"].divide(numerator, denominator), ONE));
    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))];
  };

  _proto.getLiquidityMinted = function getLiquidityMinted(totalSupply, tokenAmountA, tokenAmountB) {
    !totalSupply.token.equals(this.liquidityToken) ? invariant__default["default"](false, 'LIQUIDITY')  : void 0;
    var tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks
    ? [tokenAmountA, tokenAmountB] : [tokenAmountB, tokenAmountA];
    !(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1)) ? invariant__default["default"](false, 'TOKEN')  : void 0;
    var liquidity;

    if (JSBI__default["default"].equal(totalSupply.raw, ZERO)) {
      liquidity = JSBI__default["default"].subtract(sqrt(JSBI__default["default"].multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY);
    } else {
      var amount0 = JSBI__default["default"].divide(JSBI__default["default"].multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw);
      var amount1 = JSBI__default["default"].divide(JSBI__default["default"].multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw);
      liquidity = JSBI__default["default"].lessThanOrEqual(amount0, amount1) ? amount0 : amount1;
    }

    if (!JSBI__default["default"].greaterThan(liquidity, ZERO)) {
      throw new InsufficientInputAmountError();
    }

    return new TokenAmount(this.liquidityToken, liquidity);
  };

  _proto.getLiquidityValue = function getLiquidityValue(token, totalSupply, liquidity, feeOn, kLast) {
    if (feeOn === void 0) {
      feeOn = false;
    }

    !this.involvesToken(token) ? invariant__default["default"](false, 'TOKEN')  : void 0;
    !totalSupply.token.equals(this.liquidityToken) ? invariant__default["default"](false, 'TOTAL_SUPPLY')  : void 0;
    !liquidity.token.equals(this.liquidityToken) ? invariant__default["default"](false, 'LIQUIDITY')  : void 0;
    !JSBI__default["default"].lessThanOrEqual(liquidity.raw, totalSupply.raw) ? invariant__default["default"](false, 'LIQUIDITY')  : void 0;
    var totalSupplyAdjusted;

    if (!feeOn) {
      totalSupplyAdjusted = totalSupply;
    } else {
      !!!kLast ? invariant__default["default"](false, 'K_LAST')  : void 0;
      var kLastParsed = parseBigintIsh(kLast);

      if (!JSBI__default["default"].equal(kLastParsed, ZERO)) {
        var rootK = sqrt(JSBI__default["default"].multiply(this.reserve0.raw, this.reserve1.raw));
        var rootKLast = sqrt(kLastParsed);

        if (JSBI__default["default"].greaterThan(rootK, rootKLast)) {
          var numerator = JSBI__default["default"].multiply(totalSupply.raw, JSBI__default["default"].subtract(rootK, rootKLast));
          var denominator = JSBI__default["default"].add(JSBI__default["default"].multiply(rootK, FIVE), rootKLast);
          var feeLiquidity = JSBI__default["default"].divide(numerator, denominator);
          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity));
        } else {
          totalSupplyAdjusted = totalSupply;
        }
      } else {
        totalSupplyAdjusted = totalSupply;
      }
    }

    return new TokenAmount(token, JSBI__default["default"].divide(JSBI__default["default"].multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw));
  };

  _createClass(Pair, [{
    key: "token0Price",
    get: function get() {
      return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw);
    }
    /**
     * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1
     */

  }, {
    key: "token1Price",
    get: function get() {
      return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw);
    }
  }, {
    key: "chainId",
    get: function get() {
      return this.token0.chainId;
    }
  }, {
    key: "token0",
    get: function get() {
      return this.tokenAmounts[0].token;
    }
  }, {
    key: "token1",
    get: function get() {
      return this.tokenAmounts[1].token;
    }
  }, {
    key: "reserve0",
    get: function get() {
      return this.tokenAmounts[0];
    }
  }, {
    key: "reserve1",
    get: function get() {
      return this.tokenAmounts[1];
    }
  }]);

  return Pair;
}();

var Route = /*#__PURE__*/function () {
  function Route(pairs, input, output) {
    this.pairs = void 0;
    this.path = void 0;
    this.input = void 0;
    this.output = void 0;
    this.midPrice = void 0;
    !(pairs.length > 0) ? invariant__default["default"](false, 'PAIRS')  : void 0;
    !pairs.every(function (pair) {
      return pair.chainId === pairs[0].chainId;
    }) ? invariant__default["default"](false, 'CHAIN_IDS')  : void 0;
    !(pairs[0].involvesToken(input) || input.isNative && pairs[0].involvesToken(WETH[pairs[0].chainId])) ? invariant__default["default"](false, 'INPUT')  : void 0;
    !(typeof output === 'undefined' || pairs[pairs.length - 1].involvesToken(output) || output.isNative && pairs[pairs.length - 1].involvesToken(WETH[pairs[0].chainId])) ? invariant__default["default"](false, 'OUTPUT')  : void 0;
    var path = [input.isNative ? WETH[pairs[0].chainId] : input];

    for (var _iterator = _createForOfIteratorHelperLoose(pairs.entries()), _step; !(_step = _iterator()).done;) {
      var _step$value = _step.value,
          i = _step$value[0],
          pair = _step$value[1];
      var currentInput = path[i];
      !(currentInput.equals(pair.token0) || currentInput.equals(pair.token1)) ? invariant__default["default"](false, 'PATH')  : void 0;

      var _output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0;

      path.push(_output);
    }

    this.pairs = pairs;
    this.path = path;
    this.midPrice = Price.fromRoute(this);
    this.input = input;
    this.output = output != null ? output : path[path.length - 1];
  }

  _createClass(Route, [{
    key: "chainId",
    get: function get() {
      return this.pairs[0].chainId;
    }
  }]);

  return Route;
}();

/**
 * Returns the percent difference between the mid price and the execution price, i.e. price impact.
 * @param midPrice mid price before the trade
 * @param inputAmount the input amount of the trade
 * @param outputAmount the output amount of the trade
 */

function computePriceImpact(midPrice, inputAmount, outputAmount) {
  var exactQuote = midPrice.raw.multiply(inputAmount.raw); // calculate slippage := (exactQuote - outputAmount) / exactQuote

  var slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote);
  return new Percent(slippage.numerator, slippage.denominator);
} // comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts
// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first


function inputOutputComparator(a, b) {
  // must have same input and output token for comparison
  !tokenEquals(a.inputAmount.token, b.inputAmount.token) ? invariant__default["default"](false, 'INPUT_CURRENCY')  : void 0;
  !tokenEquals(a.outputAmount.token, b.outputAmount.token) ? invariant__default["default"](false, 'OUTPUT_CURRENCY')  : void 0;

  if (a.outputAmount.equalTo(b.outputAmount)) {
    if (a.inputAmount.equalTo(b.inputAmount)) {
      return 0;
    } // trade A requires less input than trade B, so A should come first


    if (a.inputAmount.lessThan(b.inputAmount)) {
      return -1;
    } else {
      return 1;
    }
  } else {
    // tradeA has less output than trade B, so should come second
    if (a.outputAmount.lessThan(b.outputAmount)) {
      return 1;
    } else {
      return -1;
    }
  }
} // extension of the input output comparator that also considers other dimensions of the trade in ranking them

function tradeComparator(a, b) {
  var ioComp = inputOutputComparator(a, b);

  if (ioComp !== 0) {
    return ioComp;
  } // consider lowest slippage next, since these are less likely to fail


  if (a.priceImpact.lessThan(b.priceImpact)) {
    return -1;
  } else if (a.priceImpact.greaterThan(b.priceImpact)) {
    return 1;
  } // finally consider the number of hops since each hop costs gas


  return a.route.path.length - b.route.path.length;
}
/**
 * Given a token amount and a chain ID, returns the equivalent representation as the token amount.
 */

function wrappedAmount(tokenAmount) {
  return tokenAmount.token.isNative ? new TokenAmount(WETH[tokenAmount.token.chainId], tokenAmount.raw) : tokenAmount;
}
function wrappedToken(token) {
  return token.isNative ? WETH[token.chainId] : token;
}
/**
 * Represents a trade executed against a list of pairs.
 * Does not account for slippage, i.e. trades that front run this trade and move the price.
 */

var Trade = /*#__PURE__*/function () {
  /**
   * The route of the trade, i.e. which pairs the trade goes through.
   */

  /**
   * The type of the trade, either exact in or exact out.
   */

  /**
   * The input amount for the trade assuming no slippage.
   */

  /**
   * The output amount for the trade assuming no slippage.
   */

  /**
   * The price expressed in terms of output amount/input amount.
   */

  /**
   * The mid price after the trade executes assuming no slippage.
   */

  /**
   * The percent difference between the mid price before the trade and the trade execution price.
   */

  /**
   * Constructs an exact in trade with the given amount in and route
   * @param route route of the exact in trade
   * @param amountIn the amount being passed in
   */
  Trade.exactIn = function exactIn(route, amountIn) {
    return new Trade(route, amountIn, exports.TradeType.EXACT_INPUT);
  }
  /**
   * Constructs an exact out trade with the given amount out and route
   * @param route route of the exact out trade
   * @param amountOut the amount returned by the trade
   */
  ;

  Trade.exactOut = function exactOut(route, amountOut) {
    return new Trade(route, amountOut, exports.TradeType.EXACT_OUTPUT);
  };

  function Trade(route, amount, tradeType) {
    this.route = void 0;
    this.tradeType = void 0;
    this.inputAmount = void 0;
    this.outputAmount = void 0;
    this.executionPrice = void 0;
    this.nextMidPrice = void 0;
    this.priceImpact = void 0;
    var amounts = new Array(route.path.length);
    var nextPairs = new Array(route.pairs.length);

    if (tradeType === exports.TradeType.EXACT_INPUT) {
      !tokenEquals(amount.token, route.input) ? invariant__default["default"](false, 'INPUT')  : void 0;
      amounts[0] = wrappedAmount(amount);

      for (var i = 0; i < route.path.length - 1; i++) {
        var pair = route.pairs[i];

        var _pair$getOutputAmount = pair.getOutputAmount(amounts[i]),
            outputAmount = _pair$getOutputAmount[0],
            nextPair = _pair$getOutputAmount[1];

        amounts[i + 1] = outputAmount;
        nextPairs[i] = nextPair;
      }
    } else {
      !tokenEquals(amount.token, route.output) ? invariant__default["default"](false, 'OUTPUT')  : void 0;
      amounts[amounts.length - 1] = wrappedAmount(amount);

      for (var _i = route.path.length - 1; _i > 0; _i--) {
        var _pair = route.pairs[_i - 1];

        var _pair$getInputAmount = _pair.getInputAmount(amounts[_i]),
            inputAmount = _pair$getInputAmount[0],
            _nextPair = _pair$getInputAmount[1];

        amounts[_i - 1] = inputAmount;
        nextPairs[_i - 1] = _nextPair;
      }
    }

    this.route = route;
    this.tradeType = tradeType;
    this.inputAmount = tradeType === exports.TradeType.EXACT_INPUT ? amount : new TokenAmount(route.input, amounts[0].raw);
    this.outputAmount = tradeType === exports.TradeType.EXACT_OUTPUT ? amount : new TokenAmount(route.output, amounts[amounts.length - 1].raw);
    this.executionPrice = new Price(this.inputAmount.token, this.outputAmount.token, this.inputAmount.raw, this.outputAmount.raw);
    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input));
    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount);
  }
  /**
   * Get the minimum amount that must be received from this trade for the given slippage tolerance
   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade
   */


  var _proto = Trade.prototype;

  _proto.minimumAmountOut = function minimumAmountOut(slippageTolerance) {
    !!slippageTolerance.lessThan(ZERO) ? invariant__default["default"](false, 'SLIPPAGE_TOLERANCE')  : void 0;

    if (this.tradeType === exports.TradeType.EXACT_OUTPUT) {
      return this.outputAmount;
    } else {
      var slippageAdjustedAmountOut = new Fraction(ONE).add(slippageTolerance).invert().multiply(this.outputAmount.raw).quotient;
      return new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut);
    }
  }
  /**
   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance
   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade
   */
  ;

  _proto.maximumAmountIn = function maximumAmountIn(slippageTolerance) {
    !!slippageTolerance.lessThan(ZERO) ? invariant__default["default"](false, 'SLIPPAGE_TOLERANCE')  : void 0;

    if (this.tradeType === exports.TradeType.EXACT_INPUT) {
      return this.inputAmount;
    } else {
      var slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient;
      return new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn);
    }
  }
  /**
   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token
   * amount to an output token, making at most `maxHops` hops.
   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting
   * the amount in among multiple routes.
   * @param pairs the pairs to consider in finding the best trade
   * @param tokenAmountIn exact amount of input token to spend
   * @param tokenOut the desired token out
   * @param maxNumResults maximum number of results to return
   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair
   * @param currentPairs used in recursion; the current list of pairs
   * @param originalAmountIn used in recursion; the original value of the tokenAmountIn parameter
   * @param bestTrades used in recursion; the current list of best trades
   */
  ;

  Trade.bestTradeExactIn = function bestTradeExactIn(pairs, tokenAmountIn, tokenOut, _temp, // used in recursion.
  currentPairs, originalAmountIn, bestTrades) {
    var _ref = _temp === void 0 ? {} : _temp,
        _ref$maxNumResults = _ref.maxNumResults,
        maxNumResults = _ref$maxNumResults === void 0 ? 3 : _ref$maxNumResults,
        _ref$maxHops = _ref.maxHops,
        maxHops = _ref$maxHops === void 0 ? 3 : _ref$maxHops;

    if (currentPairs === void 0) {
      currentPairs = [];
    }

    if (originalAmountIn === void 0) {
      originalAmountIn = tokenAmountIn;
    }

    if (bestTrades === void 0) {
      bestTrades = [];
    }

    !(pairs.length > 0) ? invariant__default["default"](false, 'PAIRS')  : void 0;
    !(maxHops > 0) ? invariant__default["default"](false, 'MAX_HOPS')  : void 0;
    !(originalAmountIn === tokenAmountIn || currentPairs.length > 0) ? invariant__default["default"](false, 'INVALID_RECURSION')  : void 0;
    var amountIn = wrappedAmount(tokenAmountIn);

    for (var i = 0; i < pairs.length; i++) {
      var pair = pairs[i]; // pair irrelevant

      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue;
      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue;
      var amountOut = void 0;

      try {
        ;

        var _pair$getOutputAmount2 = pair.getOutputAmount(amountIn);

        amountOut = _pair$getOutputAmount2[0];
      } catch (error) {
        // input too low
        if (error.isInsufficientInputAmountError) {
          continue;
        }

        throw error;
      } // we have arrived at the output token, so this is the final trade of one of the paths


      if (amountOut.token.equals(wrappedToken(tokenOut))) {
        sortedInsert(bestTrades, new Trade(new Route([].concat(currentPairs, [pair]), originalAmountIn.token, tokenOut), originalAmountIn, exports.TradeType.EXACT_INPUT), maxNumResults, tradeComparator);
      } else if (maxHops > 1 && pairs.length > 1) {
        var pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length)); // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops

        Trade.bestTradeExactIn(pairsExcludingThisPair, amountOut, tokenOut, {
          maxNumResults: maxNumResults,
          maxHops: maxHops - 1
        }, [].concat(currentPairs, [pair]), originalAmountIn, bestTrades);
      }
    }

    return bestTrades;
  }
  /**
   * similar to the above method but instead targets a fixed output amount
   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token
   * to an output token amount, making at most `maxHops` hops
   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting
   * the amount in among multiple routes.
   * @param pairs the pairs to consider in finding the best trade
   * @param tokenIn the token to spend
   * @param tokenAmountOut the exact amount of token out
   * @param maxNumResults maximum number of results to return
   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair
   * @param currentPairs used in recursion; the current list of pairs
   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter
   * @param bestTrades used in recursion; the current list of best trades
   */
  ;

  Trade.bestTradeExactOut = function bestTradeExactOut(pairs, tokenIn, tokenAmountOut, _temp2, // used in recursion.
  currentPairs, originalAmountOut, bestTrades) {
    var _ref2 = _temp2 === void 0 ? {} : _temp2,
        _ref2$maxNumResults = _ref2.maxNumResults,
        maxNumResults = _ref2$maxNumResults === void 0 ? 3 : _ref2$maxNumResults,
        _ref2$maxHops = _ref2.maxHops,
        maxHops = _ref2$maxHops === void 0 ? 3 : _ref2$maxHops;

    if (currentPairs === void 0) {
      currentPairs = [];
    }

    if (originalAmountOut === void 0) {
      originalAmountOut = tokenAmountOut;
    }

    if (bestTrades === void 0) {
      bestTrades = [];
    }

    !(pairs.length > 0) ? invariant__default["default"](false, 'PAIRS')  : void 0;
    !(maxHops > 0) ? invariant__default["default"](false, 'MAX_HOPS')  : void 0;
    !(originalAmountOut === tokenAmountOut || currentPairs.length > 0) ? invariant__default["default"](false, 'INVALID_RECURSION')  : void 0;
    var amountOut = wrappedAmount(tokenAmountOut);

    for (var i = 0; i < pairs.length; i++) {
      var pair = pairs[i]; // pair irrelevant

      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue;
      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue;
      var amountIn = void 0;

      try {
        ;

        var _pair$getInputAmount2 = pair.getInputAmount(amountOut);

        amountIn = _pair$getInputAmount2[0];
      } catch (error) {
        // not enough liquidity in this pair
        if (error.isInsufficientReservesError) {
          continue;
        }

        throw error;
      } // we have arrived at the input token, so this is the first trade of one of the paths


      if (amountIn.token.equals(wrappedToken(tokenIn))) {
        sortedInsert(bestTrades, new Trade(new Route([pair].concat(currentPairs), tokenIn, originalAmountOut.token), originalAmountOut, exports.TradeType.EXACT_OUTPUT), maxNumResults, tradeComparator);
      } else if (maxHops > 1 && pairs.length > 1) {
        var pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length)); // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops

        Trade.bestTradeExactOut(pairsExcludingThisPair, tokenIn, amountIn, {
          maxNumResults: maxNumResults,
          maxHops: maxHops - 1
        }, [pair].concat(currentPairs), originalAmountOut, bestTrades);
      }
    }

    return bestTrades;
  };

  return Trade;
}();

function toHex(tokenAmount) {
  return "0x" + tokenAmount.raw.toString(16);
}

var ZERO_HEX = '0x0';
/**
 * Represents the Uniswap V2 Router, and has static methods for helping execute trades.
 */

var Router = /*#__PURE__*/function () {
  function Router() {}

  /**
   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.
   * @param trade to produce call parameters for
   * @param options options for the call parameters
   */
  Router.swapCallParameters = function swapCallParameters(trade, options) {
    // the router does not support both ether in and out
    !!(trade.inputAmount.token.isNative && trade.outputAmount.token.isNative) ? invariant__default["default"](false, 'ETHER_IN_OUT')  : void 0;
    !(options.ttl > 0) ? invariant__default["default"](false, 'TTL')  : void 0;
    var to = validateAndParseAddress(options.recipient);
    var amountIn = toHex(trade.maximumAmountIn(options.allowedSlippage));
    var amountOut = toHex(trade.minimumAmountOut(options.allowedSlippage));
    var path = trade.route.path.map(function (token) {
      return token.address;
    });
    var deadline = "0x" + (Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16);
    var useFeeOnTransfer = Boolean(options.feeOnTransfer);
    var methodName;
    var args;
    var value;
    var offset;

    switch (trade.tradeType) {
      case exports.TradeType.EXACT_INPUT:
        if (trade.inputAmount.token.isNative) {
          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'; // (uint amountOutMin, address[] call  data path, address to, uint deadline)

          args = [amountOut, path, to, deadline];
          value = amountIn;
          offset = 0;
        } else if (trade.outputAmount.token.isNative) {
          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'; // (uint amountIn, uint amountOutMin, address[] call data path, address to, uint deadline)

          args = [amountIn, amountOut, path, to, deadline];
          value = ZERO_HEX;
          offset = 36;
        } else {
          methodName = useFeeOnTransfer ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens' : 'swapExactTokensForTokens'; // (uint amountIn, uint amountOutMin, address[] call data path, address to, uint deadline)

          args = [amountIn, amountOut, path, to, deadline];
          value = ZERO_HEX;
          offset = 36;
        }

        break;

      case exports.TradeType.EXACT_OUTPUT:
        !!useFeeOnTransfer ? invariant__default["default"](false, 'EXACT_OUT_FOT')  : void 0;

        if (trade.inputAmount.token.isNative) {
          methodName = 'swapETHForExactTokens'; // (uint amountOut, address[] call data path, address to, uint deadline)

          args = [amountOut, path, to, deadline];
          value = amountIn;
          offset = 0;
        } else if (trade.outputAmount.token.isNative) {
          methodName = 'swapTokensForExactETH'; // (uint amountOut, uint amountInMax, address[] call data path, address to, uint deadline)

          args = [amountOut, amountIn, path, to, deadline];
          value = ZERO_HEX;
          offset = 68;
        } else {
          methodName = 'swapTokensForExactTokens'; // (uint amountOut, uint amountInMax, address[] call data path, address to, uint deadline)

          args = [amountOut, amountIn, path, to, deadline];
          value = ZERO_HEX;
          offset = 68;
        }

        break;
    }

    return {
      methodName: methodName,
      args: args,
      value: value,
      offset: offset
    };
  };

  return Router;
}();

var runtime = {exports: {}};

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

(function (module) {
var runtime = (function (exports) {

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined$1; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = GeneratorFunctionPrototype;
  define(Gp, "constructor", GeneratorFunctionPrototype);
  define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  });
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined$1) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined$1;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined$1;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  define(Gp, iteratorSymbol, function() {
    return this;
  });

  define(Gp, "toString", function() {
    return "[object Generator]";
  });

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined$1;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined$1, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined$1;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined$1;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined$1;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined$1;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined$1;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
  module.exports 
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, in modern engines
  // we can explicitly access globalThis. In older engines we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  if (typeof globalThis === "object") {
    globalThis.regeneratorRuntime = runtime;
  } else {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
}
}(runtime));

var _regeneratorRuntime = runtime.exports;

var abi = [
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "owner",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "spender",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "value",
				type: "uint256"
			}
		],
		name: "Approval",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "sender",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "amount0",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "amount1",
				type: "uint256"
			},
			{
				indexed: true,
				internalType: "address",
				name: "to",
				type: "address"
			}
		],
		name: "Burn",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "sender",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "amount0",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "amount1",
				type: "uint256"
			}
		],
		name: "Mint",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "sender",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "amount0In",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "amount1In",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "amount0Out",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "amount1Out",
				type: "uint256"
			},
			{
				indexed: true,
				internalType: "address",
				name: "to",
				type: "address"
			}
		],
		name: "Swap",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: false,
				internalType: "uint112",
				name: "reserve0",
				type: "uint112"
			},
			{
				indexed: false,
				internalType: "uint112",
				name: "reserve1",
				type: "uint112"
			}
		],
		name: "Sync",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "from",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "to",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "value",
				type: "uint256"
			}
		],
		name: "Transfer",
		type: "event"
	},
	{
		constant: true,
		inputs: [
		],
		name: "DOMAIN_SEPARATOR",
		outputs: [
			{
				internalType: "bytes32",
				name: "",
				type: "bytes32"
			}
		],
		payable: false,
		stateMutability: "view",
		type: "function"
	},
	{
		constant: true,
		inputs: [
		],
		name: "MINIMUM_LIQUIDITY",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		payable: false,
		stateMutability: "pure",
		type: "function"
	},
	{
		constant: true,
		inputs: [
		],
		name: "PERMIT_TYPEHASH",
		outputs: [
			{
				internalType: "bytes32",
				name: "",
				type: "bytes32"
			}
		],
		payable: false,
		stateMutability: "pure",
		type: "function"
	},
	{
		constant: true,
		inputs: [
			{
				internalType: "address",
				name: "owner",
				type: "address"
			},
			{
				internalType: "address",
				name: "spender",
				type: "address"
			}
		],
		name: "allowance",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		payable: false,
		stateMutability: "view",
		type: "function"
	},
	{
		constant: false,
		inputs: [
			{
				internalType: "address",
				name: "spender",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "value",
				type: "uint256"
			}
		],
		name: "approve",
		outputs: [
			{
				internalType: "bool",
				name: "",
				type: "bool"
			}
		],
		payable: false,
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		constant: true,
		inputs: [
			{
				internalType: "address",
				name: "owner",
				type: "address"
			}
		],
		name: "balanceOf",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		payable: false,
		stateMutability: "view",
		type: "function"
	},
	{
		constant: false,
		inputs: [
			{
				internalType: "address",
				name: "to",
				type: "address"
			}
		],
		name: "burn",
		outputs: [
			{
				internalType: "uint256",
				name: "amount0",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "amount1",
				type: "uint256"
			}
		],
		payable: false,
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		constant: true,
		inputs: [
		],
		name: "decimals",
		outputs: [
			{
				internalType: "uint8",
				name: "",
				type: "uint8"
			}
		],
		payable: false,
		stateMutability: "pure",
		type: "function"
	},
	{
		constant: true,
		inputs: [
		],
		name: "factory",
		outputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		payable: false,
		stateMutability: "view",
		type: "function"
	},
	{
		constant: true,
		inputs: [
		],
		name: "getReserves",
		outputs: [
			{
				internalType: "uint112",
				name: "reserve0",
				type: "uint112"
			},
			{
				internalType: "uint112",
				name: "reserve1",
				type: "uint112"
			},
			{
				internalType: "uint32",
				name: "blockTimestampLast",
				type: "uint32"
			}
		],
		payable: false,
		stateMutability: "view",
		type: "function"
	},
	{
		constant: false,
		inputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			},
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		name: "initialize",
		outputs: [
		],
		payable: false,
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		constant: true,
		inputs: [
		],
		name: "kLast",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		payable: false,
		stateMutability: "view",
		type: "function"
	},
	{
		constant: false,
		inputs: [
			{
				internalType: "address",
				name: "to",
				type: "address"
			}
		],
		name: "mint",
		outputs: [
			{
				internalType: "uint256",
				name: "liquidity",
				type: "uint256"
			}
		],
		payable: false,
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		constant: true,
		inputs: [
		],
		name: "name",
		outputs: [
			{
				internalType: "string",
				name: "",
				type: "string"
			}
		],
		payable: false,
		stateMutability: "pure",
		type: "function"
	},
	{
		constant: true,
		inputs: [
			{
				internalType: "address",
				name: "owner",
				type: "address"
			}
		],
		name: "nonces",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		payable: false,
		stateMutability: "view",
		type: "function"
	},
	{
		constant: false,
		inputs: [
			{
				internalType: "address",
				name: "owner",
				type: "address"
			},
			{
				internalType: "address",
				name: "spender",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "value",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "deadline",
				type: "uint256"
			},
			{
				internalType: "uint8",
				name: "v",
				type: "uint8"
			},
			{
				internalType: "bytes32",
				name: "r",
				type: "bytes32"
			},
			{
				internalType: "bytes32",
				name: "s",
				type: "bytes32"
			}
		],
		name: "permit",
		outputs: [
		],
		payable: false,
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		constant: true,
		inputs: [
		],
		name: "price0CumulativeLast",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		payable: false,
		stateMutability: "view",
		type: "function"
	},
	{
		constant: true,
		inputs: [
		],
		name: "price1CumulativeLast",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		payable: false,
		stateMutability: "view",
		type: "function"
	},
	{
		constant: false,
		inputs: [
			{
				internalType: "address",
				name: "to",
				type: "address"
			}
		],
		name: "skim",
		outputs: [
		],
		payable: false,
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		constant: false,
		inputs: [
			{
				internalType: "uint256",
				name: "amount0Out",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "amount1Out",
				type: "uint256"
			},
			{
				internalType: "address",
				name: "to",
				type: "address"
			},
			{
				internalType: "bytes",
				name: "data",
				type: "bytes"
			}
		],
		name: "swap",
		outputs: [
		],
		payable: false,
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		constant: true,
		inputs: [
		],
		name: "symbol",
		outputs: [
			{
				internalType: "string",
				name: "",
				type: "string"
			}
		],
		payable: false,
		stateMutability: "pure",
		type: "function"
	},
	{
		constant: false,
		inputs: [
		],
		name: "sync",
		outputs: [
		],
		payable: false,
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		constant: true,
		inputs: [
		],
		name: "token0",
		outputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		payable: false,
		stateMutability: "view",
		type: "function"
	},
	{
		constant: true,
		inputs: [
		],
		name: "token1",
		outputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		payable: false,
		stateMutability: "view",
		type: "function"
	},
	{
		constant: true,
		inputs: [
		],
		name: "totalSupply",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		payable: false,
		stateMutability: "view",
		type: "function"
	},
	{
		constant: false,
		inputs: [
			{
				internalType: "address",
				name: "to",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "value",
				type: "uint256"
			}
		],
		name: "transfer",
		outputs: [
			{
				internalType: "bool",
				name: "",
				type: "bool"
			}
		],
		payable: false,
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		constant: false,
		inputs: [
			{
				internalType: "address",
				name: "from",
				type: "address"
			},
			{
				internalType: "address",
				name: "to",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "value",
				type: "uint256"
			}
		],
		name: "transferFrom",
		outputs: [
			{
				internalType: "bool",
				name: "",
				type: "bool"
			}
		],
		payable: false,
		stateMutability: "nonpayable",
		type: "function"
	}
];
var evm = {
	bytecode: {
		linkReferences: {
		},
		object: "",
		opcodes: "",
		sourceMap: ""
	},
	deployedBytecode: {
		linkReferences: {
		},
		object: "",
		opcodes: "",
		sourceMap: ""
	}
};
var metadata = "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0In\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1In\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0Out\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1Out\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint112\",\"name\":\"reserve0\",\"type\":\"uint112\"},{\"indexed\":false,\"internalType\":\"uint112\",\"name\":\"reserve1\",\"type\":\"uint112\"}],\"name\":\"Sync\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINIMUM_LIQUIDITY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"reserve0\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"reserve1\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"blockTimestampLast\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price0CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price1CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"skim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0Out\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Out\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sync\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IPancakePair.sol\":\"IPancakePair\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IPancakePair.sol\":{\"keccak256\":\"0xc432aeec5c038f15c3670ee6128ce41dbfa1f7a9979dc37b967213436ae77b33\",\"urls\":[\"bzz-raw://3bb06c5526b4691a4128f4f8f6a2ecca9af5f149848a2ec4cb60bd775d94568b\",\"dweb:/ipfs/QmRYv5qt1TzSEPYhSXvfejncnGwZV5o6twDrTmtVg2Rx74\"]}},\"version\":1}";
var bytecode = "";
var IPancakePair = {
	abi: abi,
	evm: evm,
	metadata: metadata,
	"interface": [
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "owner",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "spender",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "value",
				type: "uint256"
			}
		],
		name: "Approval",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "sender",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "amount0",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "amount1",
				type: "uint256"
			},
			{
				indexed: true,
				internalType: "address",
				name: "to",
				type: "address"
			}
		],
		name: "Burn",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "sender",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "amount0",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "amount1",
				type: "uint256"
			}
		],
		name: "Mint",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "sender",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "amount0In",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "amount1In",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "amount0Out",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "amount1Out",
				type: "uint256"
			},
			{
				indexed: true,
				internalType: "address",
				name: "to",
				type: "address"
			}
		],
		name: "Swap",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: false,
				internalType: "uint112",
				name: "reserve0",
				type: "uint112"
			},
			{
				indexed: false,
				internalType: "uint112",
				name: "reserve1",
				type: "uint112"
			}
		],
		name: "Sync",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "from",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "to",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "value",
				type: "uint256"
			}
		],
		name: "Transfer",
		type: "event"
	},
	{
		constant: true,
		inputs: [
		],
		name: "DOMAIN_SEPARATOR",
		outputs: [
			{
				internalType: "bytes32",
				name: "",
				type: "bytes32"
			}
		],
		payable: false,
		stateMutability: "view",
		type: "function"
	},
	{
		constant: true,
		inputs: [
		],
		name: "MINIMUM_LIQUIDITY",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		payable: false,
		stateMutability: "pure",
		type: "function"
	},
	{
		constant: true,
		inputs: [
		],
		name: "PERMIT_TYPEHASH",
		outputs: [
			{
				internalType: "bytes32",
				name: "",
				type: "bytes32"
			}
		],
		payable: false,
		stateMutability: "pure",
		type: "function"
	},
	{
		constant: true,
		inputs: [
			{
				internalType: "address",
				name: "owner",
				type: "address"
			},
			{
				internalType: "address",
				name: "spender",
				type: "address"
			}
		],
		name: "allowance",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		payable: false,
		stateMutability: "view",
		type: "function"
	},
	{
		constant: false,
		inputs: [
			{
				internalType: "address",
				name: "spender",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "value",
				type: "uint256"
			}
		],
		name: "approve",
		outputs: [
			{
				internalType: "bool",
				name: "",
				type: "bool"
			}
		],
		payable: false,
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		constant: true,
		inputs: [
			{
				internalType: "address",
				name: "owner",
				type: "address"
			}
		],
		name: "balanceOf",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		payable: false,
		stateMutability: "view",
		type: "function"
	},
	{
		constant: false,
		inputs: [
			{
				internalType: "address",
				name: "to",
				type: "address"
			}
		],
		name: "burn",
		outputs: [
			{
				internalType: "uint256",
				name: "amount0",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "amount1",
				type: "uint256"
			}
		],
		payable: false,
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		constant: true,
		inputs: [
		],
		name: "decimals",
		outputs: [
			{
				internalType: "uint8",
				name: "",
				type: "uint8"
			}
		],
		payable: false,
		stateMutability: "pure",
		type: "function"
	},
	{
		constant: true,
		inputs: [
		],
		name: "factory",
		outputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		payable: false,
		stateMutability: "view",
		type: "function"
	},
	{
		constant: true,
		inputs: [
		],
		name: "getReserves",
		outputs: [
			{
				internalType: "uint112",
				name: "reserve0",
				type: "uint112"
			},
			{
				internalType: "uint112",
				name: "reserve1",
				type: "uint112"
			},
			{
				internalType: "uint32",
				name: "blockTimestampLast",
				type: "uint32"
			}
		],
		payable: false,
		stateMutability: "view",
		type: "function"
	},
	{
		constant: false,
		inputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			},
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		name: "initialize",
		outputs: [
		],
		payable: false,
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		constant: true,
		inputs: [
		],
		name: "kLast",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		payable: false,
		stateMutability: "view",
		type: "function"
	},
	{
		constant: false,
		inputs: [
			{
				internalType: "address",
				name: "to",
				type: "address"
			}
		],
		name: "mint",
		outputs: [
			{
				internalType: "uint256",
				name: "liquidity",
				type: "uint256"
			}
		],
		payable: false,
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		constant: true,
		inputs: [
		],
		name: "name",
		outputs: [
			{
				internalType: "string",
				name: "",
				type: "string"
			}
		],
		payable: false,
		stateMutability: "pure",
		type: "function"
	},
	{
		constant: true,
		inputs: [
			{
				internalType: "address",
				name: "owner",
				type: "address"
			}
		],
		name: "nonces",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		payable: false,
		stateMutability: "view",
		type: "function"
	},
	{
		constant: false,
		inputs: [
			{
				internalType: "address",
				name: "owner",
				type: "address"
			},
			{
				internalType: "address",
				name: "spender",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "value",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "deadline",
				type: "uint256"
			},
			{
				internalType: "uint8",
				name: "v",
				type: "uint8"
			},
			{
				internalType: "bytes32",
				name: "r",
				type: "bytes32"
			},
			{
				internalType: "bytes32",
				name: "s",
				type: "bytes32"
			}
		],
		name: "permit",
		outputs: [
		],
		payable: false,
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		constant: true,
		inputs: [
		],
		name: "price0CumulativeLast",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		payable: false,
		stateMutability: "view",
		type: "function"
	},
	{
		constant: true,
		inputs: [
		],
		name: "price1CumulativeLast",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		payable: false,
		stateMutability: "view",
		type: "function"
	},
	{
		constant: false,
		inputs: [
			{
				internalType: "address",
				name: "to",
				type: "address"
			}
		],
		name: "skim",
		outputs: [
		],
		payable: false,
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		constant: false,
		inputs: [
			{
				internalType: "uint256",
				name: "amount0Out",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "amount1Out",
				type: "uint256"
			},
			{
				internalType: "address",
				name: "to",
				type: "address"
			},
			{
				internalType: "bytes",
				name: "data",
				type: "bytes"
			}
		],
		name: "swap",
		outputs: [
		],
		payable: false,
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		constant: true,
		inputs: [
		],
		name: "symbol",
		outputs: [
			{
				internalType: "string",
				name: "",
				type: "string"
			}
		],
		payable: false,
		stateMutability: "pure",
		type: "function"
	},
	{
		constant: false,
		inputs: [
		],
		name: "sync",
		outputs: [
		],
		payable: false,
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		constant: true,
		inputs: [
		],
		name: "token0",
		outputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		payable: false,
		stateMutability: "view",
		type: "function"
	},
	{
		constant: true,
		inputs: [
		],
		name: "token1",
		outputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		payable: false,
		stateMutability: "view",
		type: "function"
	},
	{
		constant: true,
		inputs: [
		],
		name: "totalSupply",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		payable: false,
		stateMutability: "view",
		type: "function"
	},
	{
		constant: false,
		inputs: [
			{
				internalType: "address",
				name: "to",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "value",
				type: "uint256"
			}
		],
		name: "transfer",
		outputs: [
			{
				internalType: "bool",
				name: "",
				type: "bool"
			}
		],
		payable: false,
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		constant: false,
		inputs: [
			{
				internalType: "address",
				name: "from",
				type: "address"
			},
			{
				internalType: "address",
				name: "to",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "value",
				type: "uint256"
			}
		],
		name: "transferFrom",
		outputs: [
			{
				internalType: "bool",
				name: "",
				type: "bool"
			}
		],
		payable: false,
		stateMutability: "nonpayable",
		type: "function"
	}
],
	bytecode: bytecode
};

var ERC20 = [
	{
		constant: true,
		inputs: [
		],
		name: "decimals",
		outputs: [
			{
				name: "",
				type: "uint8"
			}
		],
		payable: false,
		stateMutability: "view",
		type: "function"
	},
	{
		constant: true,
		inputs: [
			{
				name: "",
				type: "address"
			}
		],
		name: "balanceOf",
		outputs: [
			{
				name: "",
				type: "uint256"
			}
		],
		payable: false,
		stateMutability: "view",
		type: "function"
	}
];

var _TOKEN_DECIMALS_CACHE;
var TOKEN_DECIMALS_CACHE = (_TOKEN_DECIMALS_CACHE = {}, _TOKEN_DECIMALS_CACHE[exports.ChainId.BSC_MAINNET] = {
  '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD

}, _TOKEN_DECIMALS_CACHE);
/**
 * Contains methods for constructing instances of pairs and tokens from on-chain data.
 */

var Fetcher = /*#__PURE__*/function () {
  function Fetcher() {}

  /**
   * Fetch information for a given token on the given chain, using the given ethers provider.
   * @param chainId chain of the token
   * @param address address of the token on the chain
   * @param provider provider used to fetch the token
   * @param symbol optional symbol of the token
   * @param name optional name of the token
   */
  Fetcher.fetchTokenData =
  /*#__PURE__*/
  function () {
    var _fetchTokenData = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(chainId, address, provider, symbol, name) {
      var _TOKEN_DECIMALS_CACHE2, _TOKEN_DECIMALS_CACHE3;

      var parsedDecimals;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (provider === void 0) {
                provider = /*#__PURE__*/providers.getDefaultProvider( /*#__PURE__*/networks.getNetwork(chainId));
              }

              if (!(typeof ((_TOKEN_DECIMALS_CACHE2 = TOKEN_DECIMALS_CACHE) == null ? void 0 : (_TOKEN_DECIMALS_CACHE3 = _TOKEN_DECIMALS_CACHE2[chainId]) == null ? void 0 : _TOKEN_DECIMALS_CACHE3[address]) === 'number')) {
                _context.next = 5;
                break;
              }

              _context.t0 = TOKEN_DECIMALS_CACHE[chainId][address];
              _context.next = 8;
              break;

            case 5:
              _context.next = 7;
              return new contracts.Contract(address, ERC20, provider).decimals().then(function (decimals) {
                var _TOKEN_DECIMALS_CACHE4, _extends2, _extends3;

                TOKEN_DECIMALS_CACHE = _extends({}, TOKEN_DECIMALS_CACHE, (_extends3 = {}, _extends3[chainId] = _extends({}, (_TOKEN_DECIMALS_CACHE4 = TOKEN_DECIMALS_CACHE) == null ? void 0 : _TOKEN_DECIMALS_CACHE4[chainId], (_extends2 = {}, _extends2[address] = decimals, _extends2)), _extends3));
                return decimals;
              });

            case 7:
              _context.t0 = _context.sent;

            case 8:
              parsedDecimals = _context.t0;
              return _context.abrupt("return", new Token({
                chainId: chainId,
                address: address,
                decimals: parsedDecimals,
                symbol: symbol,
                name: name
              }));

            case 10:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    function fetchTokenData(_x, _x2, _x3, _x4, _x5) {
      return _fetchTokenData.apply(this, arguments);
    }

    return fetchTokenData;
  }()
  /**
   * Fetches information about a pair and constructs a pair from the given two tokens.
   * @param tokenA first token
   * @param tokenB second token
   * @param provider the provider to use to fetch the data
   */
  ;

  Fetcher.fetchPairData =
  /*#__PURE__*/
  function () {
    var _fetchPairData = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(tokenA, tokenB, provider) {
      var address, _yield$Contract$getRe, reserves0, reserves1, balances;

      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (provider === void 0) {
                provider = /*#__PURE__*/providers.getDefaultProvider( /*#__PURE__*/networks.getNetwork(tokenA.chainId));
              }

              !(tokenA.chainId === tokenB.chainId) ? invariant__default["default"](false, 'CHAIN_ID')  : void 0;
              address = Pair.getAddress(tokenA, tokenB);
              _context2.next = 5;
              return new contracts.Contract(address, IPancakePair.abi, provider).getReserves();

            case 5:
              _yield$Contract$getRe = _context2.sent;
              reserves0 = _yield$Contract$getRe[0];
              reserves1 = _yield$Contract$getRe[1];
              balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0];
              return _context2.abrupt("return", new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1])));

            case 10:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    function fetchPairData(_x6, _x7, _x8) {
      return _fetchPairData.apply(this, arguments);
    }

    return fetchPairData;
  }();

  return Fetcher;
}();

var _ONE_INCH_ORACLE_MAP, _WETH_ONLY, _DEX_TOKENS_TO_CHECK_, _extends2, _CUSTOM_BASES, _MULTICALL_ADDRESSES;
var CHAINS_PRIORITY = [exports.ChainId.ETH_MAINNET, exports.ChainId.ETH_RINKEBY, exports.ChainId.ETH_KOVAN, exports.ChainId.BSC_MAINNET, exports.ChainId.BSC_TESTNET, exports.ChainId.AVAX_MAINNET, exports.ChainId.AVAX_TESTNET, exports.ChainId.BOBA_MAINNET, exports.ChainId.BOBA_RINKEBY, exports.ChainId.AURORA_MAINNET, exports.ChainId.AURORA_TESTNET, exports.ChainId.TELOS_MAINNET, exports.ChainId.TELOS_TESTNET, exports.ChainId.MATIC_MAINNET, exports.ChainId.MATIC_MUMBAI, exports.ChainId.MILKOMEDA_MAINNET, exports.ChainId.MILKOMEDA_DEVNET, exports.ChainId.OKEX_MAINNET, exports.ChainId.OKEX_TESTNET, exports.ChainId.HECO_MAINNET, exports.ChainId.HECO_TESTNET];
var ONE_INCH_CHAINS = [exports.ChainId.ETH_MAINNET, exports.ChainId.BSC_MAINNET, exports.ChainId.AVAX_MAINNET, exports.ChainId.MATIC_MAINNET];
var ONE_INCH_ORACLE_MAP = (_ONE_INCH_ORACLE_MAP = {}, _ONE_INCH_ORACLE_MAP[exports.ChainId.ETH_MAINNET] = '0x07D91f5fb9Bf7798734C3f606dB065549F6893bb', _ONE_INCH_ORACLE_MAP[exports.ChainId.BSC_MAINNET] = '0xfbD61B037C325b959c0F6A7e69D8f37770C2c550', _ONE_INCH_ORACLE_MAP[exports.ChainId.AVAX_MAINNET] = '0xBd0c7AaF0bF082712EbE919a9dD94b2d978f79A9', _ONE_INCH_ORACLE_MAP[exports.ChainId.MATIC_MAINNET] = '0x7F069df72b7A39bCE9806e3AfaF579E54D8CF2b9', _ONE_INCH_ORACLE_MAP);
var WETH_ONLY = (_WETH_ONLY = {}, _WETH_ONLY[exports.ChainId.ETH_MAINNET] = [WETH[exports.ChainId.ETH_MAINNET]], _WETH_ONLY[exports.ChainId.ETH_RINKEBY] = [WETH[exports.ChainId.ETH_RINKEBY]], _WETH_ONLY[exports.ChainId.ETH_KOVAN] = [WETH[exports.ChainId.ETH_KOVAN]], _WETH_ONLY[exports.ChainId.BSC_MAINNET] = [WETH[exports.ChainId.BSC_MAINNET]], _WETH_ONLY[exports.ChainId.BSC_TESTNET] = [WETH[exports.ChainId.BSC_TESTNET]], _WETH_ONLY[exports.ChainId.MATIC_MAINNET] = [WETH[exports.ChainId.MATIC_MAINNET]], _WETH_ONLY[exports.ChainId.MATIC_MUMBAI] = [WETH[exports.ChainId.MATIC_MUMBAI]], _WETH_ONLY[exports.ChainId.AVAX_MAINNET] = [WETH[exports.ChainId.AVAX_MAINNET]], _WETH_ONLY[exports.ChainId.AVAX_TESTNET] = [WETH[exports.ChainId.AVAX_TESTNET]], _WETH_ONLY[exports.ChainId.HECO_MAINNET] = [WETH[exports.ChainId.HECO_MAINNET]], _WETH_ONLY[exports.ChainId.HECO_TESTNET] = [WETH[exports.ChainId.HECO_TESTNET]], _WETH_ONLY[exports.ChainId.OKEX_MAINNET] = [WETH[exports.ChainId.OKEX_MAINNET]], _WETH_ONLY[exports.ChainId.OKEX_TESTNET] = [WETH[exports.ChainId.OKEX_TESTNET]], _WETH_ONLY[exports.ChainId.BOBA_MAINNET] = [WETH[exports.ChainId.BOBA_MAINNET]], _WETH_ONLY[exports.ChainId.BOBA_RINKEBY] = [WETH[exports.ChainId.BOBA_RINKEBY]], _WETH_ONLY[exports.ChainId.MILKOMEDA_MAINNET] = [WETH[exports.ChainId.MILKOMEDA_MAINNET]], _WETH_ONLY[exports.ChainId.MILKOMEDA_DEVNET] = [WETH[exports.ChainId.MILKOMEDA_DEVNET]], _WETH_ONLY[exports.ChainId.AURORA_MAINNET] = [WETH[exports.ChainId.AURORA_MAINNET]], _WETH_ONLY[exports.ChainId.AURORA_TESTNET] = [WETH[exports.ChainId.AURORA_TESTNET]], _WETH_ONLY[exports.ChainId.TELOS_MAINNET] = [WETH[exports.ChainId.TELOS_MAINNET]], _WETH_ONLY[exports.ChainId.TELOS_TESTNET] = [WETH[exports.ChainId.TELOS_TESTNET]], _WETH_ONLY);
var DEX_TOKENS_TO_CHECK_TRADES_AGAINST = (_DEX_TOKENS_TO_CHECK_ = {}, _DEX_TOKENS_TO_CHECK_[exports.ChainId.ETH_MAINNET] = [/*#__PURE__*/new Token({
  chainId: exports.ChainId.ETH_MAINNET,
  address: '0x6B175474E89094C44Da98b954EedeAC495271d0F',
  decimals: 18,
  symbol: 'DAI',
  name: 'Dai Stablecoin'
}), /*#__PURE__*/new Token({
  chainId: exports.ChainId.ETH_MAINNET,
  address: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',
  decimals: 6,
  symbol: 'USDC',
  name: 'USD//C'
}), /*#__PURE__*/new Token({
  chainId: exports.ChainId.ETH_MAINNET,
  address: '0xdAC17F958D2ee523a2206206994597C13D831ec7',
  decimals: 6,
  symbol: 'USDT',
  name: 'Tether USD'
}) // new Token({
//     chainId: ChainId.ETH_MAINNET,
//     address: '0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599',
//     decimals: 8,
//     symbol: 'WBTC',
//     name: 'Wrapped BTC',
// }),
], _DEX_TOKENS_TO_CHECK_[exports.ChainId.BSC_MAINNET] = [
/*#__PURE__*/
// new Token({
//     chainId: ChainId.BSC_MAINNET,
//     address: '0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82',
//     decimals: 18,
//     symbol: 'CAKE',
//     name: 'PancakeSwap Token',
// }),
new Token({
  chainId: exports.ChainId.BSC_MAINNET,
  address: '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56',
  decimals: 18,
  symbol: 'BUSD',
  name: 'Binance USD'
}), /*#__PURE__*/new Token({
  chainId: exports.ChainId.BSC_MAINNET,
  address: '0x55d398326f99059fF775485246999027B3197955',
  decimals: 18,
  symbol: 'USDT',
  name: 'Tether USD'
}),
/*#__PURE__*/
// new Token({
//     chainId: ChainId.BSC_MAINNET,
//     address: '0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c',
//     decimals: 18,
//     symbol: 'BTCB',
//     name: 'Binance BTC',
// }),
// new Token({
//     chainId: ChainId.BSC_MAINNET,
//     address: '0x23396cF899Ca06c4472205fC903bDB4de249D6fC',
//     decimals: 18,
//     symbol: 'UST',
//     name: 'Wrapped UST Token',
// }),
// new Token({
//     chainId: ChainId.BSC_MAINNET,
//     address: '0x2170Ed0880ac9A755fd29B2688956BD959F933F8',
//     decimals: 18,
//     symbol: 'ETH',
//     name: 'Binance-Peg Ethereum Token',
// }),
new Token({
  chainId: exports.ChainId.BSC_MAINNET,
  address: '0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d',
  decimals: 18,
  symbol: 'USDC',
  name: 'Binance-Peg USD Coin'
})], _DEX_TOKENS_TO_CHECK_[exports.ChainId.AVAX_MAINNET] = [
/*#__PURE__*/
// new Token({
//     chainId: ChainId.AVAX_MAINNET,
//     address: '0x60781C2586D68229fde47564546784ab3fACA982',
//     decimals: 18,
//     symbol: 'PNG',
//     name: 'Pangolin',
// }),
new Token({
  chainId: exports.ChainId.AVAX_MAINNET,
  address: '0xc7198437980c041c805A1EDcbA50c1Ce5db95118',
  decimals: 6,
  symbol: 'USDT.e',
  name: 'Tether USD'
}), /*#__PURE__*/new Token({
  chainId: exports.ChainId.AVAX_MAINNET,
  address: '0xd586E7F844cEa2F87f50152665BCbc2C279D8d70',
  decimals: 18,
  symbol: 'DAI.e',
  name: 'Dai Stablecoin'
}), /*#__PURE__*/new Token({
  chainId: exports.ChainId.AVAX_MAINNET,
  address: '0xA7D7079b0FEaD91F3e65f86E8915Cb59c1a4C664',
  decimals: 6,
  symbol: 'USDC.e',
  name: 'USD Coin'
}),
/*#__PURE__*/
// new Token({
//     chainId: ChainId.AVAX_MAINNET,
//     address: '0x260Bbf5698121EB85e7a74f2E45E16Ce762EbE11',
//     decimals: 6,
//     symbol: 'UST',
//     name: 'Axelar Wrapped UST',
// }),
new Token({
  chainId: exports.ChainId.AVAX_MAINNET,
  address: '0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E',
  decimals: 6,
  symbol: 'USDC',
  name: 'USD Coin'
})], _DEX_TOKENS_TO_CHECK_[exports.ChainId.MATIC_MAINNET] = [/*#__PURE__*/new Token({
  chainId: exports.ChainId.MATIC_MAINNET,
  address: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
  decimals: 6,
  symbol: 'USDC',
  name: 'USDC'
}), /*#__PURE__*/new Token({
  chainId: exports.ChainId.MATIC_MAINNET,
  address: '0xc2132D05D31c914a87C6611C10748AEb04B58e8F',
  decimals: 6,
  symbol: 'USDT',
  name: 'Tether USD'
}),
/*#__PURE__*/
// new Token({
//     chainId: ChainId.MATIC_MAINNET,
//     address: '0x831753DD7087CaC61aB5644b308642cc1c33Dc13',
//     decimals: 18,
//     symbol: 'QUICK',
//     name: 'QuickSwap',
// }),
// new Token({
//     chainId: ChainId.MATIC_MAINNET,
//     address: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',
//     decimals: 18,
//     symbol: 'ETH',
//     name: 'Ether',
// }),
new Token({
  chainId: exports.ChainId.MATIC_MAINNET,
  address: '0x1BFD67037B42Cf73acF2047067bd4F2C47D9BfD6',
  decimals: 18,
  symbol: 'wBTC',
  name: 'Wrapped Bitcoin'
}), /*#__PURE__*/new Token({
  chainId: exports.ChainId.MATIC_MAINNET,
  address: '0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063',
  decimals: 18,
  symbol: 'DAI',
  name: 'Dai Stablecoin'
})], _DEX_TOKENS_TO_CHECK_[exports.ChainId.BOBA_MAINNET] = [/*#__PURE__*/new Token({
  chainId: exports.ChainId.BOBA_MAINNET,
  symbol: 'DAI',
  name: 'Dai Stablecoin',
  address: '0xf74195Bb8a5cf652411867c5C2C5b8C2a402be35',
  decimals: 18
}), /*#__PURE__*/new Token({
  chainId: exports.ChainId.BOBA_MAINNET,
  symbol: 'WBTC',
  name: 'Wrapped BTC',
  address: '0xdc0486f8bf31DF57a952bcd3c1d3e166e3d9eC8b',
  decimals: 8
}), /*#__PURE__*/new Token({
  chainId: exports.ChainId.BOBA_MAINNET,
  name: 'USD Coin',
  address: '0x66a2A913e447d6b4BF33EFbec43aAeF87890FBbc',
  symbol: 'USDC',
  decimals: 6
}), /*#__PURE__*/new Token({
  chainId: exports.ChainId.BOBA_MAINNET,
  symbol: 'USDT',
  name: 'Tether USD',
  address: '0x5DE1677344D3Cb0D7D465c10b72A8f60699C062d',
  decimals: 6
}), /*#__PURE__*/new Token({
  chainId: exports.ChainId.BOBA_MAINNET,
  symbol: 'BOBA',
  name: 'Boba Token',
  address: '0xa18bF3994C0Cc6E3b63ac420308E5383f53120D7',
  decimals: 18
}), /*#__PURE__*/new Token({
  chainId: exports.ChainId.BOBA_MAINNET,
  symbol: 'OLO',
  name: 'OolongSwap Token',
  address: '0x5008F837883EA9a07271a1b5eB0658404F5a9610',
  decimals: 18
})], _DEX_TOKENS_TO_CHECK_[exports.ChainId.MILKOMEDA_MAINNET] = [/*#__PURE__*/new Token({
  chainId: exports.ChainId.MILKOMEDA_MAINNET,
  symbol: 'sUSDC',
  name: 'USDC from Ethereum',
  address: '0x42110A5133F91B49E32B671Db86E2C44Edc13832',
  decimals: 6
}), /*#__PURE__*/new Token({
  chainId: exports.ChainId.MILKOMEDA_MAINNET,
  symbol: 'SIS',
  name: 'SIS from Ethereum',
  address: '0xedd4D7DAa6bf8746997CEbbF974a60B838757601',
  decimals: 18
})], _DEX_TOKENS_TO_CHECK_[exports.ChainId.AURORA_MAINNET] = [/*#__PURE__*/new Token({
  chainId: exports.ChainId.AURORA_MAINNET,
  symbol: 'USDC',
  name: 'USD Coin',
  address: '0xB12BFcA5A55806AaF64E99521918A4bf0fC40802',
  decimals: 6
}), /*#__PURE__*/new Token({
  chainId: exports.ChainId.AURORA_MAINNET,
  symbol: 'USDT',
  name: 'Tether USD',
  address: '0x4988a896b1227218e4A686fdE5EabdcAbd91571f',
  decimals: 6
})], _DEX_TOKENS_TO_CHECK_); // used to construct intermediary pairs for trading

var BASES_TO_CHECK_TRADES_AGAINST = /*#__PURE__*/_extends({}, WETH_ONLY, (_extends2 = {}, _extends2[exports.ChainId.ETH_MAINNET] = /*#__PURE__*/[WETH[exports.ChainId.ETH_MAINNET]].concat(DEX_TOKENS_TO_CHECK_TRADES_AGAINST[exports.ChainId.ETH_MAINNET]), _extends2[exports.ChainId.BSC_MAINNET] = /*#__PURE__*/[WETH[exports.ChainId.BSC_MAINNET]].concat(DEX_TOKENS_TO_CHECK_TRADES_AGAINST[exports.ChainId.BSC_MAINNET]), _extends2[exports.ChainId.AVAX_MAINNET] = /*#__PURE__*/[WETH[exports.ChainId.AVAX_MAINNET]].concat(DEX_TOKENS_TO_CHECK_TRADES_AGAINST[exports.ChainId.AVAX_MAINNET]), _extends2[exports.ChainId.MATIC_MAINNET] = /*#__PURE__*/[WETH[exports.ChainId.MATIC_MAINNET]].concat(DEX_TOKENS_TO_CHECK_TRADES_AGAINST[exports.ChainId.MATIC_MAINNET]), _extends2[exports.ChainId.BOBA_MAINNET] = /*#__PURE__*/[WETH[exports.ChainId.BOBA_MAINNET]].concat(DEX_TOKENS_TO_CHECK_TRADES_AGAINST[exports.ChainId.BOBA_MAINNET]), _extends2[exports.ChainId.AURORA_MAINNET] = /*#__PURE__*/[WETH[exports.ChainId.AURORA_MAINNET]].concat(DEX_TOKENS_TO_CHECK_TRADES_AGAINST[exports.ChainId.AURORA_MAINNET]), _extends2));
/**
 * Some tokens can only be swapped via certain pairs, so we override the list of bases that are considered for these
 * tokens.
 */

var CUSTOM_BASES = (_CUSTOM_BASES = {}, _CUSTOM_BASES[exports.ChainId.BSC_MAINNET] = {}, _CUSTOM_BASES); // one basis point

var ONE_BIPS = /*#__PURE__*/new Percent( /*#__PURE__*/JSBI__default["default"].BigInt(1), /*#__PURE__*/JSBI__default["default"].BigInt(10000));
var BIPS_BASE = /*#__PURE__*/JSBI__default["default"].BigInt(10000); // Multicall2 addresses (tryAggregate method required)

var MULTICALL_ADDRESSES = (_MULTICALL_ADDRESSES = {}, _MULTICALL_ADDRESSES[exports.ChainId.ETH_MAINNET] = '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696', _MULTICALL_ADDRESSES[exports.ChainId.ETH_RINKEBY] = '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696', _MULTICALL_ADDRESSES[exports.ChainId.ETH_KOVAN] = '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696', _MULTICALL_ADDRESSES[exports.ChainId.BSC_MAINNET] = '0xfF6FD90A470Aaa0c1B8A54681746b07AcdFedc9B', _MULTICALL_ADDRESSES[exports.ChainId.BSC_TESTNET] = '0xbC4F726A6dB460DcFE49E6a56886470B94Dfc302', _MULTICALL_ADDRESSES[exports.ChainId.MATIC_MAINNET] = '0x275617327c958bD06b5D6b871E7f491D76113dd8', _MULTICALL_ADDRESSES[exports.ChainId.MATIC_MUMBAI] = '0xe9939e7Ea7D7fb619Ac57f648Da7B1D425832631', _MULTICALL_ADDRESSES[exports.ChainId.AVAX_MAINNET] = '0x29b6603d17b9d8f021ecb8845b6fd06e1adf89de', _MULTICALL_ADDRESSES[exports.ChainId.AVAX_TESTNET] = '0x9A9b5Ef5CeAbaC69d3B4A71c4da782554A35B638', _MULTICALL_ADDRESSES[exports.ChainId.HECO_MAINNET] = constants.AddressZero, _MULTICALL_ADDRESSES[exports.ChainId.HECO_TESTNET] = '0x9a9b5ef5ceabac69d3b4a71c4da782554a35b638', _MULTICALL_ADDRESSES[exports.ChainId.OKEX_MAINNET] = constants.AddressZero, _MULTICALL_ADDRESSES[exports.ChainId.OKEX_TESTNET] = '0x9A9b5Ef5CeAbaC69d3B4A71c4da782554A35B638', _MULTICALL_ADDRESSES[exports.ChainId.BOBA_MAINNET] = '0xaeD5b25BE1c3163c907a471082640450F928DDFE', _MULTICALL_ADDRESSES[exports.ChainId.BOBA_RINKEBY] = '0x773ccf8ba321c9f96a100b4b0fa1ecf7046645f5', _MULTICALL_ADDRESSES[exports.ChainId.MILKOMEDA_MAINNET] = '0xa46157Cda2D019Ba4cDcd8cE12A04760c15C355b', _MULTICALL_ADDRESSES[exports.ChainId.MILKOMEDA_DEVNET] = '0x41b5984f45AfB2560a0ED72bB69A98E8b32B3cCA', _MULTICALL_ADDRESSES[exports.ChainId.AURORA_MAINNET] = '0xbf69a56d35b8d6f5a8e0e96b245a72f735751e54', _MULTICALL_ADDRESSES[exports.ChainId.AURORA_TESTNET] = '0x4a5143B13C84DB00E6d8c19b9EA00f3b91416d20', _MULTICALL_ADDRESSES[exports.ChainId.TELOS_MAINNET] = '0x53dC7535028e2fcaCa0d847AD108b9240C0801b1', _MULTICALL_ADDRESSES[exports.ChainId.TELOS_TESTNET] = '0x9a01bf917477dd9f5d715d188618fc8b7350cd22', _MULTICALL_ADDRESSES);

exports.Field = void 0;

(function (Field) {
  Field["INPUT"] = "INPUT";
  Field["OUTPUT"] = "OUTPUT";
})(exports.Field || (exports.Field = {}));

exports.PairState = void 0;

(function (PairState) {
  PairState[PairState["LOADING"] = 0] = "LOADING";
  PairState[PairState["NOT_EXISTS"] = 1] = "NOT_EXISTS";
  PairState[PairState["EXISTS"] = 2] = "EXISTS";
  PairState[PairState["INVALID"] = 3] = "INVALID";
})(exports.PairState || (exports.PairState = {}));

var canOneInch = function canOneInch(chainId) {
  return ONE_INCH_CHAINS.includes(chainId);
};
function getInternalId(_ref) {
  var contractAddress = _ref.contractAddress,
      requestCount = _ref.requestCount,
      chainId = _ref.chainId;
  return ethers.utils.solidityKeccak256(['address', 'uint256', 'uint256'], [contractAddress, requestCount, chainId]);
}
function getExternalId(_ref2) {
  var internalId = _ref2.internalId,
      contractAddress = _ref2.contractAddress,
      revertableAddress = _ref2.revertableAddress,
      chainId = _ref2.chainId;
  return ethers.utils.solidityKeccak256(['bytes32', 'address', 'address', 'uint256'], [internalId, contractAddress, revertableAddress, chainId]);
}
function calculateGasMargin(value) {
  return value.mul(ethers.BigNumber.from(10000).add(ethers.BigNumber.from(1000))).div(ethers.BigNumber.from(10000));
} // computes price breakdown for the trade

function computeTradePriceBreakdown(trade, dexFee) {
  var BASE_FEE = new Percent(JSBI__default["default"].BigInt(dexFee || 30), JSBI__default["default"].BigInt(10000));
  var ONE_HUNDRED_PERCENT = new Percent(JSBI__default["default"].BigInt(10000), JSBI__default["default"].BigInt(10000));
  var INPUT_FRACTION_AFTER_FEE = ONE_HUNDRED_PERCENT.subtract(BASE_FEE); // for each hop in our trade, take away the x*y=k price impact from 0.3% fees
  // e.g. for 3 tokens/2 hops: 1 - ((1 - .03) * (1-.03))

  var realizedLPFee = !trade ? undefined : ONE_HUNDRED_PERCENT.subtract(trade.route.pairs.reduce(function (currentFee) {
    return currentFee.multiply(INPUT_FRACTION_AFTER_FEE);
  }, ONE_HUNDRED_PERCENT)); // remove lp fees from price impact

  var priceImpactWithoutFeeFraction = trade && realizedLPFee ? trade.priceImpact.subtract(realizedLPFee) : undefined; // the x*y=k impact

  var priceImpactWithoutFeePercent = priceImpactWithoutFeeFraction ? new Percent(priceImpactWithoutFeeFraction == null ? void 0 : priceImpactWithoutFeeFraction.numerator, priceImpactWithoutFeeFraction == null ? void 0 : priceImpactWithoutFeeFraction.denominator) : undefined; // the amount of the input that accrues to LPs

  var realizedLPFeeAmount = realizedLPFee && trade && new TokenAmount(trade.inputAmount.token, realizedLPFee.multiply(trade.inputAmount.raw).quotient);
  return {
    priceImpactWithoutFee: priceImpactWithoutFeePercent,
    realizedLPFee: realizedLPFeeAmount
  };
} // converts a basis points value to a sdk percent

function basisPointsToPercent(num) {
  return new Percent(JSBI__default["default"].BigInt(Math.floor(num)), JSBI__default["default"].BigInt(10000));
} // computes the minimum amount out and maximum amount in for a trade given a user specified allowed slippage in bips

function computeSlippageAdjustedAmounts(trade, allowedSlippage) {
  var _ref3;

  var pct = basisPointsToPercent(allowedSlippage);
  return _ref3 = {}, _ref3[exports.Field.INPUT] = trade == null ? void 0 : trade.maximumAmountIn(pct), _ref3[exports.Field.OUTPUT] = trade == null ? void 0 : trade.minimumAmountOut(pct), _ref3;
}
function calculatePriceImpact(tokenAmountIn, tokenAmountOut) {
  var typedValueParsed = units.parseUnits(tokenAmountOut.toExact(tokenAmountIn.token.decimals), tokenAmountIn.token.decimals).toString();

  if (typedValueParsed === '0') {
    throw new Error('Cannot parse amountOut with decimals');
  }

  var amountIn = tokenAmountIn.raw;
  var amountOut = JSBI__default["default"].BigInt(typedValueParsed);
  var diff = JSBI__default["default"].subtract(amountIn, amountOut);
  var value = JSBI__default["default"].divide(JSBI__default["default"].multiply(diff, BIPS_BASE), amountIn);
  return new Percent(value, BIPS_BASE);
}
var GetLogTimeoutExceededError = /*#__PURE__*/function (_Error) {
  _inheritsLoose(GetLogTimeoutExceededError, _Error);

  function GetLogTimeoutExceededError(filter) {
    var _this;

    _this = _Error.call(this, "Timed out waiting for logs matching filter: " + JSON.stringify(filter)) || this;
    _this.filter = void 0;
    _this.filter = filter;
    return _this;
  }

  return GetLogTimeoutExceededError;
}( /*#__PURE__*/_wrapNativeSuper(Error));
var DEFAULT_EXCEED_DELAY = 1000 * 60 * 20; // 20 minutes

function getLogWithTimeout(_x) {
  return _getLogWithTimeout.apply(this, arguments);
}

function _getLogWithTimeout() {
  _getLogWithTimeout = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref4) {
    var symbiosis, chainId, filter, _ref4$exceedDelay, exceedTimeout, provider, activeFilter, fromBlock;

    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            symbiosis = _ref4.symbiosis, chainId = _ref4.chainId, filter = _ref4.filter, _ref4$exceedDelay = _ref4.exceedDelay, exceedTimeout = _ref4$exceedDelay === void 0 ? DEFAULT_EXCEED_DELAY : _ref4$exceedDelay;
            provider = symbiosis.getProvider(chainId);
            activeFilter = filter;

            if (activeFilter.fromBlock) {
              _context.next = 8;
              break;
            }

            _context.next = 6;
            return symbiosis.getFromBlockWithOffset(chainId);

          case 6:
            fromBlock = _context.sent;
            activeFilter = _extends({}, filter, {
              fromBlock: fromBlock
            });

          case 8:
            return _context.abrupt("return", new Promise(function (resolve, reject) {
              var period = 1000 * 60;
              var pastTime = 0;
              var interval = setInterval(function () {
                pastTime += period;

                if (pastTime > exceedTimeout) {
                  clearInterval(interval);
                  provider.off(activeFilter, listener);
                  reject(new GetLogTimeoutExceededError(activeFilter));
                  return;
                }

                provider.getLogs(activeFilter).then(function (logs) {
                  if (logs.length > 0) {
                    resolve(logs[0]);
                    clearInterval(interval);
                    provider.off(activeFilter, listener);
                  }
                })["catch"](function (error) {
                  reject(error);
                });
              }, period);

              var listener = function listener(log) {
                clearInterval(interval);
                resolve(log);
              };

              provider.once(activeFilter, listener);
            }));

          case 9:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getLogWithTimeout.apply(this, arguments);
}

exports.PendingRequestState = void 0;

(function (PendingRequestState) {
  PendingRequestState[PendingRequestState["Default"] = 0] = "Default";
  PendingRequestState[PendingRequestState["Sent"] = 1] = "Sent";
  PendingRequestState[PendingRequestState["Reverted"] = 2] = "Reverted";
})(exports.PendingRequestState || (exports.PendingRequestState = {}));

var WINDOWS_COUNT = 3;
function getChainPendingRequests(_x) {
  return _getChainPendingRequests.apply(this, arguments);
}

function _getChainPendingRequests() {
  _getChainPendingRequests = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref) {
    var symbiosis, activeChainId, chainsIds, address, type, provider, otherChains, blockOffset, windows, toBlock, fromBlock, selectedContract, topics, eventFragment, _eventFragment, eventsByWindow, events, pendingRequests;

    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            symbiosis = _ref.symbiosis, activeChainId = _ref.activeChainId, chainsIds = _ref.chainsIds, address = _ref.address, type = _ref.type;
            provider = symbiosis.getProvider(activeChainId);
            _context2.next = 4;
            return provider.ready;

          case 4:
            otherChains = chainsIds.filter(function (chainId) {
              return chainId !== activeChainId;
            });
            blockOffset = symbiosis.filterBlockOffset(activeChainId);
            windows = [];
            _context2.next = 9;
            return provider.getBlockNumber();

          case 9:
            toBlock = _context2.sent;

            while (toBlock !== 0 && windows.length < WINDOWS_COUNT) {
              fromBlock = Math.max(toBlock - blockOffset, 0);
              windows.push({
                fromBlock: fromBlock,
                toBlock: toBlock
              });
              toBlock = Math.max(fromBlock - 1, 0);
            }

            if (type === 'synthesize') {
              selectedContract = symbiosis.portal(activeChainId);
              eventFragment = selectedContract["interface"].getEvent('SynthesizeRequest');
              topics = selectedContract["interface"].encodeFilterTopics(eventFragment, [undefined, undefined, otherChains, address // revertableAddress
              ]);
            } else {
              selectedContract = symbiosis.synthesis(activeChainId);
              _eventFragment = selectedContract["interface"].getEvent('BurnRequest');
              topics = selectedContract["interface"].encodeFilterTopics(_eventFragment, [undefined, undefined, otherChains, address // revertableAddress
              ]);
            }

            _context2.next = 14;
            return Promise.all(windows.map(function (_ref2) {
              var fromBlock = _ref2.fromBlock,
                  toBlock = _ref2.toBlock;
              return selectedContract.queryFilter({
                address: address,
                topics: topics
              }, fromBlock, toBlock);
            }));

          case 14:
            eventsByWindow = _context2.sent;
            events = eventsByWindow.flat();
            _context2.next = 18;
            return Promise.all(events.map( /*#__PURE__*/function () {
              var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {
                var _event$args, id, amountFrom, tokenIdFrom, from, to, chainID, revertableAddress, chainId, fromToken, fromTokenAmount, contractAddress, getState, synthesis, portal, externalId, _yield$selectedContra, otherState, state;

                return _regeneratorRuntime.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        _context.prev = 0;
                        _event$args = event.args, id = _event$args.id, amountFrom = _event$args.amount, tokenIdFrom = _event$args.token, from = _event$args.from, to = _event$args.to, chainID = _event$args.chainID, revertableAddress = _event$args.revertableAddress;
                        chainId = chainID.toNumber();
                        fromToken = symbiosis.findStable(tokenIdFrom, activeChainId);

                        if (fromToken) {
                          _context.next = 6;
                          break;
                        }

                        return _context.abrupt("return", null);

                      case 6:
                        fromTokenAmount = new TokenAmount(fromToken, amountFrom.toHexString());

                        if (type === 'synthesize') {
                          synthesis = symbiosis.synthesis(chainId);
                          contractAddress = synthesis.address;
                          getState = synthesis.synthesizeStates;
                        } else {
                          portal = symbiosis.portal(chainId);
                          contractAddress = portal.address;
                          getState = portal.unsynthesizeStates;
                        }

                        externalId = getExternalId({
                          internalId: id,
                          contractAddress: contractAddress,
                          revertableAddress: revertableAddress,
                          chainId: chainId
                        });
                        _context.next = 11;
                        return selectedContract.requests(externalId);

                      case 11:
                        _yield$selectedContra = _context.sent;
                        otherState = _yield$selectedContra.state;

                        if (!(otherState !== exports.PendingRequestState.Sent)) {
                          _context.next = 15;
                          break;
                        }

                        return _context.abrupt("return", null);

                      case 15:
                        _context.next = 17;
                        return getState(externalId);

                      case 17:
                        state = _context.sent;

                        if (!(state === exports.PendingRequestState.Sent)) {
                          _context.next = 20;
                          break;
                        }

                        return _context.abrupt("return", null);

                      case 20:
                        return _context.abrupt("return", {
                          internalId: id,
                          externalId: externalId,
                          from: from,
                          to: to,
                          revertableAddress: revertableAddress,
                          fromTokenAmount: fromTokenAmount,
                          state: state,
                          transactionHash: event.transactionHash,
                          type: type,
                          chainIdTo: chainId,
                          chainIdFrom: activeChainId,
                          status: 'new',
                          transactionHashReverted: undefined
                        });

                      case 23:
                        _context.prev = 23;
                        _context.t0 = _context["catch"](0);
                        return _context.abrupt("return", null);

                      case 26:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee, null, [[0, 23]]);
              }));

              return function (_x4) {
                return _ref3.apply(this, arguments);
              };
            }()));

          case 18:
            pendingRequests = _context2.sent;
            return _context2.abrupt("return", pendingRequests.filter(function (pendingRequest) {
              return pendingRequest !== null;
            }));

          case 20:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _getChainPendingRequests.apply(this, arguments);
}

function getPendingRequests(_x2, _x3) {
  return _getPendingRequests.apply(this, arguments);
}

function _getPendingRequests() {
  _getPendingRequests = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(symbiosis, address) {
    var chains, chainsIds, pendingRequestsPromises, pendingRequests;
    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            chains = symbiosis.chains();
            chainsIds = chains.map(function (chain) {
              return chain.id;
            });
            pendingRequestsPromises = [];
            chains.forEach(function (chain) {
              var params = {
                symbiosis: symbiosis,
                chainsIds: chainsIds,
                activeChainId: chain.id,
                address: address
              };
              pendingRequestsPromises.push(getChainPendingRequests(_extends({}, params, {
                type: 'synthesize'
              }))["catch"](function () {
                return [];
              }), getChainPendingRequests(_extends({}, params, {
                type: 'burn'
              }))["catch"](function () {
                return [];
              }));
            });
            _context3.next = 6;
            return Promise.all(pendingRequestsPromises);

          case 6:
            pendingRequests = _context3.sent;
            return _context3.abrupt("return", pendingRequests.flat());

          case 8:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _getPendingRequests.apply(this, arguments);
}

var TransactionStuckError = /*#__PURE__*/function (_Error) {
  _inheritsLoose(TransactionStuckError, _Error);

  function TransactionStuckError(pendingRequest) {
    var _this;

    _this = _Error.call(this, "Transaction stuck: " + JSON.stringify(pendingRequest)) || this;
    _this.pendingRequest = void 0;
    _this.pendingRequest = pendingRequest;
    return _this;
  }

  return TransactionStuckError;
}( /*#__PURE__*/_wrapNativeSuper(Error)); // TODO: Rework to pure functions and move to utils

var WaitForComplete = /*#__PURE__*/function () {
  function WaitForComplete(_ref) {
    var direction = _ref.direction,
        symbiosis = _ref.symbiosis,
        tokenOut = _ref.tokenOut,
        revertableAddress = _ref.revertableAddress,
        chainIdIn = _ref.chainIdIn;
    this.direction = void 0;
    this.symbiosis = void 0;
    this.tokenOut = void 0;
    this.revertableAddress = void 0;
    this.chainIdIn = void 0;
    this.direction = direction;
    this.symbiosis = symbiosis;
    this.tokenOut = tokenOut;
    this.revertableAddress = revertableAddress;
    this.chainIdIn = chainIdIn;
  }

  var _proto = WaitForComplete.prototype;

  _proto.waitForComplete = /*#__PURE__*/function () {
    var _waitForComplete = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(receipt) {
      var _this2 = this;

      var filter;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              filter = this.buildOtherSideFilter(receipt);
              return _context.abrupt("return", getLogWithTimeout({
                symbiosis: this.symbiosis,
                chainId: this.tokenOut.chainId,
                filter: filter
              })["catch"](function (e) {
                if (!(e instanceof GetLogTimeoutExceededError)) {
                  throw e;
                }

                var pendingRequest = _this2.getPendingRequest(receipt);

                if (!pendingRequest) {
                  throw e;
                }

                throw new TransactionStuckError(pendingRequest);
              }));

            case 2:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function waitForComplete(_x) {
      return _waitForComplete.apply(this, arguments);
    }

    return waitForComplete;
  }();

  _proto.getRequestArgs = function getRequestArgs(receipt) {
    var contract;
    var eventName;

    if (this.direction === 'burn') {
      contract = this.symbiosis.synthesis(this.chainIdIn);
      eventName = 'BurnRequest';
    } else {
      contract = this.symbiosis.portal(this.chainIdIn);
      eventName = 'SynthesizeRequest';
    }

    var args;
    receipt.logs.forEach(function (log) {
      var event;

      try {
        event = contract["interface"].parseLog(log);
      } catch (_unused) {
        return;
      }

      if (event.name === eventName) {
        args = event.args;
      }
    });
    return args;
  };

  _proto.buildOtherSideFilter = function buildOtherSideFilter(receipt) {
    if (!this.tokenOut) {
      throw new Error('Tokens are not set');
    }

    var args = this.getRequestArgs(receipt);

    if (!args) {
      throw new Error('Log not found');
    }

    var requestId = args.id;
    var receiveSide = this.direction === 'burn' ? this.symbiosis.portal(this.tokenOut.chainId).address : this.symbiosis.synthesis(this.tokenOut.chainId).address;
    var externalId = getExternalId({
      internalId: requestId,
      contractAddress: receiveSide,
      revertableAddress: this.revertableAddress,
      chainId: this.tokenOut.chainId
    });
    var event = this.direction === 'burn' ? this.symbiosis.portal(this.tokenOut.chainId).filters.BurnCompleted() : this.symbiosis.synthesis(this.tokenOut.chainId).filters.SynthesizeCompleted();

    if (!event || !event.topics || event.topics.length === 0) {
      throw new Error('Event not found');
    }

    var topic0 = event.topics[0];
    return {
      address: receiveSide,
      topics: [topic0, externalId]
    };
  };

  _proto.getPendingRequest = function getPendingRequest(receipt) {
    var args = this.getRequestArgs(receipt);

    if (!args) {
      return;
    }

    var id = args.id,
        amountFrom = args.amount,
        tokenIdFrom = args.token,
        from = args.from,
        to = args.to,
        chainID = args.chainID,
        revertableAddress = args.revertableAddress;
    var chainId = chainID.toNumber();
    var fromToken = this.symbiosis.findStable(tokenIdFrom, this.chainIdIn);

    if (!fromToken) {
      return;
    }

    var fromTokenAmount = new TokenAmount(fromToken, amountFrom.toHexString());
    var contractAddress;
    var type;

    if (this.direction === 'burn') {
      contractAddress = this.symbiosis.synthesis(this.chainIdIn).address;
      type = 'burn';
    } else {
      contractAddress = this.symbiosis.portal(this.chainIdIn).address;
      type = 'synthesize';
    }

    var externalId = getExternalId({
      internalId: id,
      contractAddress: contractAddress,
      revertableAddress: revertableAddress,
      chainId: chainId
    });
    return {
      chainIdFrom: this.chainIdIn,
      chainIdTo: chainId,
      externalId: externalId,
      from: from,
      fromTokenAmount: fromTokenAmount,
      internalId: id,
      revertableAddress: revertableAddress,
      state: exports.PendingRequestState.Default,
      to: to,
      transactionHash: receipt.transactionHash,
      type: type
    };
  };

  return WaitForComplete;
}();

var Bridging = /*#__PURE__*/function () {
  function Bridging(symbiosis) {
    this.tokenAmountIn = void 0;
    this.tokenOut = void 0;
    this.tokenAmountOut = void 0;
    this.direction = void 0;
    this.to = void 0;
    this.revertableAddress = void 0;
    this.fee = void 0;
    this.symbiosis = void 0;
    this.symbiosis = symbiosis;
  }

  var _proto = Bridging.prototype;

  _proto.exactIn = /*#__PURE__*/function () {
    var _exactIn = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(tokenAmountIn, tokenOut, to, revertableAddress) {
      var _this$tokenAmountIn,
          _this = this;

      var fee, tokenAmountOut, transactionRequest;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (((_this$tokenAmountIn = this.tokenAmountIn) == null ? void 0 : _this$tokenAmountIn.token) !== tokenAmountIn.token || this.tokenOut !== tokenOut) {
                this.fee = undefined;
              }

              this.symbiosis.validateSwapAmounts(tokenAmountIn);
              this.tokenAmountIn = tokenAmountIn;
              this.tokenOut = tokenOut;
              this.to = to;
              this.revertableAddress = revertableAddress;
              this.direction = tokenAmountIn.token.isSynthetic ? 'burn' : 'mint';
              _context.t0 = this.fee;

              if (_context.t0) {
                _context.next = 12;
                break;
              }

              _context.next = 11;
              return this.getFee();

            case 11:
              _context.t0 = _context.sent;

            case 12:
              fee = _context.t0;
              this.fee = fee;
              tokenAmountOut = new TokenAmount(this.tokenOut, this.tokenAmountIn.raw);

              if (!tokenAmountOut.lessThan(this.fee)) {
                _context.next = 17;
                break;
              }

              throw new Error('Amount out less than fee');

            case 17:
              this.tokenAmountOut = tokenAmountOut.subtract(this.fee);
              transactionRequest = this.getTransactionRequest(fee);
              return _context.abrupt("return", {
                execute: function execute(signer) {
                  return _this.execute(transactionRequest, signer);
                },
                fee: fee,
                tokenAmountOut: this.tokenAmountOut,
                transactionRequest: transactionRequest
              });

            case 20:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function exactIn(_x, _x2, _x3, _x4) {
      return _exactIn.apply(this, arguments);
    }

    return exactIn;
  }();

  _proto.getFee = /*#__PURE__*/function () {
    var _getFee = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (!(this.direction === 'mint')) {
                _context2.next = 4;
                break;
              }

              _context2.next = 3;
              return this.getMintFee();

            case 3:
              return _context2.abrupt("return", _context2.sent);

            case 4:
              _context2.next = 6;
              return this.getBurnFee();

            case 6:
              return _context2.abrupt("return", _context2.sent);

            case 7:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function getFee() {
      return _getFee.apply(this, arguments);
    }

    return getFee;
  }();

  _proto.execute = /*#__PURE__*/function () {
    var _execute = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(transactionRequest, signer) {
      var _this2 = this;

      var transactionRequestWithGasLimit, gasLimit, response;
      return _regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              transactionRequestWithGasLimit = _extends({}, transactionRequest);
              _context3.next = 3;
              return signer.estimateGas(transactionRequestWithGasLimit);

            case 3:
              gasLimit = _context3.sent;
              transactionRequestWithGasLimit.gasLimit = calculateGasMargin(gasLimit);
              _context3.next = 7;
              return signer.sendTransaction(transactionRequestWithGasLimit);

            case 7:
              response = _context3.sent;
              return _context3.abrupt("return", {
                response: response,
                waitForMined: function waitForMined(confirmations) {
                  if (confirmations === void 0) {
                    confirmations = 1;
                  }

                  return _this2.waitForMined(confirmations, response);
                }
              });

            case 9:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    function execute(_x5, _x6) {
      return _execute.apply(this, arguments);
    }

    return execute;
  }();

  _proto.waitForMined = /*#__PURE__*/function () {
    var _waitForMined = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(confirmations, response) {
      var _this3 = this;

      var receipt;
      return _regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return response.wait(confirmations);

            case 2:
              receipt = _context4.sent;
              return _context4.abrupt("return", {
                receipt: receipt,
                waitForComplete: function waitForComplete() {
                  return _this3.waitForComplete(receipt);
                }
              });

            case 4:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));

    function waitForMined(_x7, _x8) {
      return _waitForMined.apply(this, arguments);
    }

    return waitForMined;
  }();

  _proto.getTransactionRequest = function getTransactionRequest(fee) {
    if (!this.tokenAmountIn || !this.tokenOut) {
      throw new Error('Tokens are not set');
    }

    var chainId = this.tokenAmountIn.token.chainId; // burn

    if (this.direction === 'burn') {
      var synthesis = this.symbiosis.synthesis(chainId);
      return {
        chainId: chainId,
        to: synthesis.address,
        data: synthesis["interface"].encodeFunctionData('burnSyntheticToken', [fee.raw.toString(), this.tokenAmountIn.token.address, this.tokenAmountIn.raw.toString(), this.to, this.symbiosis.portal(this.tokenOut.chainId).address, this.symbiosis.bridge(this.tokenOut.chainId).address, this.revertableAddress, this.tokenOut.chainId, this.symbiosis.clientId])
      };
    }

    var portal = this.symbiosis.portal(chainId);

    if (this.tokenAmountIn.token.isNative) {
      return {
        chainId: chainId,
        to: portal.address,
        data: portal["interface"].encodeFunctionData('synthesizeNative', [fee.raw.toString(), this.to, this.symbiosis.synthesis(this.tokenOut.chainId).address, this.symbiosis.bridge(this.tokenOut.chainId).address, this.revertableAddress, this.tokenOut.chainId, this.symbiosis.clientId]),
        value: ethers.BigNumber.from(this.tokenAmountIn.raw.toString())
      };
    }

    return {
      chainId: chainId,
      to: portal.address,
      data: portal["interface"].encodeFunctionData('synthesize', [fee.raw.toString(), this.tokenAmountIn.token.address, this.tokenAmountIn.raw.toString(), this.to, this.symbiosis.synthesis(this.tokenOut.chainId).address, this.symbiosis.bridge(this.tokenOut.chainId).address, this.revertableAddress, this.tokenOut.chainId, this.symbiosis.clientId])
    };
  };

  _proto.getMintFee = /*#__PURE__*/function () {
    var _getMintFee = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
      var chainIdIn, chainIdOut, portal, synthesis, internalId, externalId, calldata, fee;
      return _regeneratorRuntime.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              if (!(!this.tokenAmountIn || !this.tokenOut)) {
                _context5.next = 2;
                break;
              }

              throw new Error('Tokens are not set');

            case 2:
              chainIdIn = this.tokenAmountIn.token.chainId;
              chainIdOut = this.tokenOut.chainId;
              portal = this.symbiosis.portal(chainIdIn);
              synthesis = this.symbiosis.synthesis(chainIdOut);
              internalId = getInternalId({
                contractAddress: portal.address,
                requestCount: constants.MaxUint256,
                chainId: chainIdIn
              });
              externalId = getExternalId({
                internalId: internalId,
                contractAddress: synthesis.address,
                revertableAddress: this.revertableAddress,
                chainId: chainIdOut
              });
              calldata = synthesis["interface"].encodeFunctionData('mintSyntheticToken', ['1', externalId, this.tokenAmountIn.token.address, chainIdIn, this.tokenAmountIn.raw.toString(), this.to // _chain2address
              ]);
              _context5.next = 11;
              return this.symbiosis.getBridgeFee({
                receiveSide: synthesis.address,
                calldata: calldata,
                chainIdFrom: this.tokenAmountIn.token.chainId,
                chainIdTo: this.tokenOut.chainId
              });

            case 11:
              fee = _context5.sent;
              return _context5.abrupt("return", new TokenAmount(this.tokenOut, fee.toString()));

            case 13:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this);
    }));

    function getMintFee() {
      return _getMintFee.apply(this, arguments);
    }

    return getMintFee;
  }();

  _proto.getBurnFee = /*#__PURE__*/function () {
    var _getBurnFee = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {
      var chainIdIn, chainIdOut, synthesis, portal, internalId, externalId, calldata, fee;
      return _regeneratorRuntime.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              if (!(!this.tokenAmountIn || !this.tokenOut)) {
                _context6.next = 2;
                break;
              }

              throw new Error('Tokens are not set');

            case 2:
              chainIdIn = this.tokenAmountIn.token.chainId;
              chainIdOut = this.tokenOut.chainId;
              synthesis = this.symbiosis.synthesis(chainIdIn);
              portal = this.symbiosis.portal(chainIdOut);
              internalId = getInternalId({
                contractAddress: synthesis.address,
                requestCount: constants.MaxUint256,
                chainId: chainIdIn
              });
              externalId = getExternalId({
                internalId: internalId,
                contractAddress: portal.address,
                revertableAddress: this.revertableAddress,
                chainId: chainIdOut
              });
              calldata = portal["interface"].encodeFunctionData('unsynthesize', ['1', externalId, this.tokenOut.address, this.tokenAmountIn.raw.toString(), this.to // _chain2address
              ]);
              _context6.next = 11;
              return this.symbiosis.getBridgeFee({
                receiveSide: portal.address,
                calldata: calldata,
                chainIdFrom: chainIdIn,
                chainIdTo: chainIdOut
              });

            case 11:
              fee = _context6.sent;
              return _context6.abrupt("return", new TokenAmount(this.tokenOut, fee.toString()));

            case 13:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, this);
    }));

    function getBurnFee() {
      return _getBurnFee.apply(this, arguments);
    }

    return getBurnFee;
  }();

  _proto.waitForComplete = /*#__PURE__*/function () {
    var _waitForComplete = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(receipt) {
      return _regeneratorRuntime.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              if (!(!this.tokenAmountIn || !this.tokenOut)) {
                _context7.next = 2;
                break;
              }

              throw new Error('Tokens are not set');

            case 2:
              return _context7.abrupt("return", new WaitForComplete({
                direction: this.direction,
                tokenOut: this.tokenOut,
                symbiosis: this.symbiosis,
                revertableAddress: this.revertableAddress,
                chainIdIn: this.tokenAmountIn.token.chainId
              }).waitForComplete(receipt));

            case 3:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7, this);
    }));

    function waitForComplete(_x9) {
      return _waitForComplete.apply(this, arguments);
    }

    return waitForComplete;
  }();

  return Bridging;
}();

/* Autogenerated file. Do not edit manually. */
var _abi$j = [{
  inputs: [{
    internalType: 'contract IPoolAddressesProvider',
    name: 'provider',
    type: 'address'
  }],
  stateMutability: 'nonpayable',
  type: 'constructor'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'reserve',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'backer',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'fee',
    type: 'uint256'
  }],
  name: 'BackUnbacked',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'reserve',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'address',
    name: 'user',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'onBehalfOf',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'enum DataTypes.InterestRateMode',
    name: 'interestRateMode',
    type: 'uint8'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'borrowRate',
    type: 'uint256'
  }, {
    indexed: true,
    internalType: 'uint16',
    name: 'referralCode',
    type: 'uint16'
  }],
  name: 'Borrow',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'target',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'address',
    name: 'initiator',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'asset',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'enum DataTypes.InterestRateMode',
    name: 'interestRateMode',
    type: 'uint8'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'premium',
    type: 'uint256'
  }, {
    indexed: true,
    internalType: 'uint16',
    name: 'referralCode',
    type: 'uint16'
  }],
  name: 'FlashLoan',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'asset',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'totalDebt',
    type: 'uint256'
  }],
  name: 'IsolationModeTotalDebtUpdated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'collateralAsset',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'debtAsset',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'user',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'debtToCover',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'liquidatedCollateralAmount',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'address',
    name: 'liquidator',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'bool',
    name: 'receiveAToken',
    type: 'bool'
  }],
  name: 'LiquidationCall',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'reserve',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'address',
    name: 'user',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'onBehalfOf',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }, {
    indexed: true,
    internalType: 'uint16',
    name: 'referralCode',
    type: 'uint16'
  }],
  name: 'MintUnbacked',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'reserve',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'amountMinted',
    type: 'uint256'
  }],
  name: 'MintedToTreasury',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'reserve',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'user',
    type: 'address'
  }],
  name: 'RebalanceStableBorrowRate',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'reserve',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'user',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'repayer',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'bool',
    name: 'useATokens',
    type: 'bool'
  }],
  name: 'Repay',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'reserve',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'liquidityRate',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'stableBorrowRate',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'variableBorrowRate',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'liquidityIndex',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'variableBorrowIndex',
    type: 'uint256'
  }],
  name: 'ReserveDataUpdated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'reserve',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'user',
    type: 'address'
  }],
  name: 'ReserveUsedAsCollateralDisabled',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'reserve',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'user',
    type: 'address'
  }],
  name: 'ReserveUsedAsCollateralEnabled',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'reserve',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'address',
    name: 'user',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'onBehalfOf',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }, {
    indexed: true,
    internalType: 'uint16',
    name: 'referralCode',
    type: 'uint16'
  }],
  name: 'Supply',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'reserve',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'user',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'enum DataTypes.InterestRateMode',
    name: 'interestRateMode',
    type: 'uint8'
  }],
  name: 'SwapBorrowRateMode',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'user',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint8',
    name: 'categoryId',
    type: 'uint8'
  }],
  name: 'UserEModeSet',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'reserve',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'user',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }],
  name: 'Withdraw',
  type: 'event'
}, {
  inputs: [],
  name: 'ADDRESSES_PROVIDER',
  outputs: [{
    internalType: 'contract IPoolAddressesProvider',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'BRIDGE_PROTOCOL_FEE',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'FLASHLOAN_PREMIUM_TOTAL',
  outputs: [{
    internalType: 'uint128',
    name: '',
    type: 'uint128'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'FLASHLOAN_PREMIUM_TO_PROTOCOL',
  outputs: [{
    internalType: 'uint128',
    name: '',
    type: 'uint128'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'MAX_NUMBER_RESERVES',
  outputs: [{
    internalType: 'uint16',
    name: '',
    type: 'uint16'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'MAX_STABLE_RATE_BORROW_SIZE_PERCENT',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'POOL_REVISION',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'asset',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'fee',
    type: 'uint256'
  }],
  name: 'backUnbacked',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'asset',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'interestRateMode',
    type: 'uint256'
  }, {
    internalType: 'uint16',
    name: 'referralCode',
    type: 'uint16'
  }, {
    internalType: 'address',
    name: 'onBehalfOf',
    type: 'address'
  }],
  name: 'borrow',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint8',
    name: 'id',
    type: 'uint8'
  }, {
    components: [{
      internalType: 'uint16',
      name: 'ltv',
      type: 'uint16'
    }, {
      internalType: 'uint16',
      name: 'liquidationThreshold',
      type: 'uint16'
    }, {
      internalType: 'uint16',
      name: 'liquidationBonus',
      type: 'uint16'
    }, {
      internalType: 'address',
      name: 'priceSource',
      type: 'address'
    }, {
      internalType: 'string',
      name: 'label',
      type: 'string'
    }],
    internalType: 'struct DataTypes.EModeCategory',
    name: 'category',
    type: 'tuple'
  }],
  name: 'configureEModeCategory',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'asset',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }, {
    internalType: 'address',
    name: 'onBehalfOf',
    type: 'address'
  }, {
    internalType: 'uint16',
    name: 'referralCode',
    type: 'uint16'
  }],
  name: 'deposit',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'asset',
    type: 'address'
  }],
  name: 'dropReserve',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'asset',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'from',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'balanceFromBefore',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'balanceToBefore',
    type: 'uint256'
  }],
  name: 'finalizeTransfer',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'receiverAddress',
    type: 'address'
  }, {
    internalType: 'address[]',
    name: 'assets',
    type: 'address[]'
  }, {
    internalType: 'uint256[]',
    name: 'amounts',
    type: 'uint256[]'
  }, {
    internalType: 'uint256[]',
    name: 'interestRateModes',
    type: 'uint256[]'
  }, {
    internalType: 'address',
    name: 'onBehalfOf',
    type: 'address'
  }, {
    internalType: 'bytes',
    name: 'params',
    type: 'bytes'
  }, {
    internalType: 'uint16',
    name: 'referralCode',
    type: 'uint16'
  }],
  name: 'flashLoan',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'receiverAddress',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'asset',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }, {
    internalType: 'bytes',
    name: 'params',
    type: 'bytes'
  }, {
    internalType: 'uint16',
    name: 'referralCode',
    type: 'uint16'
  }],
  name: 'flashLoanSimple',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'asset',
    type: 'address'
  }],
  name: 'getConfiguration',
  outputs: [{
    components: [{
      internalType: 'uint256',
      name: 'data',
      type: 'uint256'
    }],
    internalType: 'struct DataTypes.ReserveConfigurationMap',
    name: '',
    type: 'tuple'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint8',
    name: 'id',
    type: 'uint8'
  }],
  name: 'getEModeCategoryData',
  outputs: [{
    components: [{
      internalType: 'uint16',
      name: 'ltv',
      type: 'uint16'
    }, {
      internalType: 'uint16',
      name: 'liquidationThreshold',
      type: 'uint16'
    }, {
      internalType: 'uint16',
      name: 'liquidationBonus',
      type: 'uint16'
    }, {
      internalType: 'address',
      name: 'priceSource',
      type: 'address'
    }, {
      internalType: 'string',
      name: 'label',
      type: 'string'
    }],
    internalType: 'struct DataTypes.EModeCategory',
    name: '',
    type: 'tuple'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint16',
    name: 'id',
    type: 'uint16'
  }],
  name: 'getReserveAddressById',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'asset',
    type: 'address'
  }],
  name: 'getReserveData',
  outputs: [{
    components: [{
      components: [{
        internalType: 'uint256',
        name: 'data',
        type: 'uint256'
      }],
      internalType: 'struct DataTypes.ReserveConfigurationMap',
      name: 'configuration',
      type: 'tuple'
    }, {
      internalType: 'uint128',
      name: 'liquidityIndex',
      type: 'uint128'
    }, {
      internalType: 'uint128',
      name: 'currentLiquidityRate',
      type: 'uint128'
    }, {
      internalType: 'uint128',
      name: 'variableBorrowIndex',
      type: 'uint128'
    }, {
      internalType: 'uint128',
      name: 'currentVariableBorrowRate',
      type: 'uint128'
    }, {
      internalType: 'uint128',
      name: 'currentStableBorrowRate',
      type: 'uint128'
    }, {
      internalType: 'uint40',
      name: 'lastUpdateTimestamp',
      type: 'uint40'
    }, {
      internalType: 'uint16',
      name: 'id',
      type: 'uint16'
    }, {
      internalType: 'address',
      name: 'aTokenAddress',
      type: 'address'
    }, {
      internalType: 'address',
      name: 'stableDebtTokenAddress',
      type: 'address'
    }, {
      internalType: 'address',
      name: 'variableDebtTokenAddress',
      type: 'address'
    }, {
      internalType: 'address',
      name: 'interestRateStrategyAddress',
      type: 'address'
    }, {
      internalType: 'uint128',
      name: 'accruedToTreasury',
      type: 'uint128'
    }, {
      internalType: 'uint128',
      name: 'unbacked',
      type: 'uint128'
    }, {
      internalType: 'uint128',
      name: 'isolationModeTotalDebt',
      type: 'uint128'
    }],
    internalType: 'struct DataTypes.ReserveData',
    name: '',
    type: 'tuple'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'asset',
    type: 'address'
  }],
  name: 'getReserveNormalizedIncome',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'asset',
    type: 'address'
  }],
  name: 'getReserveNormalizedVariableDebt',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'getReservesList',
  outputs: [{
    internalType: 'address[]',
    name: '',
    type: 'address[]'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'user',
    type: 'address'
  }],
  name: 'getUserAccountData',
  outputs: [{
    internalType: 'uint256',
    name: 'totalCollateralBase',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'totalDebtBase',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'availableBorrowsBase',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'currentLiquidationThreshold',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'ltv',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'healthFactor',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'user',
    type: 'address'
  }],
  name: 'getUserConfiguration',
  outputs: [{
    components: [{
      internalType: 'uint256',
      name: 'data',
      type: 'uint256'
    }],
    internalType: 'struct DataTypes.UserConfigurationMap',
    name: '',
    type: 'tuple'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'user',
    type: 'address'
  }],
  name: 'getUserEMode',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'asset',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'aTokenAddress',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'stableDebtAddress',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'variableDebtAddress',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'interestRateStrategyAddress',
    type: 'address'
  }],
  name: 'initReserve',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract IPoolAddressesProvider',
    name: 'provider',
    type: 'address'
  }],
  name: 'initialize',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'collateralAsset',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'debtAsset',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'user',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'debtToCover',
    type: 'uint256'
  }, {
    internalType: 'bool',
    name: 'receiveAToken',
    type: 'bool'
  }],
  name: 'liquidationCall',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address[]',
    name: 'assets',
    type: 'address[]'
  }],
  name: 'mintToTreasury',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'asset',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }, {
    internalType: 'address',
    name: 'onBehalfOf',
    type: 'address'
  }, {
    internalType: 'uint16',
    name: 'referralCode',
    type: 'uint16'
  }],
  name: 'mintUnbacked',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'asset',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'user',
    type: 'address'
  }],
  name: 'rebalanceStableBorrowRate',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'asset',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'interestRateMode',
    type: 'uint256'
  }, {
    internalType: 'address',
    name: 'onBehalfOf',
    type: 'address'
  }],
  name: 'repay',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'asset',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'interestRateMode',
    type: 'uint256'
  }],
  name: 'repayWithATokens',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'asset',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'interestRateMode',
    type: 'uint256'
  }, {
    internalType: 'address',
    name: 'onBehalfOf',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'deadline',
    type: 'uint256'
  }, {
    internalType: 'uint8',
    name: 'permitV',
    type: 'uint8'
  }, {
    internalType: 'bytes32',
    name: 'permitR',
    type: 'bytes32'
  }, {
    internalType: 'bytes32',
    name: 'permitS',
    type: 'bytes32'
  }],
  name: 'repayWithPermit',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'token',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }],
  name: 'rescueTokens',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'asset',
    type: 'address'
  }],
  name: 'resetIsolationModeTotalDebt',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'asset',
    type: 'address'
  }, {
    components: [{
      internalType: 'uint256',
      name: 'data',
      type: 'uint256'
    }],
    internalType: 'struct DataTypes.ReserveConfigurationMap',
    name: 'configuration',
    type: 'tuple'
  }],
  name: 'setConfiguration',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'asset',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'rateStrategyAddress',
    type: 'address'
  }],
  name: 'setReserveInterestRateStrategyAddress',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint8',
    name: 'categoryId',
    type: 'uint8'
  }],
  name: 'setUserEMode',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'asset',
    type: 'address'
  }, {
    internalType: 'bool',
    name: 'useAsCollateral',
    type: 'bool'
  }],
  name: 'setUserUseReserveAsCollateral',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'asset',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }, {
    internalType: 'address',
    name: 'onBehalfOf',
    type: 'address'
  }, {
    internalType: 'uint16',
    name: 'referralCode',
    type: 'uint16'
  }],
  name: 'supply',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'asset',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }, {
    internalType: 'address',
    name: 'onBehalfOf',
    type: 'address'
  }, {
    internalType: 'uint16',
    name: 'referralCode',
    type: 'uint16'
  }, {
    internalType: 'uint256',
    name: 'deadline',
    type: 'uint256'
  }, {
    internalType: 'uint8',
    name: 'permitV',
    type: 'uint8'
  }, {
    internalType: 'bytes32',
    name: 'permitR',
    type: 'bytes32'
  }, {
    internalType: 'bytes32',
    name: 'permitS',
    type: 'bytes32'
  }],
  name: 'supplyWithPermit',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'asset',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'interestRateMode',
    type: 'uint256'
  }],
  name: 'swapBorrowRateMode',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'protocolFee',
    type: 'uint256'
  }],
  name: 'updateBridgeProtocolFee',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint128',
    name: 'flashLoanPremiumTotal',
    type: 'uint128'
  }, {
    internalType: 'uint128',
    name: 'flashLoanPremiumToProtocol',
    type: 'uint128'
  }],
  name: 'updateFlashloanPremiums',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'asset',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }, {
    internalType: 'address',
    name: 'to',
    type: 'address'
  }],
  name: 'withdraw',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}];
var Aave__factory = /*#__PURE__*/function () {
  function Aave__factory() {}

  Aave__factory.createInterface = function createInterface() {
    return new ethers.utils.Interface(_abi$j);
  };

  Aave__factory.connect = function connect(address, signerOrProvider) {
    return new ethers.Contract(address, _abi$j, signerOrProvider);
  };

  return Aave__factory;
}();
Aave__factory.abi = _abi$j;

/* Autogenerated file. Do not edit manually. */
var _abi$i = [{
  type: 'constructor',
  stateMutability: 'nonpayable',
  inputs: [{
    type: 'address',
    name: '_factory',
    internalType: 'address'
  }, {
    type: 'address',
    name: '_WADA',
    internalType: 'address'
  }]
}, {
  type: 'function',
  stateMutability: 'view',
  outputs: [{
    type: 'address',
    name: '',
    internalType: 'address'
  }],
  name: 'WADA',
  inputs: []
}, {
  type: 'function',
  stateMutability: 'nonpayable',
  outputs: [{
    type: 'uint256',
    name: 'amountA',
    internalType: 'uint256'
  }, {
    type: 'uint256',
    name: 'amountB',
    internalType: 'uint256'
  }, {
    type: 'uint256',
    name: 'liquidity',
    internalType: 'uint256'
  }],
  name: 'addLiquidity',
  inputs: [{
    type: 'address',
    name: 'tokenA',
    internalType: 'address'
  }, {
    type: 'address',
    name: 'tokenB',
    internalType: 'address'
  }, {
    type: 'uint256',
    name: 'amountADesired',
    internalType: 'uint256'
  }, {
    type: 'uint256',
    name: 'amountBDesired',
    internalType: 'uint256'
  }, {
    type: 'uint256',
    name: 'amountAMin',
    internalType: 'uint256'
  }, {
    type: 'uint256',
    name: 'amountBMin',
    internalType: 'uint256'
  }, {
    type: 'address',
    name: 'to',
    internalType: 'address'
  }, {
    type: 'uint256',
    name: 'deadline',
    internalType: 'uint256'
  }]
}, {
  type: 'function',
  stateMutability: 'payable',
  outputs: [{
    type: 'uint256',
    name: 'amountToken',
    internalType: 'uint256'
  }, {
    type: 'uint256',
    name: 'amountADA',
    internalType: 'uint256'
  }, {
    type: 'uint256',
    name: 'liquidity',
    internalType: 'uint256'
  }],
  name: 'addLiquidityADA',
  inputs: [{
    type: 'address',
    name: 'token',
    internalType: 'address'
  }, {
    type: 'uint256',
    name: 'amountTokenDesired',
    internalType: 'uint256'
  }, {
    type: 'uint256',
    name: 'amountTokenMin',
    internalType: 'uint256'
  }, {
    type: 'uint256',
    name: 'amountADAMin',
    internalType: 'uint256'
  }, {
    type: 'address',
    name: 'to',
    internalType: 'address'
  }, {
    type: 'uint256',
    name: 'deadline',
    internalType: 'uint256'
  }]
}, {
  type: 'function',
  stateMutability: 'view',
  outputs: [{
    type: 'address',
    name: '',
    internalType: 'address'
  }],
  name: 'factory',
  inputs: []
}, {
  type: 'function',
  stateMutability: 'pure',
  outputs: [{
    type: 'uint256',
    name: 'amountIn',
    internalType: 'uint256'
  }],
  name: 'getAmountIn',
  inputs: [{
    type: 'uint256',
    name: 'amountOut',
    internalType: 'uint256'
  }, {
    type: 'uint256',
    name: 'reserveIn',
    internalType: 'uint256'
  }, {
    type: 'uint256',
    name: 'reserveOut',
    internalType: 'uint256'
  }]
}, {
  type: 'function',
  stateMutability: 'pure',
  outputs: [{
    type: 'uint256',
    name: 'amountOut',
    internalType: 'uint256'
  }],
  name: 'getAmountOut',
  inputs: [{
    type: 'uint256',
    name: 'amountIn',
    internalType: 'uint256'
  }, {
    type: 'uint256',
    name: 'reserveIn',
    internalType: 'uint256'
  }, {
    type: 'uint256',
    name: 'reserveOut',
    internalType: 'uint256'
  }]
}, {
  type: 'function',
  stateMutability: 'view',
  outputs: [{
    type: 'uint256[]',
    name: 'amounts',
    internalType: 'uint256[]'
  }],
  name: 'getAmountsIn',
  inputs: [{
    type: 'uint256',
    name: 'amountOut',
    internalType: 'uint256'
  }, {
    type: 'address[]',
    name: 'path',
    internalType: 'address[]'
  }]
}, {
  type: 'function',
  stateMutability: 'view',
  outputs: [{
    type: 'uint256[]',
    name: 'amounts',
    internalType: 'uint256[]'
  }],
  name: 'getAmountsOut',
  inputs: [{
    type: 'uint256',
    name: 'amountIn',
    internalType: 'uint256'
  }, {
    type: 'address[]',
    name: 'path',
    internalType: 'address[]'
  }]
}, {
  type: 'function',
  stateMutability: 'pure',
  outputs: [{
    type: 'uint256',
    name: 'amountB',
    internalType: 'uint256'
  }],
  name: 'quote',
  inputs: [{
    type: 'uint256',
    name: 'amountA',
    internalType: 'uint256'
  }, {
    type: 'uint256',
    name: 'reserveA',
    internalType: 'uint256'
  }, {
    type: 'uint256',
    name: 'reserveB',
    internalType: 'uint256'
  }]
}, {
  type: 'function',
  stateMutability: 'nonpayable',
  outputs: [{
    type: 'uint256',
    name: 'amountA',
    internalType: 'uint256'
  }, {
    type: 'uint256',
    name: 'amountB',
    internalType: 'uint256'
  }],
  name: 'removeLiquidity',
  inputs: [{
    type: 'address',
    name: 'tokenA',
    internalType: 'address'
  }, {
    type: 'address',
    name: 'tokenB',
    internalType: 'address'
  }, {
    type: 'uint256',
    name: 'liquidity',
    internalType: 'uint256'
  }, {
    type: 'uint256',
    name: 'amountAMin',
    internalType: 'uint256'
  }, {
    type: 'uint256',
    name: 'amountBMin',
    internalType: 'uint256'
  }, {
    type: 'address',
    name: 'to',
    internalType: 'address'
  }, {
    type: 'uint256',
    name: 'deadline',
    internalType: 'uint256'
  }]
}, {
  type: 'function',
  stateMutability: 'nonpayable',
  outputs: [{
    type: 'uint256',
    name: 'amountToken',
    internalType: 'uint256'
  }, {
    type: 'uint256',
    name: 'amountADA',
    internalType: 'uint256'
  }],
  name: 'removeLiquidityADA',
  inputs: [{
    type: 'address',
    name: 'token',
    internalType: 'address'
  }, {
    type: 'uint256',
    name: 'liquidity',
    internalType: 'uint256'
  }, {
    type: 'uint256',
    name: 'amountTokenMin',
    internalType: 'uint256'
  }, {
    type: 'uint256',
    name: 'amountADAMin',
    internalType: 'uint256'
  }, {
    type: 'address',
    name: 'to',
    internalType: 'address'
  }, {
    type: 'uint256',
    name: 'deadline',
    internalType: 'uint256'
  }]
}, {
  type: 'function',
  stateMutability: 'nonpayable',
  outputs: [{
    type: 'uint256',
    name: 'amountADA',
    internalType: 'uint256'
  }],
  name: 'removeLiquidityADASupportingFeeOnTransferTokens',
  inputs: [{
    type: 'address',
    name: 'token',
    internalType: 'address'
  }, {
    type: 'uint256',
    name: 'liquidity',
    internalType: 'uint256'
  }, {
    type: 'uint256',
    name: 'amountTokenMin',
    internalType: 'uint256'
  }, {
    type: 'uint256',
    name: 'amountADAMin',
    internalType: 'uint256'
  }, {
    type: 'address',
    name: 'to',
    internalType: 'address'
  }, {
    type: 'uint256',
    name: 'deadline',
    internalType: 'uint256'
  }]
}, {
  type: 'function',
  stateMutability: 'nonpayable',
  outputs: [{
    type: 'uint256',
    name: 'amountToken',
    internalType: 'uint256'
  }, {
    type: 'uint256',
    name: 'amountADA',
    internalType: 'uint256'
  }],
  name: 'removeLiquidityADAWithPermit',
  inputs: [{
    type: 'address',
    name: 'token',
    internalType: 'address'
  }, {
    type: 'uint256',
    name: 'liquidity',
    internalType: 'uint256'
  }, {
    type: 'uint256',
    name: 'amountTokenMin',
    internalType: 'uint256'
  }, {
    type: 'uint256',
    name: 'amountADAMin',
    internalType: 'uint256'
  }, {
    type: 'address',
    name: 'to',
    internalType: 'address'
  }, {
    type: 'uint256',
    name: 'deadline',
    internalType: 'uint256'
  }, {
    type: 'bool',
    name: 'approveMax',
    internalType: 'bool'
  }, {
    type: 'uint8',
    name: 'v',
    internalType: 'uint8'
  }, {
    type: 'bytes32',
    name: 'r',
    internalType: 'bytes32'
  }, {
    type: 'bytes32',
    name: 's',
    internalType: 'bytes32'
  }]
}, {
  type: 'function',
  stateMutability: 'nonpayable',
  outputs: [{
    type: 'uint256',
    name: 'amountADA',
    internalType: 'uint256'
  }],
  name: 'removeLiquidityADAWithPermitSupportingFeeOnTransferTokens',
  inputs: [{
    type: 'address',
    name: 'token',
    internalType: 'address'
  }, {
    type: 'uint256',
    name: 'liquidity',
    internalType: 'uint256'
  }, {
    type: 'uint256',
    name: 'amountTokenMin',
    internalType: 'uint256'
  }, {
    type: 'uint256',
    name: 'amountADAMin',
    internalType: 'uint256'
  }, {
    type: 'address',
    name: 'to',
    internalType: 'address'
  }, {
    type: 'uint256',
    name: 'deadline',
    internalType: 'uint256'
  }, {
    type: 'bool',
    name: 'approveMax',
    internalType: 'bool'
  }, {
    type: 'uint8',
    name: 'v',
    internalType: 'uint8'
  }, {
    type: 'bytes32',
    name: 'r',
    internalType: 'bytes32'
  }, {
    type: 'bytes32',
    name: 's',
    internalType: 'bytes32'
  }]
}, {
  type: 'function',
  stateMutability: 'nonpayable',
  outputs: [{
    type: 'uint256',
    name: 'amountA',
    internalType: 'uint256'
  }, {
    type: 'uint256',
    name: 'amountB',
    internalType: 'uint256'
  }],
  name: 'removeLiquidityWithPermit',
  inputs: [{
    type: 'address',
    name: 'tokenA',
    internalType: 'address'
  }, {
    type: 'address',
    name: 'tokenB',
    internalType: 'address'
  }, {
    type: 'uint256',
    name: 'liquidity',
    internalType: 'uint256'
  }, {
    type: 'uint256',
    name: 'amountAMin',
    internalType: 'uint256'
  }, {
    type: 'uint256',
    name: 'amountBMin',
    internalType: 'uint256'
  }, {
    type: 'address',
    name: 'to',
    internalType: 'address'
  }, {
    type: 'uint256',
    name: 'deadline',
    internalType: 'uint256'
  }, {
    type: 'bool',
    name: 'approveMax',
    internalType: 'bool'
  }, {
    type: 'uint8',
    name: 'v',
    internalType: 'uint8'
  }, {
    type: 'bytes32',
    name: 'r',
    internalType: 'bytes32'
  }, {
    type: 'bytes32',
    name: 's',
    internalType: 'bytes32'
  }]
}, {
  type: 'function',
  stateMutability: 'payable',
  outputs: [{
    type: 'uint256[]',
    name: 'amounts',
    internalType: 'uint256[]'
  }],
  name: 'swapADAForExactTokens',
  inputs: [{
    type: 'uint256',
    name: 'amountOut',
    internalType: 'uint256'
  }, {
    type: 'address[]',
    name: 'path',
    internalType: 'address[]'
  }, {
    type: 'address',
    name: 'to',
    internalType: 'address'
  }, {
    type: 'uint256',
    name: 'deadline',
    internalType: 'uint256'
  }]
}, {
  type: 'function',
  stateMutability: 'payable',
  outputs: [{
    type: 'uint256[]',
    name: 'amounts',
    internalType: 'uint256[]'
  }],
  name: 'swapExactADAForTokens',
  inputs: [{
    type: 'uint256',
    name: 'amountOutMin',
    internalType: 'uint256'
  }, {
    type: 'address[]',
    name: 'path',
    internalType: 'address[]'
  }, {
    type: 'address',
    name: 'to',
    internalType: 'address'
  }, {
    type: 'uint256',
    name: 'deadline',
    internalType: 'uint256'
  }]
}, {
  type: 'function',
  stateMutability: 'payable',
  outputs: [],
  name: 'swapExactADAForTokensSupportingFeeOnTransferTokens',
  inputs: [{
    type: 'uint256',
    name: 'amountOutMin',
    internalType: 'uint256'
  }, {
    type: 'address[]',
    name: 'path',
    internalType: 'address[]'
  }, {
    type: 'address',
    name: 'to',
    internalType: 'address'
  }, {
    type: 'uint256',
    name: 'deadline',
    internalType: 'uint256'
  }]
}, {
  type: 'function',
  stateMutability: 'nonpayable',
  outputs: [{
    type: 'uint256[]',
    name: 'amounts',
    internalType: 'uint256[]'
  }],
  name: 'swapExactTokensForADA',
  inputs: [{
    type: 'uint256',
    name: 'amountIn',
    internalType: 'uint256'
  }, {
    type: 'uint256',
    name: 'amountOutMin',
    internalType: 'uint256'
  }, {
    type: 'address[]',
    name: 'path',
    internalType: 'address[]'
  }, {
    type: 'address',
    name: 'to',
    internalType: 'address'
  }, {
    type: 'uint256',
    name: 'deadline',
    internalType: 'uint256'
  }]
}, {
  type: 'function',
  stateMutability: 'nonpayable',
  outputs: [],
  name: 'swapExactTokensForADASupportingFeeOnTransferTokens',
  inputs: [{
    type: 'uint256',
    name: 'amountIn',
    internalType: 'uint256'
  }, {
    type: 'uint256',
    name: 'amountOutMin',
    internalType: 'uint256'
  }, {
    type: 'address[]',
    name: 'path',
    internalType: 'address[]'
  }, {
    type: 'address',
    name: 'to',
    internalType: 'address'
  }, {
    type: 'uint256',
    name: 'deadline',
    internalType: 'uint256'
  }]
}, {
  type: 'function',
  stateMutability: 'nonpayable',
  outputs: [{
    type: 'uint256[]',
    name: 'amounts',
    internalType: 'uint256[]'
  }],
  name: 'swapExactTokensForTokens',
  inputs: [{
    type: 'uint256',
    name: 'amountIn',
    internalType: 'uint256'
  }, {
    type: 'uint256',
    name: 'amountOutMin',
    internalType: 'uint256'
  }, {
    type: 'address[]',
    name: 'path',
    internalType: 'address[]'
  }, {
    type: 'address',
    name: 'to',
    internalType: 'address'
  }, {
    type: 'uint256',
    name: 'deadline',
    internalType: 'uint256'
  }]
}, {
  type: 'function',
  stateMutability: 'nonpayable',
  outputs: [],
  name: 'swapExactTokensForTokensSupportingFeeOnTransferTokens',
  inputs: [{
    type: 'uint256',
    name: 'amountIn',
    internalType: 'uint256'
  }, {
    type: 'uint256',
    name: 'amountOutMin',
    internalType: 'uint256'
  }, {
    type: 'address[]',
    name: 'path',
    internalType: 'address[]'
  }, {
    type: 'address',
    name: 'to',
    internalType: 'address'
  }, {
    type: 'uint256',
    name: 'deadline',
    internalType: 'uint256'
  }]
}, {
  type: 'function',
  stateMutability: 'nonpayable',
  outputs: [{
    type: 'uint256[]',
    name: 'amounts',
    internalType: 'uint256[]'
  }],
  name: 'swapTokensForExactADA',
  inputs: [{
    type: 'uint256',
    name: 'amountOut',
    internalType: 'uint256'
  }, {
    type: 'uint256',
    name: 'amountInMax',
    internalType: 'uint256'
  }, {
    type: 'address[]',
    name: 'path',
    internalType: 'address[]'
  }, {
    type: 'address',
    name: 'to',
    internalType: 'address'
  }, {
    type: 'uint256',
    name: 'deadline',
    internalType: 'uint256'
  }]
}, {
  type: 'function',
  stateMutability: 'nonpayable',
  outputs: [{
    type: 'uint256[]',
    name: 'amounts',
    internalType: 'uint256[]'
  }],
  name: 'swapTokensForExactTokens',
  inputs: [{
    type: 'uint256',
    name: 'amountOut',
    internalType: 'uint256'
  }, {
    type: 'uint256',
    name: 'amountInMax',
    internalType: 'uint256'
  }, {
    type: 'address[]',
    name: 'path',
    internalType: 'address[]'
  }, {
    type: 'address',
    name: 'to',
    internalType: 'address'
  }, {
    type: 'uint256',
    name: 'deadline',
    internalType: 'uint256'
  }]
}, {
  type: 'receive',
  stateMutability: 'payable'
}];
var AdaRouter__factory = /*#__PURE__*/function () {
  function AdaRouter__factory() {}

  AdaRouter__factory.createInterface = function createInterface() {
    return new ethers.utils.Interface(_abi$i);
  };

  AdaRouter__factory.connect = function connect(address, signerOrProvider) {
    return new ethers.Contract(address, _abi$i, signerOrProvider);
  };

  return AdaRouter__factory;
}();
AdaRouter__factory.abi = _abi$i;

/* Autogenerated file. Do not edit manually. */
var _abi$h = [{
  inputs: [{
    internalType: 'address',
    name: '_factory',
    type: 'address'
  }, {
    internalType: 'address',
    name: '_WAVAX',
    type: 'address'
  }],
  stateMutability: 'nonpayable',
  type: 'constructor'
}, {
  inputs: [],
  name: 'WAVAX',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'tokenA',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'tokenB',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'amountADesired',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountBDesired',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountAMin',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountBMin',
    type: 'uint256'
  }, {
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'deadline',
    type: 'uint256'
  }],
  name: 'addLiquidity',
  outputs: [{
    internalType: 'uint256',
    name: 'amountA',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountB',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'liquidity',
    type: 'uint256'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'token',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'amountTokenDesired',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountTokenMin',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountAVAXMin',
    type: 'uint256'
  }, {
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'deadline',
    type: 'uint256'
  }],
  name: 'addLiquidityAVAX',
  outputs: [{
    internalType: 'uint256',
    name: 'amountToken',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountAVAX',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'liquidity',
    type: 'uint256'
  }],
  stateMutability: 'payable',
  type: 'function'
}, {
  inputs: [],
  name: 'factory',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'amountOut',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'reserveIn',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'reserveOut',
    type: 'uint256'
  }],
  name: 'getAmountIn',
  outputs: [{
    internalType: 'uint256',
    name: 'amountIn',
    type: 'uint256'
  }],
  stateMutability: 'pure',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'amountIn',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'reserveIn',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'reserveOut',
    type: 'uint256'
  }],
  name: 'getAmountOut',
  outputs: [{
    internalType: 'uint256',
    name: 'amountOut',
    type: 'uint256'
  }],
  stateMutability: 'pure',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'amountOut',
    type: 'uint256'
  }, {
    internalType: 'address[]',
    name: 'path',
    type: 'address[]'
  }],
  name: 'getAmountsIn',
  outputs: [{
    internalType: 'uint256[]',
    name: 'amounts',
    type: 'uint256[]'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'amountIn',
    type: 'uint256'
  }, {
    internalType: 'address[]',
    name: 'path',
    type: 'address[]'
  }],
  name: 'getAmountsOut',
  outputs: [{
    internalType: 'uint256[]',
    name: 'amounts',
    type: 'uint256[]'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'amountA',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'reserveA',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'reserveB',
    type: 'uint256'
  }],
  name: 'quote',
  outputs: [{
    internalType: 'uint256',
    name: 'amountB',
    type: 'uint256'
  }],
  stateMutability: 'pure',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'tokenA',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'tokenB',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'liquidity',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountAMin',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountBMin',
    type: 'uint256'
  }, {
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'deadline',
    type: 'uint256'
  }],
  name: 'removeLiquidity',
  outputs: [{
    internalType: 'uint256',
    name: 'amountA',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountB',
    type: 'uint256'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'token',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'liquidity',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountTokenMin',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountAVAXMin',
    type: 'uint256'
  }, {
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'deadline',
    type: 'uint256'
  }],
  name: 'removeLiquidityAVAX',
  outputs: [{
    internalType: 'uint256',
    name: 'amountToken',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountAVAX',
    type: 'uint256'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'token',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'liquidity',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountTokenMin',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountAVAXMin',
    type: 'uint256'
  }, {
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'deadline',
    type: 'uint256'
  }],
  name: 'removeLiquidityAVAXSupportingFeeOnTransferTokens',
  outputs: [{
    internalType: 'uint256',
    name: 'amountAVAX',
    type: 'uint256'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'token',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'liquidity',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountTokenMin',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountAVAXMin',
    type: 'uint256'
  }, {
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'deadline',
    type: 'uint256'
  }, {
    internalType: 'bool',
    name: 'approveMax',
    type: 'bool'
  }, {
    internalType: 'uint8',
    name: 'v',
    type: 'uint8'
  }, {
    internalType: 'bytes32',
    name: 'r',
    type: 'bytes32'
  }, {
    internalType: 'bytes32',
    name: 's',
    type: 'bytes32'
  }],
  name: 'removeLiquidityAVAXWithPermit',
  outputs: [{
    internalType: 'uint256',
    name: 'amountToken',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountAVAX',
    type: 'uint256'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'token',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'liquidity',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountTokenMin',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountAVAXMin',
    type: 'uint256'
  }, {
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'deadline',
    type: 'uint256'
  }, {
    internalType: 'bool',
    name: 'approveMax',
    type: 'bool'
  }, {
    internalType: 'uint8',
    name: 'v',
    type: 'uint8'
  }, {
    internalType: 'bytes32',
    name: 'r',
    type: 'bytes32'
  }, {
    internalType: 'bytes32',
    name: 's',
    type: 'bytes32'
  }],
  name: 'removeLiquidityAVAXWithPermitSupportingFeeOnTransferTokens',
  outputs: [{
    internalType: 'uint256',
    name: 'amountAVAX',
    type: 'uint256'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'tokenA',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'tokenB',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'liquidity',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountAMin',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountBMin',
    type: 'uint256'
  }, {
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'deadline',
    type: 'uint256'
  }, {
    internalType: 'bool',
    name: 'approveMax',
    type: 'bool'
  }, {
    internalType: 'uint8',
    name: 'v',
    type: 'uint8'
  }, {
    internalType: 'bytes32',
    name: 'r',
    type: 'bytes32'
  }, {
    internalType: 'bytes32',
    name: 's',
    type: 'bytes32'
  }],
  name: 'removeLiquidityWithPermit',
  outputs: [{
    internalType: 'uint256',
    name: 'amountA',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountB',
    type: 'uint256'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'amountOut',
    type: 'uint256'
  }, {
    internalType: 'address[]',
    name: 'path',
    type: 'address[]'
  }, {
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'deadline',
    type: 'uint256'
  }],
  name: 'swapAVAXForExactTokens',
  outputs: [{
    internalType: 'uint256[]',
    name: 'amounts',
    type: 'uint256[]'
  }],
  stateMutability: 'payable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'amountOutMin',
    type: 'uint256'
  }, {
    internalType: 'address[]',
    name: 'path',
    type: 'address[]'
  }, {
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'deadline',
    type: 'uint256'
  }],
  name: 'swapExactAVAXForTokens',
  outputs: [{
    internalType: 'uint256[]',
    name: 'amounts',
    type: 'uint256[]'
  }],
  stateMutability: 'payable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'amountOutMin',
    type: 'uint256'
  }, {
    internalType: 'address[]',
    name: 'path',
    type: 'address[]'
  }, {
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'deadline',
    type: 'uint256'
  }],
  name: 'swapExactAVAXForTokensSupportingFeeOnTransferTokens',
  outputs: [],
  stateMutability: 'payable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'amountIn',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountOutMin',
    type: 'uint256'
  }, {
    internalType: 'address[]',
    name: 'path',
    type: 'address[]'
  }, {
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'deadline',
    type: 'uint256'
  }],
  name: 'swapExactTokensForAVAX',
  outputs: [{
    internalType: 'uint256[]',
    name: 'amounts',
    type: 'uint256[]'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'amountIn',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountOutMin',
    type: 'uint256'
  }, {
    internalType: 'address[]',
    name: 'path',
    type: 'address[]'
  }, {
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'deadline',
    type: 'uint256'
  }],
  name: 'swapExactTokensForAVAXSupportingFeeOnTransferTokens',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'amountIn',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountOutMin',
    type: 'uint256'
  }, {
    internalType: 'address[]',
    name: 'path',
    type: 'address[]'
  }, {
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'deadline',
    type: 'uint256'
  }],
  name: 'swapExactTokensForTokens',
  outputs: [{
    internalType: 'uint256[]',
    name: 'amounts',
    type: 'uint256[]'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'amountIn',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountOutMin',
    type: 'uint256'
  }, {
    internalType: 'address[]',
    name: 'path',
    type: 'address[]'
  }, {
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'deadline',
    type: 'uint256'
  }],
  name: 'swapExactTokensForTokensSupportingFeeOnTransferTokens',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'amountOut',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountInMax',
    type: 'uint256'
  }, {
    internalType: 'address[]',
    name: 'path',
    type: 'address[]'
  }, {
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'deadline',
    type: 'uint256'
  }],
  name: 'swapTokensForExactAVAX',
  outputs: [{
    internalType: 'uint256[]',
    name: 'amounts',
    type: 'uint256[]'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'amountOut',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountInMax',
    type: 'uint256'
  }, {
    internalType: 'address[]',
    name: 'path',
    type: 'address[]'
  }, {
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'deadline',
    type: 'uint256'
  }],
  name: 'swapTokensForExactTokens',
  outputs: [{
    internalType: 'uint256[]',
    name: 'amounts',
    type: 'uint256[]'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  stateMutability: 'payable',
  type: 'receive'
}];
var AvaxRouter__factory = /*#__PURE__*/function () {
  function AvaxRouter__factory() {}

  AvaxRouter__factory.createInterface = function createInterface() {
    return new ethers.utils.Interface(_abi$h);
  };

  AvaxRouter__factory.connect = function connect(address, signerOrProvider) {
    return new ethers.Contract(address, _abi$h, signerOrProvider);
  };

  return AvaxRouter__factory;
}();
AvaxRouter__factory.abi = _abi$h;

/* Autogenerated file. Do not edit manually. */
var _abi$g = [{
  inputs: [{
    internalType: 'contract IStrategy',
    name: '_strategy',
    type: 'address'
  }, {
    internalType: 'string',
    name: '_name',
    type: 'string'
  }, {
    internalType: 'string',
    name: '_symbol',
    type: 'string'
  }, {
    internalType: 'uint256',
    name: '_approvalDelay',
    type: 'uint256'
  }],
  stateMutability: 'nonpayable',
  type: 'constructor'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'owner',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'spender',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'value',
    type: 'uint256'
  }],
  name: 'Approval',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'address',
    name: 'implementation',
    type: 'address'
  }],
  name: 'NewStratCandidate',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'previousOwner',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'newOwner',
    type: 'address'
  }],
  name: 'OwnershipTransferred',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'from',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'value',
    type: 'uint256'
  }],
  name: 'Transfer',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'address',
    name: 'implementation',
    type: 'address'
  }],
  name: 'UpgradeStrat',
  type: 'event'
}, {
  inputs: [{
    internalType: 'address',
    name: 'owner',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'spender',
    type: 'address'
  }],
  name: 'allowance',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'approvalDelay',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'spender',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }],
  name: 'approve',
  outputs: [{
    internalType: 'bool',
    name: '',
    type: 'bool'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'available',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'balance',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'account',
    type: 'address'
  }],
  name: 'balanceOf',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'decimals',
  outputs: [{
    internalType: 'uint8',
    name: '',
    type: 'uint8'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'spender',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'subtractedValue',
    type: 'uint256'
  }],
  name: 'decreaseAllowance',
  outputs: [{
    internalType: 'bool',
    name: '',
    type: 'bool'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: '_amount',
    type: 'uint256'
  }],
  name: 'deposit',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'depositAll',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'earn',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'getPricePerFullShare',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: '_token',
    type: 'address'
  }],
  name: 'inCaseTokensGetStuck',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'spender',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'addedValue',
    type: 'uint256'
  }],
  name: 'increaseAllowance',
  outputs: [{
    internalType: 'bool',
    name: '',
    type: 'bool'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'name',
  outputs: [{
    internalType: 'string',
    name: '',
    type: 'string'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'owner',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: '_implementation',
    type: 'address'
  }],
  name: 'proposeStrat',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'renounceOwnership',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'stratCandidate',
  outputs: [{
    internalType: 'address',
    name: 'implementation',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'proposedTime',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'strategy',
  outputs: [{
    internalType: 'contract IStrategy',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'symbol',
  outputs: [{
    internalType: 'string',
    name: '',
    type: 'string'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'totalSupply',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'recipient',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }],
  name: 'transfer',
  outputs: [{
    internalType: 'bool',
    name: '',
    type: 'bool'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'sender',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'recipient',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }],
  name: 'transferFrom',
  outputs: [{
    internalType: 'bool',
    name: '',
    type: 'bool'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'newOwner',
    type: 'address'
  }],
  name: 'transferOwnership',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'upgradeStrat',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'want',
  outputs: [{
    internalType: 'contract IERC20',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: '_shares',
    type: 'uint256'
  }],
  name: 'withdraw',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'withdrawAll',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}];
var BeefyVault__factory = /*#__PURE__*/function () {
  function BeefyVault__factory() {}

  BeefyVault__factory.createInterface = function createInterface() {
    return new ethers.utils.Interface(_abi$g);
  };

  BeefyVault__factory.connect = function connect(address, signerOrProvider) {
    return new ethers.Contract(address, _abi$g, signerOrProvider);
  };

  return BeefyVault__factory;
}();
BeefyVault__factory.abi = _abi$g;

/* Autogenerated file. Do not edit manually. */
var _abi$f = [{
  inputs: [{
    internalType: 'address',
    name: 'underlying_',
    type: 'address'
  }, {
    internalType: 'contract ComptrollerInterface',
    name: 'comptroller_',
    type: 'address'
  }, {
    internalType: 'contract InterestRateModel',
    name: 'interestRateModel_',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'initialExchangeRateMantissa_',
    type: 'uint256'
  }, {
    internalType: 'string',
    name: 'name_',
    type: 'string'
  }, {
    internalType: 'string',
    name: 'symbol_',
    type: 'string'
  }, {
    internalType: 'uint8',
    name: 'decimals_',
    type: 'uint8'
  }, {
    internalType: 'address payable',
    name: 'admin_',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'implementation_',
    type: 'address'
  }, {
    internalType: 'bytes',
    name: 'becomeImplementationData',
    type: 'bytes'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'constructor'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'uint256',
    name: 'cashPrior',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'interestAccumulated',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'borrowIndex',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'totalBorrows',
    type: 'uint256'
  }],
  name: 'AccrueInterest',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'owner',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'spender',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }],
  name: 'Approval',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'address',
    name: 'borrower',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'borrowAmount',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'accountBorrows',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'totalBorrows',
    type: 'uint256'
  }],
  name: 'Borrow',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'uint256',
    name: 'error',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'info',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'detail',
    type: 'uint256'
  }],
  name: 'Failure',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'address',
    name: 'liquidator',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'address',
    name: 'borrower',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'repayAmount',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'address',
    name: 'qiTokenCollateral',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'seizeTokens',
    type: 'uint256'
  }],
  name: 'LiquidateBorrow',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'address',
    name: 'minter',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'mintAmount',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'mintTokens',
    type: 'uint256'
  }],
  name: 'Mint',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'address',
    name: 'oldAdmin',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'address',
    name: 'newAdmin',
    type: 'address'
  }],
  name: 'NewAdmin',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'contract ComptrollerInterface',
    name: 'oldComptroller',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'contract ComptrollerInterface',
    name: 'newComptroller',
    type: 'address'
  }],
  name: 'NewComptroller',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'address',
    name: 'oldImplementation',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'address',
    name: 'newImplementation',
    type: 'address'
  }],
  name: 'NewImplementation',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'contract InterestRateModel',
    name: 'oldInterestRateModel',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'contract InterestRateModel',
    name: 'newInterestRateModel',
    type: 'address'
  }],
  name: 'NewMarketInterestRateModel',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'address',
    name: 'oldPendingAdmin',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'address',
    name: 'newPendingAdmin',
    type: 'address'
  }],
  name: 'NewPendingAdmin',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'uint256',
    name: 'oldProtocolSeizeShareMantissa',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'newProtocolSeizeShareMantissa',
    type: 'uint256'
  }],
  name: 'NewProtocolSeizeShare',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'uint256',
    name: 'oldReserveFactorMantissa',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'newReserveFactorMantissa',
    type: 'uint256'
  }],
  name: 'NewReserveFactor',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'address',
    name: 'redeemer',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'redeemAmount',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'redeemTokens',
    type: 'uint256'
  }],
  name: 'Redeem',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'address',
    name: 'payer',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'address',
    name: 'borrower',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'repayAmount',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'accountBorrows',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'totalBorrows',
    type: 'uint256'
  }],
  name: 'RepayBorrow',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'address',
    name: 'benefactor',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'addAmount',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'newTotalReserves',
    type: 'uint256'
  }],
  name: 'ReservesAdded',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'address',
    name: 'admin',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'reduceAmount',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'newTotalReserves',
    type: 'uint256'
  }],
  name: 'ReservesReduced',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'from',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }],
  name: 'Transfer',
  type: 'event'
}, {
  payable: true,
  stateMutability: 'payable',
  type: 'fallback'
}, {
  constant: false,
  inputs: [],
  name: '_acceptAdmin',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'uint256',
    name: 'addAmount',
    type: 'uint256'
  }],
  name: '_addReserves',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'uint256',
    name: 'reduceAmount',
    type: 'uint256'
  }],
  name: '_reduceReserves',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'contract ComptrollerInterface',
    name: 'newComptroller',
    type: 'address'
  }],
  name: '_setComptroller',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'address',
    name: 'implementation_',
    type: 'address'
  }, {
    internalType: 'bool',
    name: 'allowResign',
    type: 'bool'
  }, {
    internalType: 'bytes',
    name: 'becomeImplementationData',
    type: 'bytes'
  }],
  name: '_setImplementation',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'contract InterestRateModel',
    name: 'newInterestRateModel',
    type: 'address'
  }],
  name: '_setInterestRateModel',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'address payable',
    name: 'newPendingAdmin',
    type: 'address'
  }],
  name: '_setPendingAdmin',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'uint256',
    name: 'newProtocolSeizeShareMantissa',
    type: 'uint256'
  }],
  name: '_setProtocolSeizeShare',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'uint256',
    name: 'newReserveFactorMantissa',
    type: 'uint256'
  }],
  name: '_setReserveFactor',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'accrualBlockTimestamp',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [],
  name: 'accrueInterest',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'admin',
  outputs: [{
    internalType: 'address payable',
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    internalType: 'address',
    name: 'owner',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'spender',
    type: 'address'
  }],
  name: 'allowance',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'address',
    name: 'spender',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }],
  name: 'approve',
  outputs: [{
    internalType: 'bool',
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    internalType: 'address',
    name: 'owner',
    type: 'address'
  }],
  name: 'balanceOf',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'address',
    name: 'owner',
    type: 'address'
  }],
  name: 'balanceOfUnderlying',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'uint256',
    name: 'borrowAmount',
    type: 'uint256'
  }],
  name: 'borrow',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'address',
    name: 'account',
    type: 'address'
  }],
  name: 'borrowBalanceCurrent',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    internalType: 'address',
    name: 'account',
    type: 'address'
  }],
  name: 'borrowBalanceStored',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'borrowIndex',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'borrowRatePerTimestamp',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'comptroller',
  outputs: [{
    internalType: 'contract ComptrollerInterface',
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'decimals',
  outputs: [{
    internalType: 'uint8',
    name: '',
    type: 'uint8'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'bytes',
    name: 'data',
    type: 'bytes'
  }],
  name: 'delegateToImplementation',
  outputs: [{
    internalType: 'bytes',
    name: '',
    type: 'bytes'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    internalType: 'bytes',
    name: 'data',
    type: 'bytes'
  }],
  name: 'delegateToViewImplementation',
  outputs: [{
    internalType: 'bytes',
    name: '',
    type: 'bytes'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [],
  name: 'exchangeRateCurrent',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'exchangeRateStored',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    internalType: 'address',
    name: 'account',
    type: 'address'
  }],
  name: 'getAccountSnapshot',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'getCash',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'implementation',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'interestRateModel',
  outputs: [{
    internalType: 'contract InterestRateModel',
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'isQiToken',
  outputs: [{
    internalType: 'bool',
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'address',
    name: 'borrower',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'repayAmount',
    type: 'uint256'
  }, {
    internalType: 'contract QiTokenInterface',
    name: 'qiTokenCollateral',
    type: 'address'
  }],
  name: 'liquidateBorrow',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'uint256',
    name: 'mintAmount',
    type: 'uint256'
  }],
  name: 'mint',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'name',
  outputs: [{
    internalType: 'string',
    name: '',
    type: 'string'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'pendingAdmin',
  outputs: [{
    internalType: 'address payable',
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'protocolSeizeShareMantissa',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'uint256',
    name: 'redeemTokens',
    type: 'uint256'
  }],
  name: 'redeem',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'uint256',
    name: 'redeemAmount',
    type: 'uint256'
  }],
  name: 'redeemUnderlying',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'uint256',
    name: 'repayAmount',
    type: 'uint256'
  }],
  name: 'repayBorrow',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'address',
    name: 'borrower',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'repayAmount',
    type: 'uint256'
  }],
  name: 'repayBorrowBehalf',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'reserveFactorMantissa',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'address',
    name: 'liquidator',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'borrower',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'seizeTokens',
    type: 'uint256'
  }],
  name: 'seize',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'supplyRatePerTimestamp',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'contract EIP20NonStandardInterface',
    name: 'token',
    type: 'address'
  }],
  name: 'sweepToken',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'symbol',
  outputs: [{
    internalType: 'string',
    name: '',
    type: 'string'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'totalBorrows',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [],
  name: 'totalBorrowsCurrent',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'totalReserves',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'totalSupply',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'address',
    name: 'dst',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }],
  name: 'transfer',
  outputs: [{
    internalType: 'bool',
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'address',
    name: 'src',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'dst',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }],
  name: 'transferFrom',
  outputs: [{
    internalType: 'bool',
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'underlying',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}];
var BenqiQiErc20__factory = /*#__PURE__*/function () {
  function BenqiQiErc20__factory() {}

  BenqiQiErc20__factory.createInterface = function createInterface() {
    return new ethers.utils.Interface(_abi$f);
  };

  BenqiQiErc20__factory.connect = function connect(address, signerOrProvider) {
    return new ethers.Contract(address, _abi$f, signerOrProvider);
  };

  return BenqiQiErc20__factory;
}();
BenqiQiErc20__factory.abi = _abi$f;

var _abi$e = [{
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'oldMPC',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'newMPC',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'uint256',
    name: 'effectiveTime',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'chainId',
    type: 'uint256'
  }],
  name: 'LogChangeMPC',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'address',
    name: 'bridge',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'bytes',
    name: 'callData',
    type: 'bytes'
  }, {
    indexed: false,
    internalType: 'address',
    name: 'receiveSide',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'address',
    name: 'oppositeBridge',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'chainId',
    type: 'uint256'
  }],
  name: 'OracleRequest',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'previousOwner',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'newOwner',
    type: 'address'
  }],
  name: 'OwnershipTransferred',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'admin',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'bool',
    name: 'permission',
    type: 'bool'
  }],
  name: 'SetAdminPermission',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'transmitter',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'bool',
    name: 'status',
    type: 'bool'
  }],
  name: 'SetTransmitterStatus',
  type: 'event'
}, {
  inputs: [{
    internalType: 'address',
    name: '_newMPC',
    type: 'address'
  }],
  name: 'changeMPC',
  outputs: [{
    internalType: 'bool',
    name: '',
    type: 'bool'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: '_newMPC',
    type: 'address'
  }, {
    internalType: 'bytes',
    name: 'signature',
    type: 'bytes'
  }],
  name: 'changeMPCSigned',
  outputs: [{
    internalType: 'bool',
    name: '',
    type: 'bool'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'currentChainId',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: '_mpc',
    type: 'address'
  }],
  name: 'initialize',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  name: 'isAdmin',
  outputs: [{
    internalType: 'bool',
    name: '',
    type: 'bool'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  name: 'isTransmitter',
  outputs: [{
    internalType: 'bool',
    name: '',
    type: 'bool'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'mpc',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'newMPC',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'newMPCEffectiveTime',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'oldMPC',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'owner',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'bytes',
    name: '_callData',
    type: 'bytes'
  }, {
    internalType: 'address',
    name: '_receiveSide',
    type: 'address'
  }],
  name: 'receiveRequestV2',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'bytes',
    name: '_callData',
    type: 'bytes'
  }, {
    internalType: 'address',
    name: '_receiveSide',
    type: 'address'
  }, {
    internalType: 'bytes',
    name: 'signature',
    type: 'bytes'
  }],
  name: 'receiveRequestV2Signed',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'renounceOwnership',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: '_user',
    type: 'address'
  }, {
    internalType: 'bool',
    name: '_permission',
    type: 'bool'
  }],
  name: 'setAdminPermission',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: '_transmitter',
    type: 'address'
  }, {
    internalType: 'bool',
    name: '_status',
    type: 'bool'
  }],
  name: 'setTransmitterStatus',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'newOwner',
    type: 'address'
  }],
  name: 'transferOwnership',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'bytes',
    name: '_callData',
    type: 'bytes'
  }, {
    internalType: 'address',
    name: '_receiveSide',
    type: 'address'
  }, {
    internalType: 'address',
    name: '_oppositeBridge',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: '_chainId',
    type: 'uint256'
  }],
  name: 'transmitRequestV2',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'token',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }],
  name: 'withdrawFee',
  outputs: [{
    internalType: 'bool',
    name: '',
    type: 'bool'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}];
var _bytecode$5 = '';

var isSuperArgs$5 = function isSuperArgs(xs) {
  return xs.length > 1;
};

var Bridge__factory = /*#__PURE__*/function (_ContractFactory) {
  _inheritsLoose(Bridge__factory, _ContractFactory);

  function Bridge__factory() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    if (isSuperArgs$5(args)) {
      _this = _ContractFactory.call.apply(_ContractFactory, [this].concat(args)) || this;
      _this.contractName = void 0;
    } else {
      _this = _ContractFactory.call(this, _abi$e, _bytecode$5, args[0]) || this;
      _this.contractName = void 0;
    }

    _this.contractName = 'Bridge';
    return _assertThisInitialized(_this);
  }

  var _proto = Bridge__factory.prototype;

  _proto.deploy = function deploy(overrides) {
    return _ContractFactory.prototype.deploy.call(this, overrides || {});
  };

  _proto.getDeployTransaction = function getDeployTransaction(overrides) {
    return _ContractFactory.prototype.getDeployTransaction.call(this, overrides || {});
  };

  _proto.attach = function attach(address) {
    return _ContractFactory.prototype.attach.call(this, address);
  };

  _proto.connect = function connect(signer) {
    return _ContractFactory.prototype.connect.call(this, signer);
  };

  Bridge__factory.createInterface = function createInterface() {
    return new ethers.utils.Interface(_abi$e);
  };

  Bridge__factory.connect = function connect(address, signerOrProvider) {
    return new ethers.Contract(address, _abi$e, signerOrProvider);
  };

  return Bridge__factory;
}(ethers.ContractFactory);
Bridge__factory.contractName = void 0;
Bridge__factory.bytecode = _bytecode$5;
Bridge__factory.abi = _abi$e;

/* Autogenerated file. Do not edit manually. */
var _abi$d = [{
  inputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'constructor'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'uint256',
    name: 'cashPrior',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'interestAccumulated',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'borrowIndex',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'totalBorrows',
    type: 'uint256'
  }],
  name: 'AccrueInterest',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'owner',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'spender',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }],
  name: 'Approval',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'address',
    name: 'borrower',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'borrowAmount',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'accountBorrows',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'totalBorrows',
    type: 'uint256'
  }],
  name: 'Borrow',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'uint256',
    name: 'error',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'info',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'detail',
    type: 'uint256'
  }],
  name: 'Failure',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'receiver',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'totalFee',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'reservesFee',
    type: 'uint256'
  }],
  name: 'Flashloan',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'address',
    name: 'liquidator',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'address',
    name: 'borrower',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'repayAmount',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'address',
    name: 'cTokenCollateral',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'seizeTokens',
    type: 'uint256'
  }],
  name: 'LiquidateBorrow',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'address',
    name: 'minter',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'mintAmount',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'mintTokens',
    type: 'uint256'
  }],
  name: 'Mint',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'address',
    name: 'oldAdmin',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'address',
    name: 'newAdmin',
    type: 'address'
  }],
  name: 'NewAdmin',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'address',
    name: 'token',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'newCap',
    type: 'uint256'
  }],
  name: 'NewCollateralCap',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'contract ComptrollerInterface',
    name: 'oldComptroller',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'contract ComptrollerInterface',
    name: 'newComptroller',
    type: 'address'
  }],
  name: 'NewComptroller',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'contract InterestRateModel',
    name: 'oldInterestRateModel',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'contract InterestRateModel',
    name: 'newInterestRateModel',
    type: 'address'
  }],
  name: 'NewMarketInterestRateModel',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'address',
    name: 'oldPendingAdmin',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'address',
    name: 'newPendingAdmin',
    type: 'address'
  }],
  name: 'NewPendingAdmin',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'uint256',
    name: 'oldReserveFactorMantissa',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'newReserveFactorMantissa',
    type: 'uint256'
  }],
  name: 'NewReserveFactor',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'address',
    name: 'redeemer',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'redeemAmount',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'redeemTokens',
    type: 'uint256'
  }],
  name: 'Redeem',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'address',
    name: 'payer',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'address',
    name: 'borrower',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'repayAmount',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'accountBorrows',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'totalBorrows',
    type: 'uint256'
  }],
  name: 'RepayBorrow',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'address',
    name: 'benefactor',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'addAmount',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'newTotalReserves',
    type: 'uint256'
  }],
  name: 'ReservesAdded',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'address',
    name: 'admin',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'reduceAmount',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'newTotalReserves',
    type: 'uint256'
  }],
  name: 'ReservesReduced',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'from',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }],
  name: 'Transfer',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'address',
    name: 'account',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'newCollateralTokens',
    type: 'uint256'
  }],
  name: 'UserCollateralChanged',
  type: 'event'
}, {
  constant: false,
  inputs: [],
  name: '_acceptAdmin',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'uint256',
    name: 'addAmount',
    type: 'uint256'
  }],
  name: '_addReserves',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'bytes',
    name: 'data',
    type: 'bytes'
  }],
  name: '_becomeImplementation',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'uint256',
    name: 'reduceAmount',
    type: 'uint256'
  }],
  name: '_reduceReserves',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [],
  name: '_resignImplementation',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'uint256',
    name: 'newCollateralCap',
    type: 'uint256'
  }],
  name: '_setCollateralCap',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'contract ComptrollerInterface',
    name: 'newComptroller',
    type: 'address'
  }],
  name: '_setComptroller',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'contract InterestRateModel',
    name: 'newInterestRateModel',
    type: 'address'
  }],
  name: '_setInterestRateModel',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'address payable',
    name: 'newPendingAdmin',
    type: 'address'
  }],
  name: '_setPendingAdmin',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'uint256',
    name: 'newReserveFactorMantissa',
    type: 'uint256'
  }],
  name: '_setReserveFactor',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  name: 'accountCollateralTokens',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'accrualBlockNumber',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [],
  name: 'accrueInterest',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'admin',
  outputs: [{
    internalType: 'address payable',
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    internalType: 'address',
    name: 'owner',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'spender',
    type: 'address'
  }],
  name: 'allowance',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'address',
    name: 'spender',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }],
  name: 'approve',
  outputs: [{
    internalType: 'bool',
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    internalType: 'address',
    name: 'owner',
    type: 'address'
  }],
  name: 'balanceOf',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'address',
    name: 'owner',
    type: 'address'
  }],
  name: 'balanceOfUnderlying',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'uint256',
    name: 'borrowAmount',
    type: 'uint256'
  }],
  name: 'borrow',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'address',
    name: 'account',
    type: 'address'
  }],
  name: 'borrowBalanceCurrent',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    internalType: 'address',
    name: 'account',
    type: 'address'
  }],
  name: 'borrowBalanceStored',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'borrowIndex',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'borrowRatePerBlock',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'collateralCap',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'comptroller',
  outputs: [{
    internalType: 'contract ComptrollerInterface',
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'decimals',
  outputs: [{
    internalType: 'uint8',
    name: '',
    type: 'uint8'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    internalType: 'uint256',
    name: 'change',
    type: 'uint256'
  }, {
    internalType: 'bool',
    name: 'repay',
    type: 'bool'
  }],
  name: 'estimateBorrowRatePerBlockAfterChange',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    internalType: 'uint256',
    name: 'change',
    type: 'uint256'
  }, {
    internalType: 'bool',
    name: 'repay',
    type: 'bool'
  }],
  name: 'estimateSupplyRatePerBlockAfterChange',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [],
  name: 'exchangeRateCurrent',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'exchangeRateStored',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }],
  name: 'flashFee',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'flashFeeBips',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'contract ERC3156FlashBorrowerInterface',
    name: 'receiver',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'initiator',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }, {
    internalType: 'bytes',
    name: 'data',
    type: 'bytes'
  }],
  name: 'flashLoan',
  outputs: [{
    internalType: 'bool',
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    internalType: 'address',
    name: 'account',
    type: 'address'
  }],
  name: 'getAccountSnapshot',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'getCash',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [],
  name: 'gulp',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'implementation',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'address',
    name: 'underlying_',
    type: 'address'
  }, {
    internalType: 'contract ComptrollerInterface',
    name: 'comptroller_',
    type: 'address'
  }, {
    internalType: 'contract InterestRateModel',
    name: 'interestRateModel_',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'initialExchangeRateMantissa_',
    type: 'uint256'
  }, {
    internalType: 'string',
    name: 'name_',
    type: 'string'
  }, {
    internalType: 'string',
    name: 'symbol_',
    type: 'string'
  }, {
    internalType: 'uint8',
    name: 'decimals_',
    type: 'uint8'
  }],
  name: 'initialize',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'contract ComptrollerInterface',
    name: 'comptroller_',
    type: 'address'
  }, {
    internalType: 'contract InterestRateModel',
    name: 'interestRateModel_',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'initialExchangeRateMantissa_',
    type: 'uint256'
  }, {
    internalType: 'string',
    name: 'name_',
    type: 'string'
  }, {
    internalType: 'string',
    name: 'symbol_',
    type: 'string'
  }, {
    internalType: 'uint8',
    name: 'decimals_',
    type: 'uint8'
  }],
  name: 'initialize',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'interestRateModel',
  outputs: [{
    internalType: 'contract InterestRateModel',
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'internalCash',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'isCToken',
  outputs: [{
    internalType: 'bool',
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  name: 'isCollateralTokenInit',
  outputs: [{
    internalType: 'bool',
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'address',
    name: 'borrower',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'repayAmount',
    type: 'uint256'
  }, {
    internalType: 'contract CTokenInterface',
    name: 'cTokenCollateral',
    type: 'address'
  }],
  name: 'liquidateBorrow',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'maxFlashLoan',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'uint256',
    name: 'mintAmount',
    type: 'uint256'
  }],
  name: 'mint',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'name',
  outputs: [{
    internalType: 'string',
    name: '',
    type: 'string'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'pendingAdmin',
  outputs: [{
    internalType: 'address payable',
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'uint256',
    name: 'redeemTokens',
    type: 'uint256'
  }],
  name: 'redeem',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'uint256',
    name: 'redeemAmount',
    type: 'uint256'
  }],
  name: 'redeemUnderlying',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'address',
    name: 'account',
    type: 'address'
  }],
  name: 'registerCollateral',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'uint256',
    name: 'repayAmount',
    type: 'uint256'
  }],
  name: 'repayBorrow',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'address',
    name: 'borrower',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'repayAmount',
    type: 'uint256'
  }],
  name: 'repayBorrowBehalf',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'reserveFactorMantissa',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'address',
    name: 'liquidator',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'borrower',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'seizeTokens',
    type: 'uint256'
  }],
  name: 'seize',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'supplyRatePerBlock',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'symbol',
  outputs: [{
    internalType: 'string',
    name: '',
    type: 'string'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'totalBorrows',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [],
  name: 'totalBorrowsCurrent',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'totalCollateralTokens',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'totalReserves',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'totalSupply',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'address',
    name: 'dst',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }],
  name: 'transfer',
  outputs: [{
    internalType: 'bool',
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'address',
    name: 'src',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'dst',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }],
  name: 'transferFrom',
  outputs: [{
    internalType: 'bool',
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'underlying',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'address',
    name: 'account',
    type: 'address'
  }],
  name: 'unregisterCollateral',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}];
var CreamCErc20__factory = /*#__PURE__*/function () {
  function CreamCErc20__factory() {}

  CreamCErc20__factory.createInterface = function createInterface() {
    return new ethers.utils.Interface(_abi$d);
  };

  CreamCErc20__factory.connect = function connect(address, signerOrProvider) {
    return new ethers.Contract(address, _abi$d, signerOrProvider);
  };

  return CreamCErc20__factory;
}();
CreamCErc20__factory.abi = _abi$d;

/* Autogenerated file. Do not edit manually. */
var _abi$c = [{
  inputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'constructor'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'string',
    name: 'action',
    type: 'string'
  }, {
    indexed: false,
    internalType: 'bool',
    name: 'pauseState',
    type: 'bool'
  }],
  name: 'ActionPaused',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'contract CToken',
    name: 'cToken',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'string',
    name: 'action',
    type: 'string'
  }, {
    indexed: false,
    internalType: 'bool',
    name: 'pauseState',
    type: 'bool'
  }],
  name: 'ActionPaused',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'contract CToken',
    name: 'cToken',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'borrower',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'compDelta',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'compBorrowIndex',
    type: 'uint256'
  }],
  name: 'DistributedBorrowerComp',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'contract CToken',
    name: 'cToken',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'supplier',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'compDelta',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'compSupplyIndex',
    type: 'uint256'
  }],
  name: 'DistributedSupplierComp',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'uint256',
    name: 'error',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'info',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'detail',
    type: 'uint256'
  }],
  name: 'Failure',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'contract CToken',
    name: 'cToken',
    type: 'address'
  }],
  name: 'MarketDelisted',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'contract CToken',
    name: 'cToken',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'address',
    name: 'account',
    type: 'address'
  }],
  name: 'MarketEntered',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'contract CToken',
    name: 'cToken',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'address',
    name: 'account',
    type: 'address'
  }],
  name: 'MarketExited',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'contract CToken',
    name: 'cToken',
    type: 'address'
  }],
  name: 'MarketListed',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'contract CToken',
    name: 'cToken',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'newBorrowCap',
    type: 'uint256'
  }],
  name: 'NewBorrowCap',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'address',
    name: 'oldBorrowCapGuardian',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'address',
    name: 'newBorrowCapGuardian',
    type: 'address'
  }],
  name: 'NewBorrowCapGuardian',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'contract CToken',
    name: 'cToken',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'enum ComptrollerV2Storage.Version',
    name: 'oldVersion',
    type: 'uint8'
  }, {
    indexed: false,
    internalType: 'enum ComptrollerV2Storage.Version',
    name: 'newVersion',
    type: 'uint8'
  }],
  name: 'NewCTokenVersion',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'uint256',
    name: 'oldCloseFactorMantissa',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'newCloseFactorMantissa',
    type: 'uint256'
  }],
  name: 'NewCloseFactor',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'contract CToken',
    name: 'cToken',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'oldCollateralFactorMantissa',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'newCollateralFactorMantissa',
    type: 'uint256'
  }],
  name: 'NewCollateralFactor',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'uint256',
    name: 'oldLiquidationIncentiveMantissa',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'newLiquidationIncentiveMantissa',
    type: 'uint256'
  }],
  name: 'NewLiquidationIncentive',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'address',
    name: 'oldLiquidityMining',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'address',
    name: 'newLiquidityMining',
    type: 'address'
  }],
  name: 'NewLiquidityMining',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'address',
    name: 'oldPauseGuardian',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'address',
    name: 'newPauseGuardian',
    type: 'address'
  }],
  name: 'NewPauseGuardian',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'contract PriceOracle',
    name: 'oldPriceOracle',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'contract PriceOracle',
    name: 'newPriceOracle',
    type: 'address'
  }],
  name: 'NewPriceOracle',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'contract CToken',
    name: 'cToken',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'newSupplyCap',
    type: 'uint256'
  }],
  name: 'NewSupplyCap',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'address',
    name: 'oldSupplyCapGuardian',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'address',
    name: 'newSupplyCapGuardian',
    type: 'address'
  }],
  name: 'NewSupplyCapGuardian',
  type: 'event'
}, {
  constant: false,
  inputs: [{
    internalType: 'contract Unitroller',
    name: 'unitroller',
    type: 'address'
  }],
  name: '_become',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: '_borrowGuardianPaused',
  outputs: [{
    internalType: 'bool',
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'contract CToken',
    name: 'cToken',
    type: 'address'
  }],
  name: '_delistMarket',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: '_mintGuardianPaused',
  outputs: [{
    internalType: 'bool',
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'address',
    name: 'newBorrowCapGuardian',
    type: 'address'
  }],
  name: '_setBorrowCapGuardian',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'contract CToken',
    name: 'cToken',
    type: 'address'
  }, {
    internalType: 'bool',
    name: 'state',
    type: 'bool'
  }],
  name: '_setBorrowPaused',
  outputs: [{
    internalType: 'bool',
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'uint256',
    name: 'newCloseFactorMantissa',
    type: 'uint256'
  }],
  name: '_setCloseFactor',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'contract CToken',
    name: 'cToken',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'newCollateralFactorMantissa',
    type: 'uint256'
  }],
  name: '_setCollateralFactor',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'contract CToken',
    name: 'cToken',
    type: 'address'
  }, {
    internalType: 'bool',
    name: 'state',
    type: 'bool'
  }],
  name: '_setFlashloanPaused',
  outputs: [{
    internalType: 'bool',
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'uint256',
    name: 'newLiquidationIncentiveMantissa',
    type: 'uint256'
  }],
  name: '_setLiquidationIncentive',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'address',
    name: 'newLiquidityMining',
    type: 'address'
  }],
  name: '_setLiquidityMining',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'contract CToken[]',
    name: 'cTokens',
    type: 'address[]'
  }, {
    internalType: 'uint256[]',
    name: 'newBorrowCaps',
    type: 'uint256[]'
  }],
  name: '_setMarketBorrowCaps',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'contract CToken[]',
    name: 'cTokens',
    type: 'address[]'
  }, {
    internalType: 'uint256[]',
    name: 'newSupplyCaps',
    type: 'uint256[]'
  }],
  name: '_setMarketSupplyCaps',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'contract CToken',
    name: 'cToken',
    type: 'address'
  }, {
    internalType: 'bool',
    name: 'state',
    type: 'bool'
  }],
  name: '_setMintPaused',
  outputs: [{
    internalType: 'bool',
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'address',
    name: 'newPauseGuardian',
    type: 'address'
  }],
  name: '_setPauseGuardian',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'contract PriceOracle',
    name: 'newOracle',
    type: 'address'
  }],
  name: '_setPriceOracle',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'bool',
    name: 'state',
    type: 'bool'
  }],
  name: '_setSeizePaused',
  outputs: [{
    internalType: 'bool',
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'address',
    name: 'newSupplyCapGuardian',
    type: 'address'
  }],
  name: '_setSupplyCapGuardian',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'bool',
    name: 'state',
    type: 'bool'
  }],
  name: '_setTransferPaused',
  outputs: [{
    internalType: 'bool',
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'contract CToken',
    name: 'cToken',
    type: 'address'
  }, {
    internalType: 'enum ComptrollerV2Storage.Version',
    name: 'version',
    type: 'uint8'
  }],
  name: '_supportMarket',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  name: 'accountAssets',
  outputs: [{
    internalType: 'contract CToken',
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'admin',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  name: 'allMarkets',
  outputs: [{
    internalType: 'contract CToken',
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'address',
    name: 'cToken',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'borrower',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'borrowAmount',
    type: 'uint256'
  }],
  name: 'borrowAllowed',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'borrowCapGuardian',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  name: 'borrowCaps',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  name: 'borrowGuardianPaused',
  outputs: [{
    internalType: 'bool',
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'address',
    name: 'cToken',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'borrower',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'borrowAmount',
    type: 'uint256'
  }],
  name: 'borrowVerify',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    internalType: 'address',
    name: 'account',
    type: 'address'
  }, {
    internalType: 'contract CToken',
    name: 'cToken',
    type: 'address'
  }],
  name: 'checkMembership',
  outputs: [{
    internalType: 'bool',
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'address[]',
    name: 'holders',
    type: 'address[]'
  }, {
    internalType: 'contract CToken[]',
    name: 'cTokens',
    type: 'address[]'
  }, {
    internalType: 'bool',
    name: 'borrowers',
    type: 'bool'
  }, {
    internalType: 'bool',
    name: 'suppliers',
    type: 'bool'
  }],
  name: 'claimComp',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'address',
    name: 'holder',
    type: 'address'
  }],
  name: 'claimComp',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'closeFactorMantissa',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  name: 'compAccrued',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  name: 'compBorrowState',
  outputs: [{
    internalType: 'uint224',
    name: 'index',
    type: 'uint224'
  }, {
    internalType: 'uint32',
    name: 'block',
    type: 'uint32'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }, {
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  name: 'compBorrowerIndex',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'compInitialIndex',
  outputs: [{
    internalType: 'uint224',
    name: '',
    type: 'uint224'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'compRate',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  name: 'compSpeeds',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }, {
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  name: 'compSupplierIndex',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  name: 'compSupplyState',
  outputs: [{
    internalType: 'uint224',
    name: 'index',
    type: 'uint224'
  }, {
    internalType: 'uint32',
    name: 'block',
    type: 'uint32'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'comptrollerImplementation',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'address[]',
    name: 'cTokens',
    type: 'address[]'
  }],
  name: 'enterMarkets',
  outputs: [{
    internalType: 'uint256[]',
    name: '',
    type: 'uint256[]'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'address',
    name: 'cTokenAddress',
    type: 'address'
  }],
  name: 'exitMarket',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'address',
    name: 'cToken',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'receiver',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }, {
    internalType: 'bytes',
    name: 'params',
    type: 'bytes'
  }],
  name: 'flashloanAllowed',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  name: 'flashloanGuardianPaused',
  outputs: [{
    internalType: 'bool',
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    internalType: 'address',
    name: 'account',
    type: 'address'
  }],
  name: 'getAccountLiquidity',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'getAllMarkets',
  outputs: [{
    internalType: 'contract CToken[]',
    name: '',
    type: 'address[]'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    internalType: 'address',
    name: 'account',
    type: 'address'
  }],
  name: 'getAssetsIn',
  outputs: [{
    internalType: 'contract CToken[]',
    name: '',
    type: 'address[]'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'getBlockNumber',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'getCompAddress',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    internalType: 'address',
    name: 'account',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'cTokenModify',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'redeemTokens',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'borrowAmount',
    type: 'uint256'
  }],
  name: 'getHypotheticalAccountLiquidity',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'isComptroller',
  outputs: [{
    internalType: 'bool',
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    internalType: 'address',
    name: 'cTokenAddress',
    type: 'address'
  }],
  name: 'isMarketListed',
  outputs: [{
    internalType: 'bool',
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'address',
    name: 'cTokenBorrowed',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'cTokenCollateral',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'liquidator',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'borrower',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'repayAmount',
    type: 'uint256'
  }],
  name: 'liquidateBorrowAllowed',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'address',
    name: 'cTokenBorrowed',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'cTokenCollateral',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'liquidator',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'borrower',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'actualRepayAmount',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'seizeTokens',
    type: 'uint256'
  }],
  name: 'liquidateBorrowVerify',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    internalType: 'address',
    name: 'cTokenBorrowed',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'cTokenCollateral',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'actualRepayAmount',
    type: 'uint256'
  }],
  name: 'liquidateCalculateSeizeTokens',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'liquidationIncentiveMantissa',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'liquidityMining',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  name: 'markets',
  outputs: [{
    internalType: 'bool',
    name: 'isListed',
    type: 'bool'
  }, {
    internalType: 'uint256',
    name: 'collateralFactorMantissa',
    type: 'uint256'
  }, {
    internalType: 'bool',
    name: 'isComped',
    type: 'bool'
  }, {
    internalType: 'enum ComptrollerV2Storage.Version',
    name: 'version',
    type: 'uint8'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'maxAssets',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'address',
    name: 'cToken',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'minter',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'mintAmount',
    type: 'uint256'
  }],
  name: 'mintAllowed',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  name: 'mintGuardianPaused',
  outputs: [{
    internalType: 'bool',
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'address',
    name: 'cToken',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'minter',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'actualMintAmount',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'mintTokens',
    type: 'uint256'
  }],
  name: 'mintVerify',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'oracle',
  outputs: [{
    internalType: 'contract PriceOracle',
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'pauseGuardian',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'pendingAdmin',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'pendingComptrollerImplementation',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'address',
    name: 'cToken',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'redeemer',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'redeemTokens',
    type: 'uint256'
  }],
  name: 'redeemAllowed',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'address',
    name: 'cToken',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'redeemer',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'redeemAmount',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'redeemTokens',
    type: 'uint256'
  }],
  name: 'redeemVerify',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'address',
    name: 'cToken',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'payer',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'borrower',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'repayAmount',
    type: 'uint256'
  }],
  name: 'repayBorrowAllowed',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'address',
    name: 'cToken',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'payer',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'borrower',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'actualRepayAmount',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'borrowerIndex',
    type: 'uint256'
  }],
  name: 'repayBorrowVerify',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'address',
    name: 'cTokenCollateral',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'cTokenBorrowed',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'liquidator',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'borrower',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'seizeTokens',
    type: 'uint256'
  }],
  name: 'seizeAllowed',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'seizeGuardianPaused',
  outputs: [{
    internalType: 'bool',
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'address',
    name: 'cTokenCollateral',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'cTokenBorrowed',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'liquidator',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'borrower',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'seizeTokens',
    type: 'uint256'
  }],
  name: 'seizeVerify',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'supplyCapGuardian',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  name: 'supplyCaps',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'address',
    name: 'cToken',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'src',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'dst',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'transferTokens',
    type: 'uint256'
  }],
  name: 'transferAllowed',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'transferGuardianPaused',
  outputs: [{
    internalType: 'bool',
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'address',
    name: 'cToken',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'src',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'dst',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'transferTokens',
    type: 'uint256'
  }],
  name: 'transferVerify',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'address',
    name: 'cToken',
    type: 'address'
  }, {
    internalType: 'enum ComptrollerV2Storage.Version',
    name: 'newVersion',
    type: 'uint8'
  }],
  name: 'updateCTokenVersion',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}];
var CreamComptroller__factory = /*#__PURE__*/function () {
  function CreamComptroller__factory() {}

  CreamComptroller__factory.createInterface = function createInterface() {
    return new ethers.utils.Interface(_abi$c);
  };

  CreamComptroller__factory.connect = function connect(address, signerOrProvider) {
    return new ethers.Contract(address, _abi$c, signerOrProvider);
  };

  return CreamComptroller__factory;
}();
CreamComptroller__factory.abi = _abi$c;

var _abi$b = [{
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'previousOwner',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'newOwner',
    type: 'address'
  }],
  name: 'OwnershipTransferred',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'address',
    name: 'rToken',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'chainID',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'address',
    name: 'sToken',
    type: 'address'
  }],
  name: 'RepresentationCreated',
  type: 'event'
}, {
  inputs: [{
    internalType: 'address',
    name: '_rtoken',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: '_chainID',
    type: 'uint256'
  }, {
    internalType: 'string',
    name: '_stokenName',
    type: 'string'
  }, {
    internalType: 'string',
    name: '_stokenSymbol',
    type: 'string'
  }, {
    internalType: 'uint8',
    name: '_decimals',
    type: 'uint8'
  }],
  name: 'createRepresentationByAdmin',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: '_syntTokenAdr',
    type: 'address'
  }],
  name: 'getRealRepresentation',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: '_realTokenAdr',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: '_chainID',
    type: 'uint256'
  }],
  name: 'getSyntRepresentation',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'bytes32',
    name: '_key',
    type: 'bytes32'
  }],
  name: 'getSyntRepresentationByKey',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: '_synthesis',
    type: 'address'
  }],
  name: 'initialize',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'owner',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'renounceOwnership',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'synthesis',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: '_to',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: '_amount',
    type: 'uint256'
  }, {
    internalType: 'address',
    name: '_stoken',
    type: 'address'
  }],
  name: 'synthesize',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'newOwner',
    type: 'address'
  }],
  name: 'transferOwnership',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: '_to',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: '_amount',
    type: 'uint256'
  }, {
    internalType: 'address',
    name: '_stoken',
    type: 'address'
  }],
  name: 'unsynthesize',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}];
var _bytecode$4 = '0x608060405234801561001057600080fd5b5061297a806100206000396000f3fe60806040523480156200001157600080fd5b5060043610620000d95760003560e01c80638da5cb5b116200008b578063e49029fc1162000062578063e49029fc1462000272578063e7ca9aaf14620002ab578063f2fde38b14620003fb57600080fd5b80638da5cb5b14620001fe578063a8160b761462000210578063c4d66de8146200024957600080fd5b8063506890a011620000c0578063506890a01462000146578063715018a614620001bd5780637cf8f32714620001c957600080fd5b8063161acb4714620000de5780632af896fb1462000132575b600080fd5b6200011660048036036020811015620000f657600080fd5b50356001600160a01b039081166000908152606760205260409020541690565b604080516001600160a01b039092168252519081900360200190f35b60655462000116906001600160a01b031681565b62000116600480360360408110156200015e57600080fd5b5060408051823560601b6bffffffffffffffffffffffff1916602082810191909152928301356034808301919091528251808303909101815260549091018252805190830120600090815260669092529020546001600160a01b031690565b620001c762000424565b005b6200011660048036036020811015620001e157600080fd5b50356000908152606660205260409020546001600160a01b031690565b6033546001600160a01b031662000116565b620001c7600480360360608110156200022857600080fd5b506001600160a01b0381358116916020810135916040909101351662000492565b620001c7600480360360208110156200026157600080fd5b50356001600160a01b031662000553565b620001c7600480360360608110156200028a57600080fd5b506001600160a01b0381358116916020810135916040909101351662000699565b620001c7600480360360a0811015620002c357600080fd5b6001600160a01b0382351691602081013591810190606081016040820135640100000000811115620002f457600080fd5b8201836020820111156200030757600080fd5b803590602001918460018302840111640100000000831117156200032a57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092959493602081019350359150506401000000008111156200037e57600080fd5b8201836020820111156200039157600080fd5b80359060200191846001830284011164010000000083111715620003b457600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505050903560ff1691506200073c9050565b620001c7600480360360208110156200041357600080fd5b50356001600160a01b0316620007ae565b6033546001600160a01b03163314620004845760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b62000490600062000896565b565b6065546001600160a01b03163314620004dd5760405162461bcd60e51b8152600401808060200182810382526021815260200180620028fb6021913960400191505060405180910390fd5b806001600160a01b0316639dc29fac84846040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b1580156200053557600080fd5b505af11580156200054a573d6000803e3d6000fd5b50505050505050565b600054610100900460ff16620005705760005460ff161562000574565b303b155b620005e85760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016200047b565b600054610100900460ff161580156200062857600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b6200063262000900565b606580547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03841617905580156200069557600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b5050565b6065546001600160a01b03163314620006e45760405162461bcd60e51b8152600401808060200182810382526021815260200180620028fb6021913960400191505060405180910390fd5b806001600160a01b03166340c10f1984846040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b1580156200053557600080fd5b6033546001600160a01b03163314620007985760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016200047b565b620007a7858585858562000993565b5050505050565b6033546001600160a01b031633146200080a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016200047b565b6001600160a01b038116620008885760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016200047b565b620008938162000896565b50565b603380546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166200097f5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016200047b565b6200098962000cb6565b6200049062000d35565b6001600160a01b038516620009ef576040805162461bcd60e51b815260206004820181905260248201527f53796d623a2072746f6b656e20697320746865207a65726f2061646472657373604482015290519081900360640190fd5b604080516bffffffffffffffffffffffff19606088901b16602080830191909152603480830188905283518084039091018152605490920183528151918101919091206000908152606690915220546001600160a01b0316801562000a865760405162461bcd60e51b81526004018080602001828103825260298152602001806200291c6029913960400191505060405180910390fd5b600084848460405162000a999062000dbf565b60ff82166040820152606080825284519082015283518190602080830191608084019188019080838360005b8381101562000adf57818101518382015260200162000ac5565b50505050905090810190601f16801562000b0d5780820380516001836020036101000a031916815260200191505b50838103825285518152855160209182019187019080838360005b8381101562000b4257818101518382015260200162000b28565b50505050905090810190601f16801562000b705780820380516001836020036101000a031916815260200191505b5095505050505050604051809103906000f08015801562000b95573d6000803e3d6000fd5b5090508660676000836001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055508060666000898960405160200180836001600160a01b031660601b81526014018281526020019250505060405160208183030381529060405280519060200120815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055507fe33e6b41ee9908e3919a380a52ae7059282c36b87adeee0d2ac1b05dfc50be6f87878360405180846001600160a01b03168152602001838152602001826001600160a01b03168152602001935050505060405180910390a150505050505050565b600054610100900460ff16620004905760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016200047b565b600054610100900460ff1662000db45760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016200047b565b620004903362000896565b611b2d8062000dce8339019056fe6101806040527f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9610140523480156200003757600080fd5b5060405162001b2d38038062001b2d8339810160408190526200005a9162000359565b6040518060400160405280600981526020016853796d62696f73697360b81b81525080604051806040016040528060018152602001603160f81b8152508585620000b3620000ad620001a860201b60201c565b620001ac565b8151620000c8906004906020850190620001fc565b508051620000de906005906020840190620001fc565b5050825160208085019190912083518483012060e08290526101008190524660a0818152604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81880181905281830187905260608201869052608082019490945230818401528151808203909301835260c0019052805194019390932091935091906080523060601b60c05261012052505050505060f81b7fff00000000000000000000000000000000000000000000000000000000000000166101605250620004319050565b3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8280546200020a90620003de565b90600052602060002090601f0160209004810192826200022e576000855562000279565b82601f106200024957805160ff191683800117855562000279565b8280016001018555821562000279579182015b82811115620002795782518255916020019190600101906200025c565b50620002879291506200028b565b5090565b5b808211156200028757600081556001016200028c565b600082601f830112620002b457600080fd5b81516001600160401b0380821115620002d157620002d16200041b565b604051601f8301601f19908116603f01168101908282118183101715620002fc57620002fc6200041b565b816040528381526020925086838588010111156200031957600080fd5b600091505b838210156200033d57858201830151818301840152908201906200031e565b838211156200034f5760008385830101525b9695505050505050565b6000806000606084860312156200036f57600080fd5b83516001600160401b03808211156200038757600080fd5b6200039587838801620002a2565b94506020860151915080821115620003ac57600080fd5b50620003bb86828701620002a2565b925050604084015160ff81168114620003d357600080fd5b809150509250925092565b600181811c90821680620003f357607f821691505b602082108114156200041557634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b60805160a05160c05160601c60e0516101005161012051610140516101605160f81c6116906200049d60003960006101c30152600061074601526000610d3301526000610d8201526000610d5d01526000610cb601526000610ce001526000610d0a01526116906000f3fe608060405234801561001057600080fd5b50600436106101515760003560e01c8063715018a6116100cd578063a457c2d711610081578063d505accf11610066578063d505accf146102bd578063dd62ed3e146102d0578063f2fde38b1461030957600080fd5b8063a457c2d714610297578063a9059cbb146102aa57600080fd5b80638da5cb5b116100b25780638da5cb5b1461026157806395d89b411461027c5780639dc29fac1461028457600080fd5b8063715018a6146102465780637ecebe001461024e57600080fd5b8063313ce56711610124578063395093511161010957806339509351146101f557806340c10f191461020857806370a082311461021d57600080fd5b8063313ce567146101bc5780633644e515146101ed57600080fd5b806306fdde0314610156578063095ea7b31461017457806318160ddd1461019757806323b872dd146101a9575b600080fd5b61015e61031c565b60405161016b9190611575565b60405180910390f35b61018761018236600461154b565b6103ae565b604051901515815260200161016b565b6003545b60405190815260200161016b565b6101876101b736600461149c565b6103c4565b60405160ff7f000000000000000000000000000000000000000000000000000000000000000016815260200161016b565b61019b610488565b61018761020336600461154b565b610497565b61021b61021636600461154b565b6104d3565b005b61019b61022b366004611447565b6001600160a01b031660009081526001602052604090205490565b61021b61053b565b61019b61025c366004611447565b6105a1565b6000546040516001600160a01b03909116815260200161016b565b61015e6105c1565b61021b61029236600461154b565b6105d0565b6101876102a536600461154b565b610634565b6101876102b836600461154b565b6106e5565b61021b6102cb3660046114d8565b6106f2565b61019b6102de366004611469565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b61021b610317366004611447565b610856565b60606004805461032b906115f9565b80601f0160208091040260200160405190810160405280929190818152602001828054610357906115f9565b80156103a45780601f10610379576101008083540402835291602001916103a4565b820191906000526020600020905b81548152906001019060200180831161038757829003601f168201915b5050505050905090565b60006103bb338484610938565b50600192915050565b60006103d1848484610a91565b6001600160a01b0384166000908152600260209081526040808320338452909152902054828110156104705760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206160448201527f6c6c6f77616e636500000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61047d8533858403610938565b506001949350505050565b6000610492610ca9565b905090565b3360008181526002602090815260408083206001600160a01b038716845290915281205490916103bb9185906104ce9086906115ca565b610938565b6000546001600160a01b0316331461052d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610467565b6105378282610dd0565b5050565b6000546001600160a01b031633146105955760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610467565b61059f6000610eaf565b565b6001600160a01b0381166000908152600660205260408120545b92915050565b60606005805461032b906115f9565b6000546001600160a01b0316331461062a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610467565b6105378282610f17565b3360009081526002602090815260408083206001600160a01b0386168452909152812054828110156106ce5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152608401610467565b6106db3385858403610938565b5060019392505050565b60006103bb338484610a91565b834211156107425760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e650000006044820152606401610467565b60007f00000000000000000000000000000000000000000000000000000000000000008888886107718c611094565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e00160405160208183030381529060405280519060200120905060006107cc826110bc565b905060006107dc82878787611125565b9050896001600160a01b0316816001600160a01b03161461083f5760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e617475726500006044820152606401610467565b61084a8a8a8a610938565b50505050505050505050565b6000546001600160a01b031633146108b05760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610467565b6001600160a01b03811661092c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610467565b61093581610eaf565b50565b6001600160a01b0383166109b35760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610467565b6001600160a01b038216610a2f5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610467565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b038316610b0d5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610467565b6001600160a01b038216610b895760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610467565b6001600160a01b03831660009081526001602052604090205481811015610c185760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401610467565b6001600160a01b03808516600090815260016020526040808220858503905591851681529081208054849290610c4f9084906115ca565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610c9b91815260200190565b60405180910390a350505050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015610d0257507f000000000000000000000000000000000000000000000000000000000000000046145b15610d2c57507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6001600160a01b038216610e265760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610467565b8060036000828254610e3891906115ca565b90915550506001600160a01b03821660009081526001602052604081208054839290610e659084906115ca565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038216610f935760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610467565b6001600160a01b038216600090815260016020526040902054818110156110225760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f63650000000000000000000000000000000000000000000000000000000000006064820152608401610467565b6001600160a01b03831660009081526001602052604081208383039055600380548492906110519084906115e2565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610a84565b6001600160a01b03811660009081526006602052604090208054600181018255905b50919050565b60006105bb6110c9610ca9565b836040517f19010000000000000000000000000000000000000000000000000000000000006020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b60008060006111368787878761114d565b915091506111438161123a565b5095945050505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156111845750600090506003611231565b8460ff16601b1415801561119c57508460ff16601c14155b156111ad5750600090506004611231565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611201573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661122a57600060019250925050611231565b9150600090505b94509492505050565b600081600481111561124e5761124e611644565b14156112575750565b600181600481111561126b5761126b611644565b14156112b95760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610467565b60028160048111156112cd576112cd611644565b141561131b5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610467565b600381600481111561132f5761132f611644565b14156113a35760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610467565b60048160048111156113b7576113b7611644565b14156109355760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610467565b80356001600160a01b038116811461144257600080fd5b919050565b60006020828403121561145957600080fd5b6114628261142b565b9392505050565b6000806040838503121561147c57600080fd5b6114858361142b565b91506114936020840161142b565b90509250929050565b6000806000606084860312156114b157600080fd5b6114ba8461142b565b92506114c86020850161142b565b9150604084013590509250925092565b600080600080600080600060e0888a0312156114f357600080fd5b6114fc8861142b565b965061150a6020890161142b565b95506040880135945060608801359350608088013560ff8116811461152e57600080fd5b9699959850939692959460a0840135945060c09093013592915050565b6000806040838503121561155e57600080fd5b6115678361142b565b946020939093013593505050565b600060208083528351808285015260005b818110156115a257858101830151858201604001528201611586565b818111156115b4576000604083870101525b50601f01601f1916929092016040019392505050565b600082198211156115dd576115dd61162e565b500190565b6000828210156115f4576115f461162e565b500390565b600181811c9082168061160d57607f821691505b602082108114156110b657634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fdfea26469706673582212208bf71d9ddf309d88a97b8c028826275a9599d3cdb2db5b0547bfe39a71698ac864736f6c6343000807003353796d623a2063616c6c6572206973206e6f74207468652073796e74686573697353796d623a20746f6b656e20726570726573656e746174696f6e20616c726561647920657869737473a2646970667358221220a60cf18f476b01d9b1b1871bf88e40a4dd9d1fdce6e06b6bc111cfbb8e5d045264736f6c63430008070033';

var isSuperArgs$4 = function isSuperArgs(xs) {
  return xs.length > 1;
};

var Fabric__factory = /*#__PURE__*/function (_ContractFactory) {
  _inheritsLoose(Fabric__factory, _ContractFactory);

  function Fabric__factory() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    if (isSuperArgs$4(args)) {
      _this = _ContractFactory.call.apply(_ContractFactory, [this].concat(args)) || this;
      _this.contractName = void 0;
    } else {
      _this = _ContractFactory.call(this, _abi$b, _bytecode$4, args[0]) || this;
      _this.contractName = void 0;
    }

    _this.contractName = 'Fabric';
    return _assertThisInitialized(_this);
  }

  var _proto = Fabric__factory.prototype;

  _proto.deploy = function deploy(overrides) {
    return _ContractFactory.prototype.deploy.call(this, overrides || {});
  };

  _proto.getDeployTransaction = function getDeployTransaction(overrides) {
    return _ContractFactory.prototype.getDeployTransaction.call(this, overrides || {});
  };

  _proto.attach = function attach(address) {
    return _ContractFactory.prototype.attach.call(this, address);
  };

  _proto.connect = function connect(signer) {
    return _ContractFactory.prototype.connect.call(this, signer);
  };

  Fabric__factory.createInterface = function createInterface() {
    return new ethers.utils.Interface(_abi$b);
  };

  Fabric__factory.connect = function connect(address, signerOrProvider) {
    return new ethers.Contract(address, _abi$b, signerOrProvider);
  };

  return Fabric__factory;
}(ethers.ContractFactory);
Fabric__factory.contractName = void 0;
Fabric__factory.bytecode = _bytecode$4;
Fabric__factory.abi = _abi$b;

var _abi$a = [{
  inputs: [],
  stateMutability: 'nonpayable',
  type: 'constructor'
}, {
  inputs: [{
    internalType: 'address',
    name: '_token',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: '_amount',
    type: 'uint256'
  }, {
    internalType: 'address',
    name: '_receiveSide',
    type: 'address'
  }, {
    internalType: 'bytes',
    name: '_calldata',
    type: 'bytes'
  }, {
    internalType: 'uint256',
    name: '_offset',
    type: 'uint256'
  }],
  name: 'externalCall',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    components: [{
      internalType: 'uint256',
      name: 'stableBridgingFee',
      type: 'uint256'
    }, {
      internalType: 'uint256',
      name: 'amount',
      type: 'uint256'
    }, {
      internalType: 'bytes32',
      name: 'externalID',
      type: 'bytes32'
    }, {
      internalType: 'address',
      name: 'tokenReal',
      type: 'address'
    }, {
      internalType: 'uint256',
      name: 'chainID',
      type: 'uint256'
    }, {
      internalType: 'address',
      name: 'to',
      type: 'address'
    }, {
      internalType: 'address[]',
      name: 'swapTokens',
      type: 'address[]'
    }, {
      internalType: 'address',
      name: 'secondDexRouter',
      type: 'address'
    }, {
      internalType: 'bytes',
      name: 'secondSwapCalldata',
      type: 'bytes'
    }, {
      internalType: 'address',
      name: 'finalReceiveSide',
      type: 'address'
    }, {
      internalType: 'bytes',
      name: 'finalCalldata',
      type: 'bytes'
    }, {
      internalType: 'uint256',
      name: 'finalOffset',
      type: 'uint256'
    }],
    internalType: 'struct MetaRouteStructs.MetaMintTransaction',
    name: '_metaMintTransaction',
    type: 'tuple'
  }],
  name: 'metaMintSwap',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    components: [{
      internalType: 'bytes',
      name: 'firstSwapCalldata',
      type: 'bytes'
    }, {
      internalType: 'bytes',
      name: 'secondSwapCalldata',
      type: 'bytes'
    }, {
      internalType: 'address[]',
      name: 'approvedTokens',
      type: 'address[]'
    }, {
      internalType: 'address',
      name: 'firstDexRouter',
      type: 'address'
    }, {
      internalType: 'address',
      name: 'secondDexRouter',
      type: 'address'
    }, {
      internalType: 'uint256',
      name: 'amount',
      type: 'uint256'
    }, {
      internalType: 'bool',
      name: 'nativeIn',
      type: 'bool'
    }, {
      internalType: 'address',
      name: 'relayRecipient',
      type: 'address'
    }, {
      internalType: 'bytes',
      name: 'otherSideCalldata',
      type: 'bytes'
    }],
    internalType: 'struct MetaRouteStructs.MetaRouteTransaction',
    name: '_metarouteTransaction',
    type: 'tuple'
  }],
  name: 'metaRoute',
  outputs: [],
  stateMutability: 'payable',
  type: 'function'
}, {
  inputs: [],
  name: 'metaRouterGateway',
  outputs: [{
    internalType: 'contract MetaRouterGateway',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}];
var _bytecode$3 = '0x60a060405234801561001057600080fd5b503060405161001e90610060565b6001600160a01b039091168152602001604051809103906000f08015801561004a573d6000803e3d6000fd5b5060601b6001600160601b03191660805261006d565b6104d78061187d83390190565b60805160601c6117d06100ad60003960008181606b0152818161011a0152818161027a015281816105500152818161081a0152610fca01526117d06000f3fe60806040526004361061003f5760003560e01c8063a11b119814610044578063c394a5da14610059578063e1edd61c146100a9578063e1ee0f79146100c9575b600080fd5b61005761005236600461159a565b6100e9565b005b34801561006557600080fd5b5061008d7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200160405180910390f35b3480156100b557600080fd5b506100576100c436600461155e565b610944565b3480156100d557600080fd5b506100576100e43660046113ca565b610e24565b60006100f8604083018361164e565b915061010c905060e0830160c08401611470565b6101f6576001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016639fc314c861014c604085018561164e565b600081811061015d5761015d61173b565b905060200201602081019061017291906113af565b336040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b0392831660048201529116602482015260a08501356044820152606401600060405180830381600087803b1580156101dd57600080fd5b505af11580156101f1573d6000803e3d6000fd5b505050505b60a0820135610205838061169f565b1590506104905761021c60e0840160c08501611470565b61027057610270610230604085018561164e565b60008181106102415761024161173b565b905060200201602081019061025691906113af565b61026660808601606087016113af565b8560a00135610ebd565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166102aa60808501606086016113af565b6001600160a01b031614156103065760405162461bcd60e51b815260206004820181905260248201527f4d657461526f757465723a20696e76616c696420666972737420726f7574657260448201526064015b60405180910390fd5b60008061031960808601606087016113af565b6001600160a01b03163461032d878061169f565b60405161033b9291906115ef565b60006040518083038185875af1925050503d8060008114610378576040519150601f19603f3d011682016040523d82523d6000602084013e61037d565b606091505b5091509150816103df576103c6816040518060400160405280601d81526020017f4d657461526f757465723a2066697273742073776170206661696c6564000000815250610f8e565b60405162461bcd60e51b81526004016102fd919061161b565b6103ec604086018661164e565b60018181106103fd576103fd61173b565b905060200201602081019061041291906113af565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b15801561045357600080fd5b505afa158015610467573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048b91906115d6565b925050505b8061049e602085018561169f565b15905061076d5760006104b4602086018661169f565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505050606481018490529050610546610501604087018761164e565b61050c6002886116e6565b81811061051b5761051b61173b565b905060200201602081019061053091906113af565b61054060a08801608089016113af565b85610ebd565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001661058060a08701608088016113af565b6001600160a01b031614156105fd5760405162461bcd60e51b815260206004820152602160248201527f4d657461526f757465723a20696e76616c6964207365636f6e6420726f75746560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084016102fd565b60008061061060a08801608089016113af565b6001600160a01b03168360405161062791906115ff565b6000604051808303816000865af19150503d8060008114610664576040519150601f19603f3d011682016040523d82523d6000602084013e610669565b606091505b5091509150816106b2576103c6816040518060400160405280601e81526020017f4d657461526f757465723a207365636f6e642073776170206661696c65640000815250610f8e565b6106bf604088018861164e565b6106ca6001896116e6565b8181106106d9576106d961173b565b90506020020160208101906106ee91906113af565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b15801561072f57600080fd5b505afa158015610743573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076791906115d6565b93505050505b6107c361077d604086018661164e565b6107886001876116e6565b8181106107975761079761173b565b90506020020160208101906107ac91906113af565b6107bd610100870160e088016113af565b83610ebd565b60006107d361010086018661169f565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050506064810183905290506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001661084b610100870160e088016113af565b6001600160a01b031614156108a25760405162461bcd60e51b815260206004820152601d60248201527f4d657461526f757465723a20696e76616c696420726563697069656e7400000060448201526064016102fd565b6000806108b6610100880160e089016113af565b6001600160a01b0316836040516108cd91906115ff565b6000604051808303816000865af19150503d806000811461090a576040519150601f19603f3d011682016040523d82523d6000602084013e61090f565b606091505b50915091508161093b576103c68160405180606001604052806022815260200161177960229139610f8e565b50505050505050565b600061095360c083018361164e565b60008181106109645761096461173b565b905060200201602081019061097991906113af565b905061098961010083018361169f565b159050610bc557600080610a2a6109a360c086018661164e565b60008181106109b4576109b461173b565b90506020020160208101906109c991906113af565b60208601356109df610100880160e089016113af565b6109ed61010089018961169f565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525060649250610fc4915050565b9150915081610a72576103c6816040518060400160405280602081526020017f4d657461526f757465723a20696e7465726e616c2073776170206661696c6564815250610f8e565b6000610a8160c086018661164e565b6001818110610a9257610a9261173b565b9050602002016020810190610aa791906113af565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b158015610ae857600080fd5b505afa158015610afc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2091906115d6565b9050610b2f60c086018661164e565b905060021415610b8c57610b85610b4960c087018761164e565b6001818110610b5a57610b5a61173b565b9050602002016020810190610b6f91906113af565b610b7f60c0880160a089016113af565b836110c3565b5050505050565b610b9960c086018661164e565b6001818110610baa57610baa61173b565b9050602002016020810190610bbf91906113af565b93505050505b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a082319060240160206040518083038186803b158015610c0757600080fd5b505afa158015610c1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3f91906115d6565b9050600080610ca88484610c5b61014089016101208a016113af565b610c696101408a018a61169f565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050506101608a0135610fc4565b9150915081610cf0576103c6816040518060400160405280601d81526020017f4d657461526f757465723a2066696e616c2063616c6c206661696c6564000000815250610f8e565b6000610cff60c087018761164e565b6001610d0e60c08a018a61164e565b610d199291506116e6565b818110610d2857610d2861173b565b9050602002016020810190610d3d91906113af565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b158015610d7e57600080fd5b505afa158015610d92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db691906115d6565b90508015610e1c57610e1c610dce60c088018861164e565b6001610ddd60c08b018b61164e565b610de89291506116e6565b818110610df757610df761173b565b9050602002016020810190610e0c91906113af565b610b7f60c0890160a08a016113af565b505050505050565b600080610e6b88888888888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a9250610fc4915050565b9150915081610eb3576103c6816040518060400160405280602081526020017f4d657461526f757465723a2065787465726e616c2063616c6c206661696c6564815250610f8e565b5050505050505050565b6040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03838116602483015282919085169063dd62ed3e9060440160206040518083038186803b158015610f2057600080fd5b505afa158015610f34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5891906115d6565b1015610f8957610f8983837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61122b565b505050565b6060604483511015610fa1575080610fbe565b60048301925082806020019051810190610fbb91906114b1565b90505b92915050565b600060607f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316856001600160a01b0316141561104a5760405162461bcd60e51b815260206004820152601f60248201527f4d657461526f757465723a20696e76616c69642072656365697665536964650060448201526064016102fd565b611055878688610ebd565b8583850152846001600160a01b03168460405161107291906115ff565b6000604051808303816000865af19150503d80600081146110af576040519150601f19603f3d011682016040523d82523d6000602084013e6110b4565b606091505b50909890975095505050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052915160009283929087169161114d91906115ff565b6000604051808303816000865af19150503d806000811461118a576040519150601f19603f3d011682016040523d82523d6000602084013e61118f565b606091505b50915091508180156111b95750805115806111b95750808060200190518101906111b99190611494565b610b855760405162461bcd60e51b815260206004820152602d60248201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260448201527f616e73666572206661696c65640000000000000000000000000000000000000060648201526084016102fd565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b30000000000000000000000000000000000000000000000000000000017905291516000928392908716916112b591906115ff565b6000604051808303816000865af19150503d80600081146112f2576040519150601f19603f3d011682016040523d82523d6000602084013e6112f7565b606091505b50915091508180156113215750805115806113215750808060200190518101906113219190611494565b610b855760405162461bcd60e51b815260206004820152602b60248201527f5472616e7366657248656c7065723a3a73616665417070726f76653a2061707060448201527f726f7665206661696c656400000000000000000000000000000000000000000060648201526084016102fd565b80356001600160a01b03811681146113aa57600080fd5b919050565b6000602082840312156113c157600080fd5b610fbb82611393565b60008060008060008060a087890312156113e357600080fd5b6113ec87611393565b95506020870135945061140160408801611393565b9350606087013567ffffffffffffffff8082111561141e57600080fd5b818901915089601f83011261143257600080fd5b81358181111561144157600080fd5b8a602082850101111561145357600080fd5b602083019550809450505050608087013590509295509295509295565b60006020828403121561148257600080fd5b813561148d81611767565b9392505050565b6000602082840312156114a657600080fd5b815161148d81611767565b6000602082840312156114c357600080fd5b815167ffffffffffffffff808211156114db57600080fd5b818401915084601f8301126114ef57600080fd5b81518181111561150157611501611751565b604051601f8201601f19908116603f0116810190838211818310171561152957611529611751565b8160405282815287602084870101111561154257600080fd5b61155383602083016020880161170b565b979650505050505050565b60006020828403121561157057600080fd5b813567ffffffffffffffff81111561158757600080fd5b8201610180818503121561148d57600080fd5b6000602082840312156115ac57600080fd5b813567ffffffffffffffff8111156115c357600080fd5b8201610120818503121561148d57600080fd5b6000602082840312156115e857600080fd5b5051919050565b8183823760009101908152919050565b6000825161161181846020870161170b565b9190910192915050565b602081526000825180602084015261163a81604085016020870161170b565b601f01601f19169190910160400192915050565b6000808335601e1984360301811261166557600080fd5b83018035915067ffffffffffffffff82111561168057600080fd5b6020019150600581901b360382131561169857600080fd5b9250929050565b6000808335601e198436030181126116b657600080fd5b83018035915067ffffffffffffffff8211156116d157600080fd5b60200191503681900382131561169857600080fd5b60008282101561170657634e487b7160e01b600052601160045260246000fd5b500390565b60005b8381101561172657818101518382015260200161170e565b83811115611735576000848401525b50505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b801515811461177557600080fd5b5056fe4d657461526f757465723a206f7468657220736964652063616c6c206661696c6564a2646970667358221220502872347c342f925498eb2bf11749d567432be2b896db6e23b339d98ac39ccf64736f6c6343000807003360a060405234801561001057600080fd5b506040516104d73803806104d783398101604081905261002f91610044565b60601b6001600160601b031916608052610074565b60006020828403121561005657600080fd5b81516001600160a01b038116811461006d57600080fd5b9392505050565b60805160601c61043961009e6000396000818160550152818160a2015261017101526104396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80639fc314c81461003b578063dbec15bb14610050575b600080fd5b61004e610049366004610363565b6100a0565b005b6100777f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16331461016a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f53796d623a2063616c6c6572206973206e6f7420746865206d657461726f757460448201527f657200000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61019683837f00000000000000000000000000000000000000000000000000000000000000008461019b565b505050565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052915160009283929088169161023a91906103c8565b6000604051808303816000865af19150503d8060008114610277576040519150601f19603f3d011682016040523d82523d6000602084013e61027c565b606091505b50915091508180156102a65750805115806102a65750808060200190518101906102a6919061039f565b610332576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260448201527f616e7366657246726f6d206661696c65640000000000000000000000000000006064820152608401610161565b505050505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461035e57600080fd5b919050565b60008060006060848603121561037857600080fd5b6103818461033a565b925061038f6020850161033a565b9150604084013590509250925092565b6000602082840312156103b157600080fd5b815180151581146103c157600080fd5b9392505050565b6000825160005b818110156103e957602081860181015185830152016103cf565b818111156103f8576000828501525b50919091019291505056fea26469706673582212202568575dd38d51c811ca9abb487d12cf7f92601b834f2b8dba043bc452c3f35164736f6c63430008070033';

var isSuperArgs$3 = function isSuperArgs(xs) {
  return xs.length > 1;
};

var MetaRouter__factory = /*#__PURE__*/function (_ContractFactory) {
  _inheritsLoose(MetaRouter__factory, _ContractFactory);

  function MetaRouter__factory() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    if (isSuperArgs$3(args)) {
      _this = _ContractFactory.call.apply(_ContractFactory, [this].concat(args)) || this;
      _this.contractName = void 0;
    } else {
      _this = _ContractFactory.call(this, _abi$a, _bytecode$3, args[0]) || this;
      _this.contractName = void 0;
    }

    _this.contractName = 'MetaRouter';
    return _assertThisInitialized(_this);
  }

  var _proto = MetaRouter__factory.prototype;

  _proto.deploy = function deploy(overrides) {
    return _ContractFactory.prototype.deploy.call(this, overrides || {});
  };

  _proto.getDeployTransaction = function getDeployTransaction(overrides) {
    return _ContractFactory.prototype.getDeployTransaction.call(this, overrides || {});
  };

  _proto.attach = function attach(address) {
    return _ContractFactory.prototype.attach.call(this, address);
  };

  _proto.connect = function connect(signer) {
    return _ContractFactory.prototype.connect.call(this, signer);
  };

  MetaRouter__factory.createInterface = function createInterface() {
    return new ethers.utils.Interface(_abi$a);
  };

  MetaRouter__factory.connect = function connect(address, signerOrProvider) {
    return new ethers.Contract(address, _abi$a, signerOrProvider);
  };

  return MetaRouter__factory;
}(ethers.ContractFactory);
MetaRouter__factory.contractName = void 0;
MetaRouter__factory.bytecode = _bytecode$3;
MetaRouter__factory.abi = _abi$a;

/* Autogenerated file. Do not edit manually. */
var _abi$9 = [{
  inputs: [{
    components: [{
      internalType: 'address',
      name: 'target',
      type: 'address'
    }, {
      internalType: 'bytes',
      name: 'callData',
      type: 'bytes'
    }],
    internalType: 'struct Multicall2.Call[]',
    name: 'calls',
    type: 'tuple[]'
  }],
  name: 'aggregate',
  outputs: [{
    internalType: 'uint256',
    name: 'blockNumber',
    type: 'uint256'
  }, {
    internalType: 'bytes[]',
    name: 'returnData',
    type: 'bytes[]'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    components: [{
      internalType: 'address',
      name: 'target',
      type: 'address'
    }, {
      internalType: 'bytes',
      name: 'callData',
      type: 'bytes'
    }],
    internalType: 'struct Multicall2.Call[]',
    name: 'calls',
    type: 'tuple[]'
  }],
  name: 'blockAndAggregate',
  outputs: [{
    internalType: 'uint256',
    name: 'blockNumber',
    type: 'uint256'
  }, {
    internalType: 'bytes32',
    name: 'blockHash',
    type: 'bytes32'
  }, {
    components: [{
      internalType: 'bool',
      name: 'success',
      type: 'bool'
    }, {
      internalType: 'bytes',
      name: 'returnData',
      type: 'bytes'
    }],
    internalType: 'struct Multicall2.Result[]',
    name: 'returnData',
    type: 'tuple[]'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'blockNumber',
    type: 'uint256'
  }],
  name: 'getBlockHash',
  outputs: [{
    internalType: 'bytes32',
    name: 'blockHash',
    type: 'bytes32'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'getBlockNumber',
  outputs: [{
    internalType: 'uint256',
    name: 'blockNumber',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'getCurrentBlockCoinbase',
  outputs: [{
    internalType: 'address',
    name: 'coinbase',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'getCurrentBlockDifficulty',
  outputs: [{
    internalType: 'uint256',
    name: 'difficulty',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'getCurrentBlockGasLimit',
  outputs: [{
    internalType: 'uint256',
    name: 'gaslimit',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'getCurrentBlockTimestamp',
  outputs: [{
    internalType: 'uint256',
    name: 'timestamp',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'addr',
    type: 'address'
  }],
  name: 'getEthBalance',
  outputs: [{
    internalType: 'uint256',
    name: 'balance',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'getLastBlockHash',
  outputs: [{
    internalType: 'bytes32',
    name: 'blockHash',
    type: 'bytes32'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'bool',
    name: 'requireSuccess',
    type: 'bool'
  }, {
    components: [{
      internalType: 'address',
      name: 'target',
      type: 'address'
    }, {
      internalType: 'bytes',
      name: 'callData',
      type: 'bytes'
    }],
    internalType: 'struct Multicall2.Call[]',
    name: 'calls',
    type: 'tuple[]'
  }],
  name: 'tryAggregate',
  outputs: [{
    components: [{
      internalType: 'bool',
      name: 'success',
      type: 'bool'
    }, {
      internalType: 'bytes',
      name: 'returnData',
      type: 'bytes'
    }],
    internalType: 'struct Multicall2.Result[]',
    name: 'returnData',
    type: 'tuple[]'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'bool',
    name: 'requireSuccess',
    type: 'bool'
  }, {
    components: [{
      internalType: 'address',
      name: 'target',
      type: 'address'
    }, {
      internalType: 'bytes',
      name: 'callData',
      type: 'bytes'
    }],
    internalType: 'struct Multicall2.Call[]',
    name: 'calls',
    type: 'tuple[]'
  }],
  name: 'tryBlockAndAggregate',
  outputs: [{
    internalType: 'uint256',
    name: 'blockNumber',
    type: 'uint256'
  }, {
    internalType: 'bytes32',
    name: 'blockHash',
    type: 'bytes32'
  }, {
    components: [{
      internalType: 'bool',
      name: 'success',
      type: 'bool'
    }, {
      internalType: 'bytes',
      name: 'returnData',
      type: 'bytes'
    }],
    internalType: 'struct Multicall2.Result[]',
    name: 'returnData',
    type: 'tuple[]'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}];
var Multicall__factory = /*#__PURE__*/function () {
  function Multicall__factory() {}

  Multicall__factory.createInterface = function createInterface() {
    return new ethers.utils.Interface(_abi$9);
  };

  Multicall__factory.connect = function connect(address, signerOrProvider) {
    return new ethers.Contract(address, _abi$9, signerOrProvider);
  };

  return Multicall__factory;
}();
Multicall__factory.abi = _abi$9;

var _abi$8 = [{
  inputs: [{
    internalType: 'uint256',
    name: '_amountIn',
    type: 'uint256'
  }, {
    internalType: 'bytes[]',
    name: '_calldata',
    type: 'bytes[]'
  }, {
    internalType: 'address[]',
    name: '_receiveSides',
    type: 'address[]'
  }, {
    internalType: 'address[]',
    name: '_path',
    type: 'address[]'
  }, {
    internalType: 'uint256[]',
    name: '_offset',
    type: 'uint256[]'
  }, {
    internalType: 'address',
    name: '_to',
    type: 'address'
  }],
  name: 'multicall',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}];
var _bytecode$2 = '0x608060405234801561001057600080fd5b50610de6806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80631e859a0514610030575b600080fd5b61004361003e366004610b54565b610045565b005b6100718360008151811061005b5761005b610c1a565b602002602001015161006a3390565b30896103af565b60005b85518110156102b157600084828151811061009157610091610c1a565b60209081029190910101516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015610107573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061012b9190610c30565b9050600087838151811061014157610141610c1a565b60200260200101519050600085848151811061015f5761015f610c1a565b6020026020010151905082818301526101ab87858151811061018357610183610c1a565b602002602001015189868151811061019d5761019d610c1a565b602002602001015185610534565b6000808986815181106101c0576101c0610c1a565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16846040516101ec9190610c79565b6000604051808303816000865af19150503d8060008114610229576040519150601f19603f3d011682016040523d82523d6000602084013e61022e565b606091505b50915091508161029957610277816040518060400160405280601c81526020017f4d756c746963616c6c526f757465723a2063616c6c206661696c6564000000008152506105e5565b60405162461bcd60e51b81526004016102909190610c95565b60405180910390fd5b505050505080806102a990610cde565b915050610074565b50600083600185516102c39190610cf9565b815181106102d3576102d3610c1a565b60209081029190910101516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015610349573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036d9190610c30565b905080156103a6576103a684600186516103879190610cf9565b8151811061039757610397610c1a565b6020026020010151838361061b565b50505050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052915160009283929088169161044e9190610c79565b6000604051808303816000865af19150503d806000811461048b576040519150601f19603f3d011682016040523d82523d6000602084013e610490565b606091505b50915091508180156104ba5750805115806104ba5750808060200190518101906104ba9190610d10565b61052c5760405162461bcd60e51b815260206004820152603160248201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260448201527f616e7366657246726f6d206661696c65640000000000000000000000000000006064820152608401610290565b505050505050565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff838116602483015282919085169063dd62ed3e90604401602060405180830381865afa1580156105a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105cd9190610c30565b10156105e0576105e08383600019610797565b505050565b60606044835110156105f8575080610615565b600483019250828060200190518101906106129190610d39565b90505b92915050565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905291516000928392908716916106b29190610c79565b6000604051808303816000865af19150503d80600081146106ef576040519150601f19603f3d011682016040523d82523d6000602084013e6106f4565b606091505b509150915081801561071e57508051158061071e57508080602001905181019061071e9190610d10565b6107905760405162461bcd60e51b815260206004820152602d60248201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260448201527f616e73666572206661696c6564000000000000000000000000000000000000006064820152608401610290565b5050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b300000000000000000000000000000000000000000000000000000000179052915160009283929087169161082e9190610c79565b6000604051808303816000865af19150503d806000811461086b576040519150601f19603f3d011682016040523d82523d6000602084013e610870565b606091505b509150915081801561089a57508051158061089a57508080602001905181019061089a9190610d10565b6107905760405162461bcd60e51b815260206004820152602b60248201527f5472616e7366657248656c7065723a3a73616665417070726f76653a2061707060448201527f726f7665206661696c65640000000000000000000000000000000000000000006064820152608401610290565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561094b5761094b61090c565b604052919050565b600067ffffffffffffffff82111561096d5761096d61090c565b5060051b60200190565b600067ffffffffffffffff8211156109915761099161090c565b50601f01601f191660200190565b600082601f8301126109b057600080fd5b813560206109c56109c083610953565b610922565b82815260059290921b840181019181810190868411156109e457600080fd5b8286015b84811015610a6357803567ffffffffffffffff811115610a085760008081fd5b8701603f81018913610a1a5760008081fd5b848101356040610a2c6109c083610977565b8281528b82848601011115610a415760008081fd5b82828501898301376000928101880192909252508452509183019183016109e8565b509695505050505050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610a9257600080fd5b919050565b600082601f830112610aa857600080fd5b81356020610ab86109c083610953565b82815260059290921b84018101918181019086841115610ad757600080fd5b8286015b84811015610a6357610aec81610a6e565b8352918301918301610adb565b600082601f830112610b0a57600080fd5b81356020610b1a6109c083610953565b82815260059290921b84018101918181019086841115610b3957600080fd5b8286015b84811015610a635780358352918301918301610b3d565b60008060008060008060c08789031215610b6d57600080fd5b86359550602087013567ffffffffffffffff80821115610b8c57600080fd5b610b988a838b0161099f565b96506040890135915080821115610bae57600080fd5b610bba8a838b01610a97565b95506060890135915080821115610bd057600080fd5b610bdc8a838b01610a97565b94506080890135915080821115610bf257600080fd5b50610bff89828a01610af9565b925050610c0e60a08801610a6e565b90509295509295509295565b634e487b7160e01b600052603260045260246000fd5b600060208284031215610c4257600080fd5b5051919050565b60005b83811015610c64578181015183820152602001610c4c565b83811115610c73576000848401525b50505050565b60008251610c8b818460208701610c49565b9190910192915050565b6020815260008251806020840152610cb4816040850160208701610c49565b601f01601f19169190910160400192915050565b634e487b7160e01b600052601160045260246000fd5b6000600019821415610cf257610cf2610cc8565b5060010190565b600082821015610d0b57610d0b610cc8565b500390565b600060208284031215610d2257600080fd5b81518015158114610d3257600080fd5b9392505050565b600060208284031215610d4b57600080fd5b815167ffffffffffffffff811115610d6257600080fd5b8201601f81018413610d7357600080fd5b8051610d816109c082610977565b818152856020838501011115610d9657600080fd5b610da7826020830160208601610c49565b9594505050505056fea264697066735822122093d426beff7768b31552a91402fe54dbd5fff518998f3cc478bad3a1a60f5f8e64736f6c634300080b0033';

var isSuperArgs$2 = function isSuperArgs(xs) {
  return xs.length > 1;
};

var MulticallRouter__factory = /*#__PURE__*/function (_ContractFactory) {
  _inheritsLoose(MulticallRouter__factory, _ContractFactory);

  function MulticallRouter__factory() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    if (isSuperArgs$2(args)) {
      _this = _ContractFactory.call.apply(_ContractFactory, [this].concat(args)) || this;
      _this.contractName = void 0;
    } else {
      _this = _ContractFactory.call(this, _abi$8, _bytecode$2, args[0]) || this;
      _this.contractName = void 0;
    }

    _this.contractName = 'MulticallRouter';
    return _assertThisInitialized(_this);
  }

  var _proto = MulticallRouter__factory.prototype;

  _proto.deploy = function deploy(overrides) {
    return _ContractFactory.prototype.deploy.call(this, overrides || {});
  };

  _proto.getDeployTransaction = function getDeployTransaction(overrides) {
    return _ContractFactory.prototype.getDeployTransaction.call(this, overrides || {});
  };

  _proto.attach = function attach(address) {
    return _ContractFactory.prototype.attach.call(this, address);
  };

  _proto.connect = function connect(signer) {
    return _ContractFactory.prototype.connect.call(this, signer);
  };

  MulticallRouter__factory.createInterface = function createInterface() {
    return new ethers.utils.Interface(_abi$8);
  };

  MulticallRouter__factory.connect = function connect(address, signerOrProvider) {
    return new ethers.Contract(address, _abi$8, signerOrProvider);
  };

  return MulticallRouter__factory;
}(ethers.ContractFactory);
MulticallRouter__factory.contractName = void 0;
MulticallRouter__factory.bytecode = _bytecode$2;
MulticallRouter__factory.abi = _abi$8;

/* Autogenerated file. Do not edit manually. */
var _abi$7 = [{
  inputs: [{
    internalType: 'contract IERC20[]',
    name: '_pooledTokens',
    type: 'address[]'
  }, {
    internalType: 'uint8[]',
    name: 'decimals',
    type: 'uint8[]'
  }, {
    internalType: 'string',
    name: 'lpTokenName',
    type: 'string'
  }, {
    internalType: 'string',
    name: 'lpTokenSymbol',
    type: 'string'
  }, {
    internalType: 'uint256',
    name: '_a',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: '_fee',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: '_adminFee',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: '_depositFee',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: '_withdrawFee',
    type: 'uint256'
  }, {
    internalType: 'address',
    name: '_devaddr',
    type: 'address'
  }],
  stateMutability: 'nonpayable',
  type: 'constructor'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'provider',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256[]',
    name: 'tokenAmounts',
    type: 'uint256[]'
  }, {
    indexed: false,
    internalType: 'uint256[]',
    name: 'fees',
    type: 'uint256[]'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'invariant',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'lpTokenSupply',
    type: 'uint256'
  }],
  name: 'AddLiquidity',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'uint256',
    name: 'newAdminFee',
    type: 'uint256'
  }],
  name: 'NewAdminFee',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'uint256',
    name: 'newDepositFee',
    type: 'uint256'
  }],
  name: 'NewDepositFee',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'uint256',
    name: 'newSwapFee',
    type: 'uint256'
  }],
  name: 'NewSwapFee',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'uint256',
    name: 'newWithdrawFee',
    type: 'uint256'
  }],
  name: 'NewWithdrawFee',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'previousOwner',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'newOwner',
    type: 'address'
  }],
  name: 'OwnershipTransferred',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'address',
    name: 'account',
    type: 'address'
  }],
  name: 'Paused',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'uint256',
    name: 'oldA',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'newA',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'initialTime',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'futureTime',
    type: 'uint256'
  }],
  name: 'RampA',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'provider',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256[]',
    name: 'tokenAmounts',
    type: 'uint256[]'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'lpTokenSupply',
    type: 'uint256'
  }],
  name: 'RemoveLiquidity',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'provider',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256[]',
    name: 'tokenAmounts',
    type: 'uint256[]'
  }, {
    indexed: false,
    internalType: 'uint256[]',
    name: 'fees',
    type: 'uint256[]'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'invariant',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'lpTokenSupply',
    type: 'uint256'
  }],
  name: 'RemoveLiquidityImbalance',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'provider',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'lpTokenAmount',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'lpTokenSupply',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'boughtId',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'tokensBought',
    type: 'uint256'
  }],
  name: 'RemoveLiquidityOne',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'uint256',
    name: 'currentA',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'time',
    type: 'uint256'
  }],
  name: 'StopRampA',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'buyer',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'tokensSold',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'tokensBought',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint128',
    name: 'soldId',
    type: 'uint128'
  }, {
    indexed: false,
    internalType: 'uint128',
    name: 'boughtId',
    type: 'uint128'
  }],
  name: 'TokenSwap',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'address',
    name: 'account',
    type: 'address'
  }],
  name: 'Unpaused',
  type: 'event'
}, {
  inputs: [{
    internalType: 'uint256[]',
    name: 'amounts',
    type: 'uint256[]'
  }, {
    internalType: 'uint256',
    name: 'minToMint',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'deadline',
    type: 'uint256'
  }],
  name: 'addLiquidity',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'user',
    type: 'address'
  }],
  name: 'calculateCurrentWithdrawFee',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'account',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }],
  name: 'calculateRemoveLiquidity',
  outputs: [{
    internalType: 'uint256[]',
    name: '',
    type: 'uint256[]'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'account',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'tokenAmount',
    type: 'uint256'
  }, {
    internalType: 'uint8',
    name: 'tokenIndex',
    type: 'uint8'
  }],
  name: 'calculateRemoveLiquidityOneToken',
  outputs: [{
    internalType: 'uint256',
    name: 'availableTokenAmount',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint8',
    name: 'tokenIndexFrom',
    type: 'uint8'
  }, {
    internalType: 'uint8',
    name: 'tokenIndexTo',
    type: 'uint8'
  }, {
    internalType: 'uint256',
    name: 'dx',
    type: 'uint256'
  }],
  name: 'calculateSwap',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'account',
    type: 'address'
  }, {
    internalType: 'uint256[]',
    name: 'amounts',
    type: 'uint256[]'
  }, {
    internalType: 'bool',
    name: 'deposit',
    type: 'bool'
  }],
  name: 'calculateTokenAmount',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'getA',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'getAPrecise',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'index',
    type: 'uint256'
  }],
  name: 'getAdminBalance',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'user',
    type: 'address'
  }],
  name: 'getDepositTimestamp',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint8',
    name: 'index',
    type: 'uint8'
  }],
  name: 'getToken',
  outputs: [{
    internalType: 'contract IERC20',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint8',
    name: 'index',
    type: 'uint8'
  }],
  name: 'getTokenBalance',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'tokenAddress',
    type: 'address'
  }],
  name: 'getTokenIndex',
  outputs: [{
    internalType: 'uint8',
    name: '',
    type: 'uint8'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'getVirtualPrice',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'owner',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'pause',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'paused',
  outputs: [{
    internalType: 'bool',
    name: '',
    type: 'bool'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'futureA',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'futureTime',
    type: 'uint256'
  }],
  name: 'rampA',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }, {
    internalType: 'uint256[]',
    name: 'minAmounts',
    type: 'uint256[]'
  }, {
    internalType: 'uint256',
    name: 'deadline',
    type: 'uint256'
  }],
  name: 'removeLiquidity',
  outputs: [{
    internalType: 'uint256[]',
    name: '',
    type: 'uint256[]'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256[]',
    name: 'amounts',
    type: 'uint256[]'
  }, {
    internalType: 'uint256',
    name: 'maxBurnAmount',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'deadline',
    type: 'uint256'
  }],
  name: 'removeLiquidityImbalance',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'tokenAmount',
    type: 'uint256'
  }, {
    internalType: 'uint8',
    name: 'tokenIndex',
    type: 'uint8'
  }, {
    internalType: 'uint256',
    name: 'minAmount',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'deadline',
    type: 'uint256'
  }],
  name: 'removeLiquidityOneToken',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'renounceOwnership',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'newAdminFee',
    type: 'uint256'
  }],
  name: 'setAdminFee',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'newDepositFee',
    type: 'uint256'
  }],
  name: 'setDefaultDepositFee',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'newWithdrawFee',
    type: 'uint256'
  }],
  name: 'setDefaultWithdrawFee',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: '_devaddr',
    type: 'address'
  }],
  name: 'setDevAddress',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'newSwapFee',
    type: 'uint256'
  }],
  name: 'setSwapFee',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'stopRampA',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint8',
    name: 'tokenIndexFrom',
    type: 'uint8'
  }, {
    internalType: 'uint8',
    name: 'tokenIndexTo',
    type: 'uint8'
  }, {
    internalType: 'uint256',
    name: 'dx',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'minDy',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'deadline',
    type: 'uint256'
  }],
  name: 'swap',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'swapStorage',
  outputs: [{
    internalType: 'uint256',
    name: 'initialA',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'futureA',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'initialATime',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'futureATime',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'swapFee',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'adminFee',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'defaultDepositFee',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'defaultWithdrawFee',
    type: 'uint256'
  }, {
    internalType: 'address',
    name: 'devaddr',
    type: 'address'
  }, {
    internalType: 'contract LPToken',
    name: 'lpToken',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'newOwner',
    type: 'address'
  }],
  name: 'transferOwnership',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'unpause',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'recipient',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'transferAmount',
    type: 'uint256'
  }],
  name: 'updateUserWithdrawFee',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'withdrawAdminFees',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}];
var NervePool__factory = /*#__PURE__*/function () {
  function NervePool__factory() {}

  NervePool__factory.createInterface = function createInterface() {
    return new ethers.utils.Interface(_abi$7);
  };

  NervePool__factory.connect = function connect(address, signerOrProvider) {
    return new ethers.Contract(address, _abi$7, signerOrProvider);
  };

  return NervePool__factory;
}();
NervePool__factory.abi = _abi$7;

/* Autogenerated file. Do not edit manually. */
var _abi$6 = [{
  inputs: [{
    internalType: 'contract MultiWrapper',
    name: '_multiWrapper',
    type: 'address'
  }, {
    internalType: 'contract IOracle[]',
    name: 'existingOracles',
    type: 'address[]'
  }, {
    internalType: 'enum OffchainOracle.OracleType[]',
    name: 'oracleTypes',
    type: 'uint8[]'
  }, {
    internalType: 'contract IERC20[]',
    name: 'existingConnectors',
    type: 'address[]'
  }, {
    internalType: 'contract IERC20',
    name: 'wBase',
    type: 'address'
  }],
  stateMutability: 'nonpayable',
  type: 'constructor'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'contract IERC20',
    name: 'connector',
    type: 'address'
  }],
  name: 'ConnectorAdded',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'contract IERC20',
    name: 'connector',
    type: 'address'
  }],
  name: 'ConnectorRemoved',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'contract MultiWrapper',
    name: 'multiWrapper',
    type: 'address'
  }],
  name: 'MultiWrapperUpdated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'contract IOracle',
    name: 'oracle',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'enum OffchainOracle.OracleType',
    name: 'oracleType',
    type: 'uint8'
  }],
  name: 'OracleAdded',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'contract IOracle',
    name: 'oracle',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'enum OffchainOracle.OracleType',
    name: 'oracleType',
    type: 'uint8'
  }],
  name: 'OracleRemoved',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'previousOwner',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'newOwner',
    type: 'address'
  }],
  name: 'OwnershipTransferred',
  type: 'event'
}, {
  inputs: [{
    internalType: 'contract IERC20',
    name: 'connector',
    type: 'address'
  }],
  name: 'addConnector',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract IOracle',
    name: 'oracle',
    type: 'address'
  }, {
    internalType: 'enum OffchainOracle.OracleType',
    name: 'oracleKind',
    type: 'uint8'
  }],
  name: 'addOracle',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'connectors',
  outputs: [{
    internalType: 'contract IERC20[]',
    name: 'allConnectors',
    type: 'address[]'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract IERC20',
    name: 'srcToken',
    type: 'address'
  }, {
    internalType: 'contract IERC20',
    name: 'dstToken',
    type: 'address'
  }, {
    internalType: 'bool',
    name: 'useWrappers',
    type: 'bool'
  }],
  name: 'getRate',
  outputs: [{
    internalType: 'uint256',
    name: 'weightedRate',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract IERC20',
    name: 'srcToken',
    type: 'address'
  }, {
    internalType: 'bool',
    name: 'useSrcWrappers',
    type: 'bool'
  }],
  name: 'getRateToEth',
  outputs: [{
    internalType: 'uint256',
    name: 'weightedRate',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'multiWrapper',
  outputs: [{
    internalType: 'contract MultiWrapper',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'oracles',
  outputs: [{
    internalType: 'contract IOracle[]',
    name: 'allOracles',
    type: 'address[]'
  }, {
    internalType: 'enum OffchainOracle.OracleType[]',
    name: 'oracleTypes',
    type: 'uint8[]'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'owner',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract IERC20',
    name: 'connector',
    type: 'address'
  }],
  name: 'removeConnector',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract IOracle',
    name: 'oracle',
    type: 'address'
  }, {
    internalType: 'enum OffchainOracle.OracleType',
    name: 'oracleKind',
    type: 'uint8'
  }],
  name: 'removeOracle',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'renounceOwnership',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract MultiWrapper',
    name: '_multiWrapper',
    type: 'address'
  }],
  name: 'setMultiWrapper',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'newOwner',
    type: 'address'
  }],
  name: 'transferOwnership',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}];
var OneInchOracle__factory = /*#__PURE__*/function () {
  function OneInchOracle__factory() {}

  OneInchOracle__factory.createInterface = function createInterface() {
    return new ethers.utils.Interface(_abi$6);
  };

  OneInchOracle__factory.connect = function connect(address, signerOrProvider) {
    return new ethers.Contract(address, _abi$6, signerOrProvider);
  };

  return OneInchOracle__factory;
}();
OneInchOracle__factory.abi = _abi$6;

/* Autogenerated file. Do not edit manually. */
var _abi$5 = [{
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'owner',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'spender',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'value',
    type: 'uint256'
  }],
  name: 'Approval',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'sender',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'amount0',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'amount1',
    type: 'uint256'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'to',
    type: 'address'
  }],
  name: 'Burn',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'sender',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'amount0',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'amount1',
    type: 'uint256'
  }],
  name: 'Mint',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'sender',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'amount0In',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'amount1In',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'amount0Out',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'amount1Out',
    type: 'uint256'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'to',
    type: 'address'
  }],
  name: 'Swap',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'uint112',
    name: 'reserve0',
    type: 'uint112'
  }, {
    indexed: false,
    internalType: 'uint112',
    name: 'reserve1',
    type: 'uint112'
  }],
  name: 'Sync',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'from',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'value',
    type: 'uint256'
  }],
  name: 'Transfer',
  type: 'event'
}, {
  constant: true,
  inputs: [],
  name: 'DOMAIN_SEPARATOR',
  outputs: [{
    internalType: 'bytes32',
    name: '',
    type: 'bytes32'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'MINIMUM_LIQUIDITY',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'pure',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'PERMIT_TYPEHASH',
  outputs: [{
    internalType: 'bytes32',
    name: '',
    type: 'bytes32'
  }],
  payable: false,
  stateMutability: 'pure',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    internalType: 'address',
    name: 'owner',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'spender',
    type: 'address'
  }],
  name: 'allowance',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'address',
    name: 'spender',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'value',
    type: 'uint256'
  }],
  name: 'approve',
  outputs: [{
    internalType: 'bool',
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    internalType: 'address',
    name: 'owner',
    type: 'address'
  }],
  name: 'balanceOf',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'address',
    name: 'to',
    type: 'address'
  }],
  name: 'burn',
  outputs: [{
    internalType: 'uint256',
    name: 'amount0',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amount1',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'decimals',
  outputs: [{
    internalType: 'uint8',
    name: '',
    type: 'uint8'
  }],
  payable: false,
  stateMutability: 'pure',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'factory',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'getReserves',
  outputs: [{
    internalType: 'uint112',
    name: 'reserve0',
    type: 'uint112'
  }, {
    internalType: 'uint112',
    name: 'reserve1',
    type: 'uint112'
  }, {
    internalType: 'uint32',
    name: 'blockTimestampLast',
    type: 'uint32'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }, {
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  name: 'initialize',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'kLast',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'address',
    name: 'to',
    type: 'address'
  }],
  name: 'mint',
  outputs: [{
    internalType: 'uint256',
    name: 'liquidity',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'name',
  outputs: [{
    internalType: 'string',
    name: '',
    type: 'string'
  }],
  payable: false,
  stateMutability: 'pure',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    internalType: 'address',
    name: 'owner',
    type: 'address'
  }],
  name: 'nonces',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'address',
    name: 'owner',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'spender',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'value',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'deadline',
    type: 'uint256'
  }, {
    internalType: 'uint8',
    name: 'v',
    type: 'uint8'
  }, {
    internalType: 'bytes32',
    name: 'r',
    type: 'bytes32'
  }, {
    internalType: 'bytes32',
    name: 's',
    type: 'bytes32'
  }],
  name: 'permit',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'price0CumulativeLast',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'price1CumulativeLast',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'address',
    name: 'to',
    type: 'address'
  }],
  name: 'skim',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'uint256',
    name: 'amount0Out',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amount1Out',
    type: 'uint256'
  }, {
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    internalType: 'bytes',
    name: 'data',
    type: 'bytes'
  }],
  name: 'swap',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'symbol',
  outputs: [{
    internalType: 'string',
    name: '',
    type: 'string'
  }],
  payable: false,
  stateMutability: 'pure',
  type: 'function'
}, {
  constant: false,
  inputs: [],
  name: 'sync',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'token0',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'token1',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'totalSupply',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'value',
    type: 'uint256'
  }],
  name: 'transfer',
  outputs: [{
    internalType: 'bool',
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    internalType: 'address',
    name: 'from',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'value',
    type: 'uint256'
  }],
  name: 'transferFrom',
  outputs: [{
    internalType: 'bool',
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}];
var Pair__factory = /*#__PURE__*/function () {
  function Pair__factory() {}

  Pair__factory.createInterface = function createInterface() {
    return new ethers.utils.Interface(_abi$5);
  };

  Pair__factory.connect = function connect(address, signerOrProvider) {
    return new ethers.Contract(address, _abi$5, signerOrProvider);
  };

  return Pair__factory;
}();
Pair__factory.abi = _abi$5;

var _abi$4 = [{
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'bytes32',
    name: 'id',
    type: 'bytes32'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'bridgingFee',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'address',
    name: 'token',
    type: 'address'
  }],
  name: 'BurnCompleted',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'bytes32',
    name: 'requestId',
    type: 'bytes32'
  }, {
    indexed: true,
    internalType: 'bytes32',
    name: 'clientId',
    type: 'bytes32'
  }],
  name: 'ClientIdLog',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'previousOwner',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'newOwner',
    type: 'address'
  }],
  name: 'OwnershipTransferred',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'address',
    name: 'account',
    type: 'address'
  }],
  name: 'Paused',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'bytes32',
    name: 'id',
    type: 'bytes32'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'to',
    type: 'address'
  }],
  name: 'RevertBurnRequest',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'bytes32',
    name: 'id',
    type: 'bytes32'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'bridgingFee',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'address',
    name: 'token',
    type: 'address'
  }],
  name: 'RevertSynthesizeCompleted',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'address',
    name: 'metaRouter',
    type: 'address'
  }],
  name: 'SetMetaRouter',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'address',
    name: 'token',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'threshold',
    type: 'uint256'
  }],
  name: 'SetTokenThreshold',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'address',
    name: 'token',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'bool',
    name: 'activate',
    type: 'bool'
  }],
  name: 'SetWhitelistToken',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'bytes32',
    name: 'id',
    type: 'bytes32'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'from',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'uint256',
    name: 'chainID',
    type: 'uint256'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'revertableAddress',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'address',
    name: 'token',
    type: 'address'
  }],
  name: 'SynthesizeRequest',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'address',
    name: 'account',
    type: 'address'
  }],
  name: 'Unpaused',
  type: 'event'
}, {
  inputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  name: 'balanceOf',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'bridge',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: '_bridge',
    type: 'address'
  }, {
    internalType: 'address',
    name: '_trustedForwarder',
    type: 'address'
  }, {
    internalType: 'address',
    name: '_wrapper',
    type: 'address'
  }, {
    internalType: 'address',
    name: '_whitelistedToken',
    type: 'address'
  }, {
    internalType: 'contract IMetaRouter',
    name: '_metaRouter',
    type: 'address'
  }],
  name: 'initialize',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'forwarder',
    type: 'address'
  }],
  name: 'isTrustedForwarder',
  outputs: [{
    internalType: 'bool',
    name: '',
    type: 'bool'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'metaRouter',
  outputs: [{
    internalType: 'contract IMetaRouter',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    components: [{
      internalType: 'uint256',
      name: 'stableBridgingFee',
      type: 'uint256'
    }, {
      internalType: 'uint256',
      name: 'amount',
      type: 'uint256'
    }, {
      internalType: 'address',
      name: 'rtoken',
      type: 'address'
    }, {
      internalType: 'address',
      name: 'chain2address',
      type: 'address'
    }, {
      internalType: 'address',
      name: 'receiveSide',
      type: 'address'
    }, {
      internalType: 'address',
      name: 'oppositeBridge',
      type: 'address'
    }, {
      internalType: 'address',
      name: 'syntCaller',
      type: 'address'
    }, {
      internalType: 'uint256',
      name: 'chainID',
      type: 'uint256'
    }, {
      internalType: 'address[]',
      name: 'swapTokens',
      type: 'address[]'
    }, {
      internalType: 'address',
      name: 'secondDexRouter',
      type: 'address'
    }, {
      internalType: 'bytes',
      name: 'secondSwapCalldata',
      type: 'bytes'
    }, {
      internalType: 'address',
      name: 'finalReceiveSide',
      type: 'address'
    }, {
      internalType: 'bytes',
      name: 'finalCalldata',
      type: 'bytes'
    }, {
      internalType: 'uint256',
      name: 'finalOffset',
      type: 'uint256'
    }, {
      internalType: 'address',
      name: 'revertableAddress',
      type: 'address'
    }, {
      internalType: 'bytes32',
      name: 'clientID',
      type: 'bytes32'
    }],
    internalType: 'struct MetaRouteStructs.MetaSynthesizeTransaction',
    name: '_metaSynthesizeTransaction',
    type: 'tuple'
  }],
  name: 'metaSynthesize',
  outputs: [{
    internalType: 'bytes32',
    name: '',
    type: 'bytes32'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: '_stableBridgingFee',
    type: 'uint256'
  }, {
    internalType: 'bytes32',
    name: '_externalID',
    type: 'bytes32'
  }, {
    internalType: 'address',
    name: '_to',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: '_amount',
    type: 'uint256'
  }, {
    internalType: 'address',
    name: '_rToken',
    type: 'address'
  }, {
    internalType: 'address',
    name: '_finalReceiveSide',
    type: 'address'
  }, {
    internalType: 'bytes',
    name: '_finalCalldata',
    type: 'bytes'
  }, {
    internalType: 'uint256',
    name: '_finalOffset',
    type: 'uint256'
  }],
  name: 'metaUnsynthesize',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'owner',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'pause',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'paused',
  outputs: [{
    internalType: 'bool',
    name: '',
    type: 'bool'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'renounceOwnership',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'requestCount',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'bytes32',
    name: '',
    type: 'bytes32'
  }],
  name: 'requests',
  outputs: [{
    internalType: 'address',
    name: 'recipient',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'chain2address',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }, {
    internalType: 'address',
    name: 'rtoken',
    type: 'address'
  }, {
    internalType: 'enum Portal.RequestState',
    name: 'state',
    type: 'uint8'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: '_stableBridgingFee',
    type: 'uint256'
  }, {
    internalType: 'bytes32',
    name: '_internalID',
    type: 'bytes32'
  }, {
    internalType: 'address',
    name: '_receiveSide',
    type: 'address'
  }, {
    internalType: 'address',
    name: '_oppositeBridge',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: '_chainId',
    type: 'uint256'
  }, {
    internalType: 'bytes32',
    name: '_clientID',
    type: 'bytes32'
  }],
  name: 'revertBurnRequest',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: '_stableBridgingFee',
    type: 'uint256'
  }, {
    internalType: 'bytes32',
    name: '_externalID',
    type: 'bytes32'
  }],
  name: 'revertSynthesize',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract IMetaRouter',
    name: '_metaRouter',
    type: 'address'
  }],
  name: 'setMetaRouter',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: '_token',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: '_threshold',
    type: 'uint256'
  }],
  name: 'setTokenThreshold',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: '_token',
    type: 'address'
  }, {
    internalType: 'bool',
    name: '_activate',
    type: 'bool'
  }],
  name: 'setWhitelistToken',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: '_stableBridgingFee',
    type: 'uint256'
  }, {
    internalType: 'address',
    name: '_token',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: '_amount',
    type: 'uint256'
  }, {
    internalType: 'address',
    name: '_chain2address',
    type: 'address'
  }, {
    internalType: 'address',
    name: '_receiveSide',
    type: 'address'
  }, {
    internalType: 'address',
    name: '_oppositeBridge',
    type: 'address'
  }, {
    internalType: 'address',
    name: '_revertableAddress',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: '_chainID',
    type: 'uint256'
  }, {
    internalType: 'bytes32',
    name: '_clientID',
    type: 'bytes32'
  }],
  name: 'synthesize',
  outputs: [{
    internalType: 'bytes32',
    name: '',
    type: 'bytes32'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: '_stableBridgingFee',
    type: 'uint256'
  }, {
    internalType: 'address',
    name: '_chain2address',
    type: 'address'
  }, {
    internalType: 'address',
    name: '_receiveSide',
    type: 'address'
  }, {
    internalType: 'address',
    name: '_oppositeBridge',
    type: 'address'
  }, {
    internalType: 'address',
    name: '_revertableAddress',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: '_chainID',
    type: 'uint256'
  }, {
    internalType: 'bytes32',
    name: '_clientID',
    type: 'bytes32'
  }],
  name: 'synthesizeNative',
  outputs: [{
    internalType: 'bytes32',
    name: '',
    type: 'bytes32'
  }],
  stateMutability: 'payable',
  type: 'function'
}, {
  inputs: [{
    components: [{
      internalType: 'uint256',
      name: 'stableBridgingFee',
      type: 'uint256'
    }, {
      internalType: 'bytes',
      name: 'approvalData',
      type: 'bytes'
    }, {
      internalType: 'address',
      name: 'token',
      type: 'address'
    }, {
      internalType: 'uint256',
      name: 'amount',
      type: 'uint256'
    }, {
      internalType: 'address',
      name: 'chain2address',
      type: 'address'
    }, {
      internalType: 'address',
      name: 'receiveSide',
      type: 'address'
    }, {
      internalType: 'address',
      name: 'oppositeBridge',
      type: 'address'
    }, {
      internalType: 'address',
      name: 'revertableAddress',
      type: 'address'
    }, {
      internalType: 'uint256',
      name: 'chainID',
      type: 'uint256'
    }, {
      internalType: 'bytes32',
      name: 'clientID',
      type: 'bytes32'
    }],
    internalType: 'struct Portal.SynthesizeWithPermitTransaction',
    name: '_syntWithPermitTx',
    type: 'tuple'
  }],
  name: 'synthesizeWithPermit',
  outputs: [{
    internalType: 'bytes32',
    name: '',
    type: 'bytes32'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  name: 'tokenThreshold',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  name: 'tokenWhitelist',
  outputs: [{
    internalType: 'bool',
    name: '',
    type: 'bool'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'newOwner',
    type: 'address'
  }],
  name: 'transferOwnership',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'unpause',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: '_stableBridgingFee',
    type: 'uint256'
  }, {
    internalType: 'bytes32',
    name: '_externalID',
    type: 'bytes32'
  }, {
    internalType: 'address',
    name: '_token',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: '_amount',
    type: 'uint256'
  }, {
    internalType: 'address',
    name: '_to',
    type: 'address'
  }],
  name: 'unsynthesize',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'bytes32',
    name: '',
    type: 'bytes32'
  }],
  name: 'unsynthesizeStates',
  outputs: [{
    internalType: 'enum Portal.UnsynthesizeState',
    name: '',
    type: 'uint8'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'versionRecipient',
  outputs: [{
    internalType: 'string',
    name: '',
    type: 'string'
  }],
  stateMutability: 'pure',
  type: 'function'
}, {
  inputs: [],
  name: 'wrapper',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}];
var _bytecode$1 = '0x608060405234801561001057600080fd5b5061389d806100206000396000f3fe6080604052600436106101c25760003560e01c80637c374f99116100f7578063c42a289411610095578063eadd5c3411610064578063eadd5c3414610591578063f2fde38b146105b1578063fab92894146105d1578063fb7c7c2a1461060e57600080fd5b8063c42a289414610511578063ce654c1714610531578063dbec15bb14610551578063e78cea921461057157600080fd5b80638da5cb5b116100d15780638da5cb5b146104335780639d86698514610465578063ac210cc7146104d1578063b1659a3c146104f157600080fd5b80637c374f99146103de5780638456cb59146103fe5780638bb398021461041357600080fd5b8063572b6c0511610164578063687752781161013e578063687752781461033f57806370a082311461036c578063715018a614610399578063753d7563146103ae57600080fd5b8063572b6c05146102d05780635badbe4c1461030f5780635c975abb1461032557600080fd5b8063316784f5116101a0578063316784f51461022f5780633f4ba83a1461024f578063486ff0cd146102645780634afbb9f1146102b057600080fd5b806308759e9b146101c75780631459457a146101e95780632816f4db14610209575b600080fd5b3480156101d357600080fd5b506101e76101e23660046132d2565b61062e565b005b3480156101f557600080fd5b506101e7610204366004612e20565b61090b565b61021c61021736600461319e565b610a8e565b6040519081526020015b60405180910390f35b34801561023b57600080fd5b506101e761024a366004613376565b610c3b565b34801561025b57600080fd5b506101e7610f3b565b34801561027057600080fd5b50604080518082018252600581527f322e302e3100000000000000000000000000000000000000000000000000000060208201529051610226919061356b565b3480156102bc57600080fd5b506101e76102cb36600461332e565b611004565b3480156102dc57600080fd5b506102ff6102eb366004612d96565b6065546001600160a01b0391821691161490565b6040519015158152602001610226565b34801561031b57600080fd5b5061021c60685481565b34801561033157600080fd5b506069546102ff9060ff1681565b34801561034b57600080fd5b5061021c61035a366004612d96565b606d6020526000908152604090205481565b34801561037857600080fd5b5061021c610387366004612d96565b606c6020526000908152604090205481565b3480156103a557600080fd5b506101e761121c565b3480156103ba57600080fd5b506102ff6103c9366004612d96565b606e6020526000908152604090205460ff1681565b3480156103ea57600080fd5b506101e76103f9366004612e91565b6112a1565b34801561040a57600080fd5b506101e761137e565b34801561041f57600080fd5b506101e761042e366004612eca565b61142d565b34801561043f57600080fd5b506033546001600160a01b03165b6040516001600160a01b039091168152602001610226565b34801561047157600080fd5b506104c0610480366004612f13565b606a6020526000908152604090208054600182015460028301546003909301546001600160a01b039283169391831692811690600160a01b900460ff1685565b60405161022695949392919061349e565b3480156104dd57600080fd5b5060665461044d906001600160a01b031681565b3480156104fd57600080fd5b5061021c61050c366004613218565b6114f7565b34801561051d57600080fd5b506101e761052c3660046132b0565b61163e565b34801561053d57600080fd5b5061021c61054c366004612f2c565b6118bf565b34801561055d57600080fd5b50606f5461044d906001600160a01b031681565b34801561057d57600080fd5b5060675461044d906001600160a01b031681565b34801561059d57600080fd5b506101e76105ac366004612d96565b611a0b565b3480156105bd57600080fd5b506101e76105cc366004612d96565b611b61565b3480156105dd57600080fd5b506106016105ec366004612f13565b606b6020526000908152604090205460ff1681565b6040516102269190613558565b34801561061a57600080fd5b5061021c6106293660046130af565b611c62565b60695460ff16156106755760405162461bcd60e51b815260206004820152600c60248201526b14de5b588e881c185d5cd95960a21b60448201526064015b60405180910390fd5b60008530610681611eae565b6040805160208101949094526bffffffffffffffffffffffff19606093841b811691850191909152911b16605482015246606882015260880160408051601f198184030181529190528051602090910120905060016000828152606b602052604090205460ff1660028111156106f9576106f96137b7565b141561076c5760405162461bcd60e51b8152602060048201526024808201527f53796d623a205265616c20746f6b656e7320616c7265616479207472616e736660448201527f6572656400000000000000000000000000000000000000000000000000000000606482015260840161066c565b6000818152606b6020908152604091829020805460ff1916600217905581518083018352601b81527f7265766572744275726e2875696e743235362c62797465733332290000000000908201528151602481018a90526044808201859052835180830390910181526064909101835290810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167ff70519ae000000000000000000000000000000000000000000000000000000001790526067549151633675e4e160e11b815290916001600160a01b031690636cebc9c2906108579084908a908a908a90600401613522565b600060405180830381600087803b15801561087157600080fd5b505af1158015610885573d6000803e3d6000fd5b5050505050610892611eae565b6001600160a01b0316867f40590cc12db0488520ce425059f83f8caed91bdf98de5ff829dc57c63843161b60405160405180910390a3817f5a297b2c9a9f94a0f4e5a796c74ad38e219d1185fccf5f79c18726a830c2b6f5876040516108fa91815260200190565b60405180910390a250505050505050565b600054610100900460ff166109265760005460ff161561092a565b303b155b61099c5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161066c565b600054610100900460ff161580156109db57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b6109e485611ef4565b606780546001600160a01b0380891673ffffffffffffffffffffffffffffffffffffffff199283161790925560668054878416908316179055606f80548584169216919091179055831615610a57576001600160a01b0383166000908152606e60205260409020805460ff191660011790555b8015610a8657600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b505050505050565b60695460009060ff1615610ad35760405162461bcd60e51b815260206004820152600c60248201526b14de5b588e881c185d5cd95960a21b604482015260640161066c565b6066546001600160a01b03166000908152606e602052604090205460ff16610b3d5760405162461bcd60e51b815260206004820152601860248201527f53796d623a20756e617574686f72697a656420746f6b656e0000000000000000604482015260640161066c565b6066546001600160a01b03166000908152606d6020526040902054341015610ba75760405162461bcd60e51b815260206004820152601c60248201527f53796d623a20616d6f756e7420756e646572207468726573686f6c6400000000604482015260640161066c565b606660009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b158015610bf757600080fd5b505af1158015610c0b573d6000803e3d6000fd5b5050606654610c2f93508b92506001600160a01b03169050348a8a8a8a8a8a611f96565b98975050505050505050565b6067546001600160a01b03163314610c955760405162461bcd60e51b815260206004820152601e60248201527f53796d623a2063616c6c6572206973206e6f7420746865206272696467650000604482015260640161066c565b60695460ff1615610cd75760405162461bcd60e51b815260206004820152600c60248201526b14de5b588e881c185d5cd95960a21b604482015260640161066c565b6000878152606b602052604081205460ff166002811115610cfa57610cfa6137b7565b14610d6d5760405162461bcd60e51b815260206004820152602660248201527f53796d623a2073796e74686574696320746f6b656e7320656d657267656e637960448201527f556e6275726e0000000000000000000000000000000000000000000000000000606482015260840161066c565b6001600160a01b0384166000908152606c6020526040902054610d91908690613721565b6001600160a01b038581166000908152606c60209081526040808320949094558a8252606b905291909120805460ff19166001179055606754610dd7918691168a612364565b610de18886613721565b9450815160001415610e4957610df8848787612364565b60408051868152602081018a90526001600160a01b038616818301529051309189917fd31ae0a5fc46ab05b27d837efddb13837db6eb85442f9b1d3f609bf1552f3f4f9181900360600190a3610f31565b606f54610e619085906001600160a01b031687612364565b606f546040517fe1ee0f790000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063e1ee0f7990610eb290879089908890889088906004016134de565b600060405180830381600087803b158015610ecc57600080fd5b505af1158015610ee0573d6000803e3d6000fd5b505060408051888152602081018c90526001600160a01b0388168183015290513093508a92507fd31ae0a5fc46ab05b27d837efddb13837db6eb85442f9b1d3f609bf1552f3f4f9181900360600190a35b5050505050505050565b610f43611eae565b6001600160a01b0316610f5e6033546001600160a01b031690565b6001600160a01b031614610fb45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161066c565b6069805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa610fe7611eae565b6040516001600160a01b03909116815260200160405180910390a1565b6067546001600160a01b0316331461105e5760405162461bcd60e51b815260206004820152601e60248201527f53796d623a2063616c6c6572206973206e6f7420746865206272696467650000604482015260640161066c565b60695460ff16156110a05760405162461bcd60e51b815260206004820152600c60248201526b14de5b588e881c185d5cd95960a21b604482015260640161066c565b6000848152606b602052604081205460ff1660028111156110c3576110c36137b7565b146111365760405162461bcd60e51b815260206004820152602660248201527f53796d623a2073796e74686574696320746f6b656e7320656d657267656e637960448201527f556e6275726e0000000000000000000000000000000000000000000000000000606482015260840161066c565b6001600160a01b0383166000908152606c602052604090205461115a908390613721565b6001600160a01b0384166000908152606c6020908152604080832093909355868252606b905220805460ff191660011790556111a0838261119b8886613721565b612364565b6067546111b89084906001600160a01b031687612364565b6001600160a01b038116847fd31ae0a5fc46ab05b27d837efddb13837db6eb85442f9b1d3f609bf1552f3f4f6111ee8886613721565b60408051918252602082018a90526001600160a01b0388169082015260600160405180910390a35050505050565b611224611eae565b6001600160a01b031661123f6033546001600160a01b031690565b6001600160a01b0316146112955760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161066c565b61129f60006124d3565b565b6112a9611eae565b6001600160a01b03166112c46033546001600160a01b031690565b6001600160a01b03161461131a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161066c565b6001600160a01b0382166000818152606e6020908152604091829020805460ff19168515159081179091558251938452908301527f0a4552f1105808db6a44587c9ef0a7c4064bf620b9d843b514ad7365bd52239a91015b60405180910390a15050565b611386611eae565b6001600160a01b03166113a16033546001600160a01b031690565b6001600160a01b0316146113f75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161066c565b6069805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610fe7611eae565b611435611eae565b6001600160a01b03166114506033546001600160a01b031690565b6001600160a01b0316146114a65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161066c565b6001600160a01b0382166000818152606d6020908152604091829020849055815192835282018390527fa6742efd4f410d6fd9688a6cf6a15b6d51121097a263056a3576baaacdc4a9ae9101611372565b60695460009060ff161561153c5760405162461bcd60e51b815260206004820152600c60248201526b14de5b588e881c185d5cd95960a21b604482015260640161066c565b6001600160a01b0389166000908152606e602052604090205460ff166115a45760405162461bcd60e51b815260206004820152601860248201527f53796d623a20756e617574686f72697a656420746f6b656e0000000000000000604482015260640161066c565b6001600160a01b0389166000908152606d602052604090205488101561160c5760405162461bcd60e51b815260206004820152601c60248201527f53796d623a20616d6f756e7420756e646572207468726573686f6c6400000000604482015260640161066c565b61161f89611618611eae565b308b612532565b6116308a8a8a8a8a8a8a8a8a611f96565b9a9950505050505050505050565b6067546001600160a01b031633146116985760405162461bcd60e51b815260206004820152601e60248201527f53796d623a2063616c6c6572206973206e6f7420746865206272696467650000604482015260640161066c565b60695460ff16156116da5760405162461bcd60e51b815260206004820152600c60248201526b14de5b588e881c185d5cd95960a21b604482015260640161066c565b6000818152606a6020526040902060016003820154600160a01b900460ff16600281111561170a5761170a6137b7565b1461177d5760405162461bcd60e51b815260206004820152602960248201527f53796d623a207374617465206e6f74206f70656e206f7220747820646f65732060448201527f6e6f742065786973740000000000000000000000000000000000000000000000606482015260840161066c565b600381018054740200000000000000000000000000000000000000007fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff82161790915560028201546001600160a01b039091166000908152606c60205260409020546117e99190613721565b6003820180546001600160a01b039081166000908152606c6020526040902092909255548254600284015461182c9392831692919091169061119b908790613721565b600381015460675461184b916001600160a01b03908116911685612364565b805460028201546001600160a01b039091169083907fefcdf9ea4e65571d2ce9c030c46954e950662df8a7d8bd039fc4417e37b2f88c9061188d908790613721565b600385015460408051928352602083018990526001600160a01b039091169082015260600160405180910390a3505050565b60695460009060ff16156119045760405162461bcd60e51b815260206004820152600c60248201526b14de5b588e881c185d5cd95960a21b604482015260640161066c565b6040808301516001600160a01b03166000908152606e602052205460ff1661196e5760405162461bcd60e51b815260206004820152601860248201527f53796d623a20756e617574686f72697a656420746f6b656e0000000000000000604482015260640161066c565b6040808301516001600160a01b03166000908152606d6020908152919020549083015110156119df5760405162461bcd60e51b815260206004820152601c60248201527f53796d623a20616d6f756e7420756e646572207468726573686f6c6400000000604482015260640161066c565b6119fa82604001516119ef611eae565b308560200151612532565b611a03826126a2565b90505b919050565b611a13611eae565b6001600160a01b0316611a2e6033546001600160a01b031690565b6001600160a01b031614611a845760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161066c565b6001600160a01b038116611b005760405162461bcd60e51b815260206004820152602760248201527f53796d623a206d657461526f757465722063616e6e6f74206265207a65726f2060448201527f6164647265737300000000000000000000000000000000000000000000000000606482015260840161066c565b606f805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527fd5c54ab1d37bfef4dd2253d9d73c292e46f5bd8a67ca5920aab4c2e1993178e79060200160405180910390a150565b611b69611eae565b6001600160a01b0316611b846033546001600160a01b031690565b6001600160a01b031614611bda5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161066c565b6001600160a01b038116611c565760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161066c565b611c5f816124d3565b50565b60695460009060ff1615611ca75760405162461bcd60e51b815260206004820152600c60248201526b14de5b588e881c185d5cd95960a21b604482015260640161066c565b6040808301516001600160a01b03166000908152606e602052205460ff16611d115760405162461bcd60e51b815260206004820152601860248201527f53796d623a20756e617574686f72697a656420746f6b656e0000000000000000604482015260640161066c565b6040808301516001600160a01b03166000908152606d602052205460608301511015611d7f5760405162461bcd60e51b815260206004820152601c60248201527f53796d623a20616d6f756e7420756e646572207468726573686f6c6400000000604482015260640161066c565b6000806000806000808760200151806020019051810190611da09190612dba565b6040808f015190517fd505accf0000000000000000000000000000000000000000000000000000000081526001600160a01b038089166004830152306024830152604482018890526064820187905260ff8616608483015260a4820185905260c48201849052979d50959b5093995091975095509350919091169063d505accf9060e401600060405180830381600087803b158015611e3e57600080fd5b505af1158015611e52573d6000803e3d6000fd5b50505050505050505050611e778260400151611e6c611eae565b308560600151612532565b611a0382600001518360400151846060015185608001518660a001518760c001518860e001518961010001518a6101200151611f96565b6065546000906001600160a01b0316331415611eef57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c90565b503390565b600054610100900460ff16611f5f5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161066c565b611f67612b2b565b6065805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001600160a01b0388166000908152606c6020526040812054611fba908990613709565b6001600160a01b03808b166000908152606c60205260409020919091558416611fe1578693505b6068546040516bffffffffffffffffffffffff193060601b166020820152603481019190915246605482015260740160408051601f1981840301815282825280516020918201209083018190526bffffffffffffffffffffffff1960608a811b8216938501939093529187901b90911660548301526068820185905291506000906088016040516020818303038152906040528051906020012090506000604051806080016040528060438152602001613825604391398051602090910120604051602481018e9052604481018490526001600160a01b03808e16606483015246608483015260a482018d90528b1660c482015260e40160408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090941693909317909252815160a0810190925291508061214b611eae565b6001600160a01b0390811682528b81166020830152604082018d90528d166060820152608001600190526000838152606a60209081526040918290208351815473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b039283161783559285015160018301805485169183169190911790559284015160028083019190915560608501516003830180549485169190951690811785556080860151929492937fffffffffffffffffffffff000000000000000000000000000000000000000000161790600160a01b90849081111561222f5761222f6137b7565b021790555050606880549150600061224683613768565b9091555050606754604051633675e4e160e11b81526001600160a01b0390911690636cebc9c2906122819084908c908c908b90600401613522565b600060405180830381600087803b15801561229b57600080fd5b505af11580156122af573d6000803e3d6000fd5b505050505050836001600160a01b0316836122c8611eae565b604080518581526001600160a01b038c811660208301529181018d90528d821660608201529116907f31325fe0a1a2e6a5b1e41572156ba5b4e94f0fae7e7f63ec21e9b5ce1e4b3eab9060800160405180910390a4817f5a297b2c9a9f94a0f4e5a796c74ad38e219d1185fccf5f79c18726a830c2b6f58260405161234f91815260200190565b60405180910390a29998505050505050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905291516000928392908716916123ee9190613482565b6000604051808303816000865af19150503d806000811461242b576040519150601f19603f3d011682016040523d82523d6000602084013e612430565b606091505b509150915081801561245a57508051158061245a57508080602001905181019061245a9190612ef6565b6124cc5760405162461bcd60e51b815260206004820152602d60248201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260448201527f616e73666572206661696c656400000000000000000000000000000000000000606482015260840161066c565b5050505050565b603380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017905291516000928392908816916125c49190613482565b6000604051808303816000865af19150503d8060008114612601576040519150601f19603f3d011682016040523d82523d6000602084013e612606565b606091505b50915091508180156126305750805115806126305750808060200190518101906126309190612ef6565b610a865760405162461bcd60e51b815260206004820152603160248201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260448201527f616e7366657246726f6d206661696c6564000000000000000000000000000000606482015260840161066c565b6020808201516040808401516001600160a01b03166000908152606c9093528220546126ce9190613709565b6040808401516001600160a01b039081166000908152606c60205291909120919091556101c0830151166127115760608201516001600160a01b03166101c08301525b6068546040516bffffffffffffffffffffffff193060601b166020820152603481019190915246605482015260740160408051601f19818403018152828252805160209182012060808601516101c087015160e08801519386018390526bffffffffffffffffffffffff19606092831b811695870195909552901b9092166054840152606883015291506000906088016040516020818303038152906040528051906020012090506000604051806101800160405280856000015181526020018560200151815260200183815260200185604001516001600160a01b0316815260200146815260200185606001516001600160a01b0316815260200185610100015181526020018561012001516001600160a01b0316815260200185610140015181526020018561016001516001600160a01b031681526020018561018001518152602001856101a001518152509050600081604051602401612874919061357e565b60408051601f19818403018152918152602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fd5f8fbcb00000000000000000000000000000000000000000000000000000000179052815160a08101835260c08901516001600160a01b0390811682526060808b0151821683850152928a015182850152928901519092169082015290915060808101600190526000848152606a60209081526040918290208351815473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b039283161783559285015160018301805485169183169190911790559284015160028083019190915560608501516003830180549485169190951690811785556080860151929492937fffffffffffffffffffffff000000000000000000000000000000000000000000161790600160a01b9084908111156129cb576129cb6137b7565b02179055505060688054915060006129e283613768565b9091555050606754608086015160a087015160e0880151604051633675e4e160e11b81526001600160a01b0390941693636cebc9c293612a2b9387939192909190600401613522565b600060405180830381600087803b158015612a4557600080fd5b505af1158015612a59573d6000803e3d6000fd5b5050505050836101c001516001600160a01b03168460e001518560c001516001600160a01b03167f31325fe0a1a2e6a5b1e41572156ba5b4e94f0fae7e7f63ec21e9b5ce1e4b3eab86886060015189602001518a60400151604051612ae394939291909384526001600160a01b039283166020850152604084019190915216606082015260800190565b60405180910390a46101e08401516040518481527f5a297b2c9a9f94a0f4e5a796c74ad38e219d1185fccf5f79c18726a830c2b6f59060200160405180910390a25050919050565b600054610100900460ff16612b965760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161066c565b612b9e612ba6565b61129f612c11565b600054610100900460ff1661129f5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161066c565b600054610100900460ff16612c7c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161066c565b61129f612c87611eae565b6124d3565b8035611a0681613801565b600082601f830112612ca857600080fd5b8135602067ffffffffffffffff821115612cc457612cc46137cd565b8160051b612cd38282016136d8565b838152828101908684018388018501891015612cee57600080fd5b600093505b85841015612d1a578035612d0681613801565b835260019390930192918401918401612cf3565b50979650505050505050565b600082601f830112612d3757600080fd5b813567ffffffffffffffff811115612d5157612d516137cd565b612d646020601f19601f840116016136d8565b818152846020838601011115612d7957600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215612da857600080fd5b8135612db381613801565b9392505050565b60008060008060008060c08789031215612dd357600080fd5b8651612dde81613801565b809650506020870151945060408701519350606087015160ff81168114612e0457600080fd5b809350506080870151915060a087015190509295509295509295565b600080600080600060a08688031215612e3857600080fd5b8535612e4381613801565b94506020860135612e5381613801565b93506040860135612e6381613801565b92506060860135612e7381613801565b91506080860135612e8381613801565b809150509295509295909350565b60008060408385031215612ea457600080fd5b8235612eaf81613801565b91506020830135612ebf81613816565b809150509250929050565b60008060408385031215612edd57600080fd5b8235612ee881613801565b946020939093013593505050565b600060208284031215612f0857600080fd5b8151612db381613816565b600060208284031215612f2557600080fd5b5035919050565b600060208284031215612f3e57600080fd5b813567ffffffffffffffff80821115612f5657600080fd5b908301906102008286031215612f6b57600080fd5b612f7361368a565b8235815260208301356020820152612f8d60408401612c8c565b6040820152612f9e60608401612c8c565b6060820152612faf60808401612c8c565b6080820152612fc060a08401612c8c565b60a0820152612fd160c08401612c8c565b60c082015260e083013560e08201526101008084013583811115612ff457600080fd5b61300088828701612c97565b828401525050610120613014818501612c8c565b90820152610140838101358381111561302c57600080fd5b61303888828701612d26565b82840152505061016061304c818501612c8c565b90820152610180838101358381111561306457600080fd5b61307088828701612d26565b8284015250506101a0915081830135828201526101c09150613093828401612c8c565b918101919091526101e091820135918101919091529392505050565b6000602082840312156130c157600080fd5b813567ffffffffffffffff808211156130d957600080fd5b9083019061014082860312156130ee57600080fd5b6130f66136b4565b8235815260208301358281111561310c57600080fd5b61311887828601612d26565b60208301525061312a60408401612c8c565b60408201526060830135606082015261314560808401612c8c565b608082015261315660a08401612c8c565b60a082015261316760c08401612c8c565b60c082015261317860e08401612c8c565b60e082015261010083810135908201526101209283013592810192909252509392505050565b600080600080600080600060e0888a0312156131b957600080fd5b8735965060208801356131cb81613801565b955060408801356131db81613801565b945060608801356131eb81613801565b935060808801356131fb81613801565b9699959850939692959460a0840135945060c09093013592915050565b60008060008060008060008060006101208a8c03121561323757600080fd5b8935985060208a013561324981613801565b975060408a0135965060608a013561326081613801565b955060808a013561327081613801565b945060a08a013561328081613801565b935060c08a013561329081613801565b8093505060e08a013591506101008a013590509295985092959850929598565b600080604083850312156132c357600080fd5b50508035926020909101359150565b60008060008060008060c087890312156132eb57600080fd5b8635955060208701359450604087013561330481613801565b9350606087013561331481613801565b9598949750929560808101359460a0909101359350915050565b600080600080600060a0868803121561334657600080fd5b8535945060208601359350604086013561335f81613801565b9250606086013591506080860135612e8381613801565b600080600080600080600080610100898b03121561339357600080fd5b883597506020890135965060408901356133ac81613801565b95506060890135945060808901356133c381613801565b935060a08901356133d381613801565b925060c089013567ffffffffffffffff8111156133ef57600080fd5b6133fb8b828c01612d26565b92505060e089013590509295985092959890939650565b600081518084526020808501945080840160005b8381101561344b5781516001600160a01b031687529582019590820190600101613426565b509495945050505050565b6000815180845261346e816020860160208601613738565b601f01601f19169290920160200192915050565b60008251613494818460208701613738565b9190910192915050565b6001600160a01b0386811682528581166020830152604082018590528316606082015260a081016134ce836137e3565b8260808301529695505050505050565b60006001600160a01b03808816835286602084015280861660408401525060a0606083015261351060a0830185613456565b90508260808301529695505050505050565b6080815260006135356080830187613456565b6001600160a01b0395861660208401529390941660408201526060015292915050565b60208101613565836137e3565b91905290565b602081526000612db36020830184613456565b60208152815160208201526020820151604082015260408201516060820152600060608301516135b960808401826001600160a01b03169052565b50608083015160a083015260a08301516135de60c08401826001600160a01b03169052565b5060c08301516101808060e08501526135fb6101a0850183613412565b915060e0850151610100613619818701836001600160a01b03169052565b80870151915050601f196101208187860301818801526136398584613456565b945080880151925050610140613659818801846001600160a01b03169052565b808801519250506101608187860301818801526136768584613456565b970151959092019490945250929392505050565b604051610200810167ffffffffffffffff811182821017156136ae576136ae6137cd565b60405290565b604051610140810167ffffffffffffffff811182821017156136ae576136ae6137cd565b604051601f8201601f1916810167ffffffffffffffff81118282101715613701576137016137cd565b604052919050565b6000821982111561371c5761371c6137a1565b500190565b600082821015613733576137336137a1565b500390565b60005b8381101561375357818101518382015260200161373b565b83811115613762576000848401525b50505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561379a5761379a6137a1565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60038110611c5f57634e487b7160e01b600052602160045260246000fd5b6001600160a01b0381168114611c5f57600080fd5b8015158114611c5f57600080fdfe6d696e7453796e746865746963546f6b656e2875696e743235362c627974657333322c616464726573732c75696e743235362c75696e743235362c6164647265737329a26469706673582212204af63ff5cafa6a6d504148999166950b56bd7bc770f110eafe4527588571ae3764736f6c63430008070033';

var isSuperArgs$1 = function isSuperArgs(xs) {
  return xs.length > 1;
};

var Portal__factory = /*#__PURE__*/function (_ContractFactory) {
  _inheritsLoose(Portal__factory, _ContractFactory);

  function Portal__factory() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    if (isSuperArgs$1(args)) {
      _this = _ContractFactory.call.apply(_ContractFactory, [this].concat(args)) || this;
      _this.contractName = void 0;
    } else {
      _this = _ContractFactory.call(this, _abi$4, _bytecode$1, args[0]) || this;
      _this.contractName = void 0;
    }

    _this.contractName = 'Portal';
    return _assertThisInitialized(_this);
  }

  var _proto = Portal__factory.prototype;

  _proto.deploy = function deploy(overrides) {
    return _ContractFactory.prototype.deploy.call(this, overrides || {});
  };

  _proto.getDeployTransaction = function getDeployTransaction(overrides) {
    return _ContractFactory.prototype.getDeployTransaction.call(this, overrides || {});
  };

  _proto.attach = function attach(address) {
    return _ContractFactory.prototype.attach.call(this, address);
  };

  _proto.connect = function connect(signer) {
    return _ContractFactory.prototype.connect.call(this, signer);
  };

  Portal__factory.createInterface = function createInterface() {
    return new ethers.utils.Interface(_abi$4);
  };

  Portal__factory.connect = function connect(address, signerOrProvider) {
    return new ethers.Contract(address, _abi$4, signerOrProvider);
  };

  return Portal__factory;
}(ethers.ContractFactory);
Portal__factory.contractName = void 0;
Portal__factory.bytecode = _bytecode$1;
Portal__factory.abi = _abi$4;

/* Autogenerated file. Do not edit manually. */
var _abi$3 = [{
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'string',
    name: 'asset',
    type: 'string'
  }, {
    indexed: false,
    internalType: 'address',
    name: 'signatureVerifier',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'address',
    name: 'token',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'string',
    name: 'version',
    type: 'string'
  }],
  name: 'LockGatewayProxyDeployed',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'string',
    name: 'symbol',
    type: 'string'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'token',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'gatewayContract',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'string',
    name: 'indexedSymbol',
    type: 'string'
  }],
  name: 'LogLockGatewayAdded',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'string',
    name: 'symbol',
    type: 'string'
  }, {
    indexed: true,
    internalType: 'string',
    name: 'indexedSymbol',
    type: 'string'
  }],
  name: 'LogLockGatewayRemoved',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'string',
    name: 'symbol',
    type: 'string'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'token',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'gatewayContract',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'string',
    name: 'indexedSymbol',
    type: 'string'
  }],
  name: 'LogMintGatewayAdded',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'string',
    name: 'symbol',
    type: 'string'
  }, {
    indexed: true,
    internalType: 'string',
    name: 'indexedSymbol',
    type: 'string'
  }],
  name: 'LogMintGatewayRemoved',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'oldSignatureVerifier',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'newSignatureVerifier',
    type: 'address'
  }],
  name: 'LogSignatureVerifierUpdated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'oldTransferContract',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'newTransferContract',
    type: 'address'
  }],
  name: 'LogTransferContractUpdated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'string',
    name: 'asset',
    type: 'string'
  }, {
    indexed: false,
    internalType: 'address',
    name: 'signatureVerifier',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'address',
    name: 'token',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'string',
    name: 'version',
    type: 'string'
  }],
  name: 'MintGatewayProxyDeployed',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'uint256',
    name: 'chainId',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'string',
    name: 'asset',
    type: 'string'
  }, {
    indexed: false,
    internalType: 'string',
    name: 'name',
    type: 'string'
  }, {
    indexed: false,
    internalType: 'string',
    name: 'symbol',
    type: 'string'
  }, {
    indexed: false,
    internalType: 'uint8',
    name: 'decimals',
    type: 'uint8'
  }, {
    indexed: false,
    internalType: 'string',
    name: 'version',
    type: 'string'
  }],
  name: 'RenAssetProxyDeployed',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'bytes32',
    name: 'role',
    type: 'bytes32'
  }, {
    indexed: true,
    internalType: 'bytes32',
    name: 'previousAdminRole',
    type: 'bytes32'
  }, {
    indexed: true,
    internalType: 'bytes32',
    name: 'newAdminRole',
    type: 'bytes32'
  }],
  name: 'RoleAdminChanged',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'bytes32',
    name: 'role',
    type: 'bytes32'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'account',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'sender',
    type: 'address'
  }],
  name: 'RoleGranted',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'bytes32',
    name: 'role',
    type: 'bytes32'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'account',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'sender',
    type: 'address'
  }],
  name: 'RoleRevoked',
  type: 'event'
}, {
  inputs: [],
  name: 'CAN_ADD_GATEWAYS',
  outputs: [{
    internalType: 'bytes32',
    name: '',
    type: 'bytes32'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'CAN_UPDATE_GATEWAYS',
  outputs: [{
    internalType: 'bytes32',
    name: '',
    type: 'bytes32'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'DEFAULT_ADMIN_ROLE',
  outputs: [{
    internalType: 'bytes32',
    name: '',
    type: 'bytes32'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'NAME',
  outputs: [{
    internalType: 'string',
    name: '',
    type: 'string'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'chainId_',
    type: 'uint256'
  }, {
    internalType: 'address',
    name: 'signatureVerifier_',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'transferContract',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'renAssetProxyBeacon_',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'mintGatewayProxyBeacon_',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'lockGatewayProxyBeacon_',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'adminAddress',
    type: 'address'
  }, {
    internalType: 'address[]',
    name: 'gatewayDeployers',
    type: 'address[]'
  }],
  name: '__GatewayRegistry_init',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'renAssetProxyBeacon_',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'mintGatewayProxyBeacon_',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'lockGatewayProxyBeacon_',
    type: 'address'
  }],
  name: '__RenAssetFactory_init',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'string',
    name: 'symbol',
    type: 'string'
  }, {
    internalType: 'address',
    name: 'lockAsset',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'lockGateway',
    type: 'address'
  }],
  name: 'addLockGateway',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'string',
    name: 'symbol',
    type: 'string'
  }, {
    internalType: 'address',
    name: 'renAsset',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'mintGateway',
    type: 'address'
  }],
  name: 'addMintGateway',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'string',
    name: 'symbol',
    type: 'string'
  }, {
    internalType: 'address',
    name: 'lockToken',
    type: 'address'
  }, {
    internalType: 'string',
    name: 'version',
    type: 'string'
  }],
  name: 'deployLockGateway',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'string',
    name: 'symbol',
    type: 'string'
  }, {
    internalType: 'address',
    name: 'renAsset',
    type: 'address'
  }, {
    internalType: 'string',
    name: 'version',
    type: 'string'
  }],
  name: 'deployMintGateway',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'string',
    name: 'symbol',
    type: 'string'
  }, {
    internalType: 'string',
    name: 'erc20Name',
    type: 'string'
  }, {
    internalType: 'string',
    name: 'erc20Symbol',
    type: 'string'
  }, {
    internalType: 'uint8',
    name: 'erc20Decimals',
    type: 'uint8'
  }, {
    internalType: 'string',
    name: 'version',
    type: 'string'
  }],
  name: 'deployMintGatewayAndRenAsset',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'getChainId',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'string',
    name: 'tokenSymbol',
    type: 'string'
  }],
  name: 'getGatewayBySymbol',
  outputs: [{
    internalType: 'contract IMintGateway',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'token',
    type: 'address'
  }],
  name: 'getGatewayByToken',
  outputs: [{
    internalType: 'contract IMintGateway',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'string',
    name: 'tokenSymbol',
    type: 'string'
  }],
  name: 'getLockAssetBySymbol',
  outputs: [{
    internalType: 'contract IERC20',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'string',
    name: 'tokenSymbol',
    type: 'string'
  }],
  name: 'getLockGatewayBySymbol',
  outputs: [{
    internalType: 'contract ILockGateway',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'token_',
    type: 'address'
  }],
  name: 'getLockGatewayByToken',
  outputs: [{
    internalType: 'contract ILockGateway',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'getLockGatewayProxyBeacon',
  outputs: [{
    internalType: 'contract LockGatewayProxyBeacon',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'from',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'count',
    type: 'uint256'
  }],
  name: 'getLockGatewaySymbols',
  outputs: [{
    internalType: 'string[]',
    name: '',
    type: 'string[]'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'string',
    name: 'tokenSymbol',
    type: 'string'
  }],
  name: 'getMintGatewayBySymbol',
  outputs: [{
    internalType: 'contract IMintGateway',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'token',
    type: 'address'
  }],
  name: 'getMintGatewayByToken',
  outputs: [{
    internalType: 'contract IMintGateway',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'getMintGatewayProxyBeacon',
  outputs: [{
    internalType: 'contract MintGatewayProxyBeacon',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'from',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'count',
    type: 'uint256'
  }],
  name: 'getMintGatewaySymbols',
  outputs: [{
    internalType: 'string[]',
    name: '',
    type: 'string[]'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'string',
    name: 'tokenSymbol',
    type: 'string'
  }],
  name: 'getRenAssetBySymbol',
  outputs: [{
    internalType: 'contract IERC20',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'getRenAssetProxyBeacon',
  outputs: [{
    internalType: 'contract RenAssetProxyBeacon',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'bytes32',
    name: 'role',
    type: 'bytes32'
  }],
  name: 'getRoleAdmin',
  outputs: [{
    internalType: 'bytes32',
    name: '',
    type: 'bytes32'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'bytes32',
    name: 'role',
    type: 'bytes32'
  }, {
    internalType: 'uint256',
    name: 'index',
    type: 'uint256'
  }],
  name: 'getRoleMember',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'bytes32',
    name: 'role',
    type: 'bytes32'
  }],
  name: 'getRoleMemberCount',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'getSignatureVerifier',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'string',
    name: 'tokenSymbol',
    type: 'string'
  }],
  name: 'getTokenBySymbol',
  outputs: [{
    internalType: 'contract IERC20',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'getTransferContract',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'bytes32',
    name: 'role',
    type: 'bytes32'
  }, {
    internalType: 'address',
    name: 'account',
    type: 'address'
  }],
  name: 'grantRole',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'bytes32',
    name: 'role',
    type: 'bytes32'
  }, {
    internalType: 'address',
    name: 'account',
    type: 'address'
  }],
  name: 'hasRole',
  outputs: [{
    internalType: 'bool',
    name: '',
    type: 'bool'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'string',
    name: 'symbol',
    type: 'string'
  }],
  name: 'removeLockGateway',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'string',
    name: 'symbol',
    type: 'string'
  }],
  name: 'removeMintGateway',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'bytes32',
    name: 'role',
    type: 'bytes32'
  }, {
    internalType: 'address',
    name: 'account',
    type: 'address'
  }],
  name: 'renounceRole',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'bytes32',
    name: 'role',
    type: 'bytes32'
  }, {
    internalType: 'address',
    name: 'account',
    type: 'address'
  }],
  name: 'revokeRole',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'bytes4',
    name: 'interfaceId',
    type: 'bytes4'
  }],
  name: 'supportsInterface',
  outputs: [{
    internalType: 'bool',
    name: '',
    type: 'bool'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'newSignatureVerifier',
    type: 'address'
  }],
  name: 'updateSignatureVerifier',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'newTransferContract',
    type: 'address'
  }],
  name: 'updateTransferContract',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}];
var RenGatewayRegistryV2__factory = /*#__PURE__*/function () {
  function RenGatewayRegistryV2__factory() {}

  RenGatewayRegistryV2__factory.createInterface = function createInterface() {
    return new ethers.utils.Interface(_abi$3);
  };

  RenGatewayRegistryV2__factory.connect = function connect(address, signerOrProvider) {
    return new ethers.Contract(address, _abi$3, signerOrProvider);
  };

  return RenGatewayRegistryV2__factory;
}();
RenGatewayRegistryV2__factory.abi = _abi$3;

/* Autogenerated file. Do not edit manually. */
var _abi$2 = [{
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'string',
    name: 'asset',
    type: 'string'
  }, {
    indexed: true,
    internalType: 'bytes32',
    name: 'selectorHash',
    type: 'bytes32'
  }],
  name: 'LogAssetUpdated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'bytes',
    name: 'to',
    type: 'bytes'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }, {
    indexed: true,
    internalType: 'uint256',
    name: 'burnNonce',
    type: 'uint256'
  }, {
    indexed: true,
    internalType: 'bytes',
    name: 'indexedTo',
    type: 'bytes'
  }],
  name: 'LogBurn',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'string',
    name: 'recipientAddress',
    type: 'string'
  }, {
    indexed: false,
    internalType: 'string',
    name: 'recipientChain',
    type: 'string'
  }, {
    indexed: false,
    internalType: 'bytes',
    name: 'recipientPayload',
    type: 'bytes'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }, {
    indexed: true,
    internalType: 'uint256',
    name: 'burnNonce',
    type: 'uint256'
  }, {
    indexed: true,
    internalType: 'string',
    name: 'recipientAddressIndexed',
    type: 'string'
  }, {
    indexed: true,
    internalType: 'string',
    name: 'recipientChainIndexed',
    type: 'string'
  }],
  name: 'LogBurnToChain',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }, {
    indexed: true,
    internalType: 'uint256',
    name: 'sigHash',
    type: 'uint256'
  }, {
    indexed: true,
    internalType: 'bytes32',
    name: 'nHash',
    type: 'bytes32'
  }],
  name: 'LogMint',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'oldPreviousGateway',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'newPreviousGateway',
    type: 'address'
  }],
  name: 'LogPreviousGatewayUpdated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'oldSignatureVerifier',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'newSignatureVerifier',
    type: 'address'
  }],
  name: 'LogSignatureVerifierUpdated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'token',
    type: 'address'
  }],
  name: 'LogTokenUpdated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'tokenAddress',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'nextTokenOwner',
    type: 'address'
  }],
  name: 'TokenOwnershipTransferred',
  type: 'event'
}, {
  inputs: [],
  name: 'NAME',
  outputs: [{
    internalType: 'string',
    name: '',
    type: 'string'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'string',
    name: 'asset_',
    type: 'string'
  }, {
    internalType: 'address',
    name: 'signatureVerifier_',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'token_',
    type: 'address'
  }],
  name: '__GatewayStateManager_init',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'string',
    name: 'asset_',
    type: 'string'
  }, {
    internalType: 'address',
    name: 'signatureVerifier_',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'token_',
    type: 'address'
  }],
  name: '__MintGateway_init',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'string',
    name: 'recipientAddress',
    type: 'string'
  }, {
    internalType: 'string',
    name: 'recipientChain',
    type: 'string'
  }, {
    internalType: 'bytes',
    name: 'recipientPayload',
    type: 'bytes'
  }, {
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }, {
    internalType: 'address',
    name: 'caller',
    type: 'address'
  }],
  name: '_burnFromPreviousGateway',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'bytes32',
    name: 'pHash',
    type: 'bytes32'
  }, {
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }, {
    internalType: 'bytes32',
    name: 'nHash',
    type: 'bytes32'
  }, {
    internalType: 'bytes',
    name: 'sig',
    type: 'bytes'
  }, {
    internalType: 'address',
    name: 'caller',
    type: 'address'
  }],
  name: '_mintFromPreviousGateway',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'bytes',
    name: 'recipient',
    type: 'bytes'
  }, {
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }],
  name: 'burn',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'string',
    name: 'recipient',
    type: 'string'
  }, {
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }],
  name: 'burn',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'string',
    name: 'recipientAddress',
    type: 'string'
  }, {
    internalType: 'string',
    name: 'recipientChain',
    type: 'string'
  }, {
    internalType: 'bytes',
    name: 'recipientPayload',
    type: 'bytes'
  }, {
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }],
  name: 'burnWithPayload',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'getAsset',
  outputs: [{
    internalType: 'string',
    name: '',
    type: 'string'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'getEventNonce',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'getPreviousGateway',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'getSelectorHash',
  outputs: [{
    internalType: 'bytes32',
    name: '',
    type: 'bytes32'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'getSignatureVerifier',
  outputs: [{
    internalType: 'contract IRenVMSignatureVerifier',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'getToken',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'bytes32',
    name: 'pHash',
    type: 'bytes32'
  }, {
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }, {
    internalType: 'bytes32',
    name: 'nHash',
    type: 'bytes32'
  }, {
    internalType: 'bytes',
    name: 'sig',
    type: 'bytes'
  }],
  name: 'mint',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'owner',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'bytes32',
    name: 'hash',
    type: 'bytes32'
  }],
  name: 'status',
  outputs: [{
    internalType: 'bool',
    name: '',
    type: 'bool'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'token',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'nextTokenOwner',
    type: 'address'
  }],
  name: 'transferTokenOwnership',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'string',
    name: 'nextAsset',
    type: 'string'
  }],
  name: 'updateAsset',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'newPreviousGateway',
    type: 'address'
  }],
  name: 'updatePreviousGateway',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'newSignatureVerifier',
    type: 'address'
  }],
  name: 'updateSignatureVerifier',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'newToken',
    type: 'address'
  }],
  name: 'updateToken',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}];
var RenMintGatewayV3__factory = /*#__PURE__*/function () {
  function RenMintGatewayV3__factory() {}

  RenMintGatewayV3__factory.createInterface = function createInterface() {
    return new ethers.utils.Interface(_abi$2);
  };

  RenMintGatewayV3__factory.connect = function connect(address, signerOrProvider) {
    return new ethers.Contract(address, _abi$2, signerOrProvider);
  };

  return RenMintGatewayV3__factory;
}();
RenMintGatewayV3__factory.abi = _abi$2;

var _abi$1 = [{
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'bytes32',
    name: 'id',
    type: 'bytes32'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'from',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'uint256',
    name: 'chainID',
    type: 'uint256'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'revertableAddress',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'address',
    name: 'token',
    type: 'address'
  }],
  name: 'BurnRequest',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'bytes32',
    name: 'requestId',
    type: 'bytes32'
  }, {
    indexed: true,
    internalType: 'bytes32',
    name: 'clientId',
    type: 'bytes32'
  }],
  name: 'ClientIdLog',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'previousOwner',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'newOwner',
    type: 'address'
  }],
  name: 'OwnershipTransferred',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'address',
    name: 'account',
    type: 'address'
  }],
  name: 'Paused',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'bytes32',
    name: 'id',
    type: 'bytes32'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'bridgingFee',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'address',
    name: 'token',
    type: 'address'
  }],
  name: 'RevertBurnCompleted',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'bytes32',
    name: 'id',
    type: 'bytes32'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'to',
    type: 'address'
  }],
  name: 'RevertSynthesizeRequest',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'address',
    name: 'fabric',
    type: 'address'
  }],
  name: 'SetFabric',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'address',
    name: 'metaRouter',
    type: 'address'
  }],
  name: 'SetMetaRouter',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'address',
    name: 'token',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'threshold',
    type: 'uint256'
  }],
  name: 'SetTokenThreshold',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'bytes32',
    name: 'id',
    type: 'bytes32'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'bridgingFee',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'address',
    name: 'token',
    type: 'address'
  }],
  name: 'SynthesizeCompleted',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'address',
    name: 'account',
    type: 'address'
  }],
  name: 'Unpaused',
  type: 'event'
}, {
  inputs: [],
  name: 'bridge',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: '_stableBridgingFee',
    type: 'uint256'
  }, {
    internalType: 'address',
    name: '_stoken',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: '_amount',
    type: 'uint256'
  }, {
    internalType: 'address',
    name: '_chain2address',
    type: 'address'
  }, {
    internalType: 'address',
    name: '_receiveSide',
    type: 'address'
  }, {
    internalType: 'address',
    name: '_oppositeBridge',
    type: 'address'
  }, {
    internalType: 'address',
    name: '_revertableAddress',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: '_chainID',
    type: 'uint256'
  }, {
    internalType: 'bytes32',
    name: '_clientID',
    type: 'bytes32'
  }],
  name: 'burnSyntheticToken',
  outputs: [{
    internalType: 'bytes32',
    name: 'internalID',
    type: 'bytes32'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'fabric',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: '_bridge',
    type: 'address'
  }, {
    internalType: 'address',
    name: '_trustedForwarder',
    type: 'address'
  }, {
    internalType: 'contract IMetaRouter',
    name: '_metaRouter',
    type: 'address'
  }],
  name: 'initialize',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'forwarder',
    type: 'address'
  }],
  name: 'isTrustedForwarder',
  outputs: [{
    internalType: 'bool',
    name: '',
    type: 'bool'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    components: [{
      internalType: 'uint256',
      name: 'stableBridgingFee',
      type: 'uint256'
    }, {
      internalType: 'uint256',
      name: 'amount',
      type: 'uint256'
    }, {
      internalType: 'address',
      name: 'syntCaller',
      type: 'address'
    }, {
      internalType: 'address',
      name: 'finalReceiveSide',
      type: 'address'
    }, {
      internalType: 'address',
      name: 'sToken',
      type: 'address'
    }, {
      internalType: 'bytes',
      name: 'finalCallData',
      type: 'bytes'
    }, {
      internalType: 'uint256',
      name: 'finalOffset',
      type: 'uint256'
    }, {
      internalType: 'address',
      name: 'chain2address',
      type: 'address'
    }, {
      internalType: 'address',
      name: 'receiveSide',
      type: 'address'
    }, {
      internalType: 'address',
      name: 'oppositeBridge',
      type: 'address'
    }, {
      internalType: 'address',
      name: 'revertableAddress',
      type: 'address'
    }, {
      internalType: 'uint256',
      name: 'chainID',
      type: 'uint256'
    }, {
      internalType: 'bytes32',
      name: 'clientID',
      type: 'bytes32'
    }],
    internalType: 'struct MetaRouteStructs.MetaBurnTransaction',
    name: '_metaBurnTransaction',
    type: 'tuple'
  }],
  name: 'metaBurnSyntheticToken',
  outputs: [{
    internalType: 'bytes32',
    name: 'internalID',
    type: 'bytes32'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    components: [{
      internalType: 'uint256',
      name: 'stableBridgingFee',
      type: 'uint256'
    }, {
      internalType: 'uint256',
      name: 'amount',
      type: 'uint256'
    }, {
      internalType: 'bytes32',
      name: 'externalID',
      type: 'bytes32'
    }, {
      internalType: 'address',
      name: 'tokenReal',
      type: 'address'
    }, {
      internalType: 'uint256',
      name: 'chainID',
      type: 'uint256'
    }, {
      internalType: 'address',
      name: 'to',
      type: 'address'
    }, {
      internalType: 'address[]',
      name: 'swapTokens',
      type: 'address[]'
    }, {
      internalType: 'address',
      name: 'secondDexRouter',
      type: 'address'
    }, {
      internalType: 'bytes',
      name: 'secondSwapCalldata',
      type: 'bytes'
    }, {
      internalType: 'address',
      name: 'finalReceiveSide',
      type: 'address'
    }, {
      internalType: 'bytes',
      name: 'finalCalldata',
      type: 'bytes'
    }, {
      internalType: 'uint256',
      name: 'finalOffset',
      type: 'uint256'
    }],
    internalType: 'struct MetaRouteStructs.MetaMintTransaction',
    name: '_metaMintTransaction',
    type: 'tuple'
  }],
  name: 'metaMintSyntheticToken',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'metaRouter',
  outputs: [{
    internalType: 'contract IMetaRouter',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: '_stableBridgingFee',
    type: 'uint256'
  }, {
    internalType: 'bytes32',
    name: '_externalID',
    type: 'bytes32'
  }, {
    internalType: 'address',
    name: '_tokenReal',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: '_chainID',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: '_amount',
    type: 'uint256'
  }, {
    internalType: 'address',
    name: '_to',
    type: 'address'
  }],
  name: 'mintSyntheticToken',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'owner',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'pause',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'paused',
  outputs: [{
    internalType: 'bool',
    name: '',
    type: 'bool'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'renounceOwnership',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'requestCount',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'bytes32',
    name: '',
    type: 'bytes32'
  }],
  name: 'requests',
  outputs: [{
    internalType: 'address',
    name: 'recipient',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'chain2address',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }, {
    internalType: 'address',
    name: 'token',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'stoken',
    type: 'address'
  }, {
    internalType: 'enum Synthesis.RequestState',
    name: 'state',
    type: 'uint8'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: '_stableBridgingFee',
    type: 'uint256'
  }, {
    internalType: 'bytes32',
    name: '_externalID',
    type: 'bytes32'
  }],
  name: 'revertBurn',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: '_stableBridgingFee',
    type: 'uint256'
  }, {
    internalType: 'bytes32',
    name: '_internalID',
    type: 'bytes32'
  }, {
    internalType: 'address',
    name: '_receiveSide',
    type: 'address'
  }, {
    internalType: 'address',
    name: '_oppositeBridge',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: '_chainID',
    type: 'uint256'
  }, {
    internalType: 'bytes32',
    name: '_clientID',
    type: 'bytes32'
  }],
  name: 'revertSynthesizeRequest',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: '_fabric',
    type: 'address'
  }],
  name: 'setFabric',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract IMetaRouter',
    name: '_metaRouter',
    type: 'address'
  }],
  name: 'setMetaRouter',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: '_token',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: '_threshold',
    type: 'uint256'
  }],
  name: 'setTokenThreshold',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'bytes32',
    name: '',
    type: 'bytes32'
  }],
  name: 'synthesizeStates',
  outputs: [{
    internalType: 'enum Synthesis.SynthesizeState',
    name: '',
    type: 'uint8'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  name: 'tokenThreshold',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'newOwner',
    type: 'address'
  }],
  name: 'transferOwnership',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'unpause',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'versionRecipient',
  outputs: [{
    internalType: 'string',
    name: '',
    type: 'string'
  }],
  stateMutability: 'pure',
  type: 'function'
}];
var _bytecode = '0x608060405234801561001057600080fd5b50613600806100206000396000f3fe608060405234801561001057600080fd5b50600436106101a35760003560e01c8063b236d3f3116100ee578063dbec15bb11610097578063e78cea9211610071578063e78cea9214610401578063eadd5c3414610419578063f2fde38b1461042c578063f70519ae1461043f57600080fd5b8063dbec15bb146103c8578063dd8c9039146103db578063e691a2aa146103ee57600080fd5b8063cbef5f2c116100c8578063cbef5f2c14610372578063d23fd79614610385578063d5f8fbcb146103b557600080fd5b8063b236d3f314610339578063c0c53b8b1461034c578063c4a588f81461035f57600080fd5b806368775278116101505780638bb398021161012a5780638bb39802146102ab5780638da5cb5b146102be5780639d866985146102cf57600080fd5b8063687752781461027b578063715018a61461029b5780638456cb59146102a357600080fd5b80635badbe4c116101815780635badbe4c1461022c5780635c975abb146102435780635d176f2f1461025057600080fd5b80633f4ba83a146101a8578063486ff0cd146101b2578063572b6c05146101fa575b600080fd5b6101b0610452565b005b604080518082018252600581527f322e302e31000000000000000000000000000000000000000000000000000000602082015290516101f19190613223565b60405180910390f35b61021c610208366004612c42565b6065546001600160a01b0391821691161490565b60405190151581526020016101f1565b61023560665481565b6040519081526020016101f1565b60675461021c9060ff1681565b606854610263906001600160a01b031681565b6040516001600160a01b0390911681526020016101f1565b610235610289366004612c42565b606b6020526000908152604090205481565b6101b0610520565b6101b06105a5565b6101b06102b9366004612cce565b610654565b6033546001600160a01b0316610263565b6103276102dd366004612d1c565b606a60205260009081526040902080546001820154600283015460038401546004909401546001600160a01b0393841694928416939192821691811690600160a01b900460ff1686565b6040516101f196959493929190613191565b6101b06103473660046130a7565b610725565b6101b061035a366004612c83565b610b18565b6101b061036d36600461304b565b610c89565b610235610380366004612f91565b610f4c565b6103a8610393366004612d1c565b60696020526000908152604090205460ff1681565b6040516101f19190613210565b6101b06103c3366004612e5b565b611503565b606c54610263906001600160a01b031681565b6101b06103e9366004612c42565b611a1f565b6102356103fc366004612d35565b611b53565b6067546102639061010090046001600160a01b031681565b6101b0610427366004612c42565b6121c0565b6101b061043a366004612c42565b612310565b6101b061044d366004613029565b61240e565b61045a61271c565b6001600160a01b03166104756033546001600160a01b031690565b6001600160a01b0316146104d05760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6067805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa61050361271c565b6040516001600160a01b03909116815260200160405180910390a1565b61052861271c565b6001600160a01b03166105436033546001600160a01b031690565b6001600160a01b0316146105995760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104c7565b6105a36000612762565b565b6105ad61271c565b6001600160a01b03166105c86033546001600160a01b031690565b6001600160a01b03161461061e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104c7565b6067805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861050361271c565b61065c61271c565b6001600160a01b03166106776033546001600160a01b031690565b6001600160a01b0316146106cd5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104c7565b6001600160a01b0382166000818152606b6020908152604091829020849055815192835282018390527fa6742efd4f410d6fd9688a6cf6a15b6d51121097a263056a3576baaacdc4a9ae910160405180910390a15050565b60675461010090046001600160a01b031633146107845760405162461bcd60e51b815260206004820152601e60248201527f53796d623a2063616c6c6572206973206e6f742074686520627269646765000060448201526064016104c7565b60675460ff16156107c65760405162461bcd60e51b815260206004820152600c60248201526b14de5b588e881c185d5cd95960a21b60448201526064016104c7565b60008581526069602052604081205460ff1660028111156107e9576107e96134b0565b146108825760405162461bcd60e51b815260206004820152604d60248201527f53796d623a2072657665727453796e74686573697a656452657175657374206360448201527f616c6c6564206f7220746f6b656e732068617665206265656e20616c7265616460648201527f792073796e74686573697a656400000000000000000000000000000000000000608482015260a4016104c7565b600085815260696020526040808220805460ff1916600117905560685490517f506890a00000000000000000000000000000000000000000000000000000000081526001600160a01b038781166004830152602482018790529091169063506890a09060440160206040518083038186803b15801561090057600080fd5b505afa158015610914573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109389190612c66565b90506001600160a01b0381166109b65760405162461bcd60e51b815260206004820152603460248201527f53796d623a205468657265206973206e6f2073796e7420726570726573656e7460448201527f6174696f6e20666f72207468697320746f6b656e00000000000000000000000060648201526084016104c7565b6068546001600160a01b031663e49029fc836109d28a8761341e565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015260248101919091529084166044820152606401600060405180830381600087803b158015610a2357600080fd5b505af1158015610a37573d6000803e3d6000fd5b50506068546067546040516339240a7f60e21b81526001600160a01b0361010090920482166004820152602481018c905285821660448201529116925063e49029fc9150606401600060405180830381600087803b158015610a9857600080fd5b505af1158015610aac573d6000803e3d6000fd5b50505050816001600160a01b0316867fcf9c9a943779bb691d0ed429f605107973fc5e52f4e10dffc28a1ef2d6784cb48986610ae8919061341e565b60408051918252602082018c90526001600160a01b038a169082015260600160405180910390a350505050505050565b600054610100900460ff16610b335760005460ff1615610b37565b303b155b610ba95760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016104c7565b600054610100900460ff16158015610be857600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b610bf1836127c1565b606780547fffffffffffffffffffffff0000000000000000000000000000000000000000ff166101006001600160a01b038781169190910291909117909155606c805473ffffffffffffffffffffffffffffffffffffffff19169184169190911790558015610c8357600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b50505050565b60675460ff1615610ccb5760405162461bcd60e51b815260206004820152600c60248201526b14de5b588e881c185d5cd95960a21b60448201526064016104c7565b60008530610cd761271c565b6040805160208101949094526bffffffffffffffffffffffff19606093841b811691850191909152911b16605482015246606882015260880160408051601f1981840301815291905280516020909101209050600160008281526069602052604090205460ff166002811115610d4f57610d4f6134b0565b1415610dc35760405162461bcd60e51b815260206004820152602560248201527f53796d623a2073796e74686574696320746f6b656e7320616c7265616479206d60448201527f696e74656400000000000000000000000000000000000000000000000000000060648201526084016104c7565b6000818152606960209081526040808320805460ff19166002179055805160608101909152602180825290916135aa908301398051602090910120604051602481018a90526044810184905260640160408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b0319909416939093179092526067549151633675e4e160e11b81529092506001600160a01b036101009092049190911690636cebc9c290610e989084908a908a908a906004016131da565b600060405180830381600087803b158015610eb257600080fd5b505af1158015610ec6573d6000803e3d6000fd5b5050505050610ed361271c565b6001600160a01b0316867f9bc8099e19706f253ae634ef1a5fb6ef84b4748c2183472905b9b2511cfa861760405160405180910390a3817f5a297b2c9a9f94a0f4e5a796c74ad38e219d1185fccf5f79c18726a830c2b6f587604051610f3b91815260200190565b60405180910390a250505050505050565b60675460009060ff1615610f915760405162461bcd60e51b815260206004820152600c60248201526b14de5b588e881c185d5cd95960a21b60448201526064016104c7565b6001600160a01b0389166000908152606b6020526040902054881015610ff95760405162461bcd60e51b815260206004820152601c60248201527f53796d623a20616d6f756e7420756e646572207468726573686f6c640000000060448201526064016104c7565b6068546001600160a01b031663a8160b7661101261271c565b6040516001600160e01b031960e084901b1681526001600160a01b039182166004820152602481018c9052908c166044820152606401600060405180830381600087803b15801561106257600080fd5b505af1158015611076573d6000803e3d6000fd5b505050506001600160a01b03841661108c578693505b6068546040517f161acb470000000000000000000000000000000000000000000000000000000081526001600160a01b038b81166004830152600092169063161acb479060240160206040518083038186803b1580156110eb57600080fd5b505afa1580156110ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111239190612c66565b90506001600160a01b03811661117b5760405162461bcd60e51b815260206004820152601460248201527f53796d623a20696e636f72726563742073796e7400000000000000000000000060448201526064016104c7565b6066546040516bffffffffffffffffffffffff193060601b166020820152603481019190915246605482015260740160408051601f1981840301815282825280516020918201209083018190526bffffffffffffffffffffffff1960608b811b8216938501939093529188901b90911660548301526068820186905292506000906088016040516020818303038152906040528051906020012090506000604051806060016040528060358152602001613575603591398051602090910120604051602481018f9052604481018490526001600160a01b038086166064830152608482018e90528c1660a482015260c40160408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990941693909317909252815160c081019092529150806112c761271c565b6001600160a01b0390811682528c81166020830152604082018e905285811660608301528e16608082015260a001600190526000838152606a60209081526040918290208351815473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b039283161783559285015160018301805485169183169190911790559284015160028083019190915560608501516003830180548516918616919091179055608085015160048301805494851691909516908117855560a0860151929492937fffffffffffffffffffffff000000000000000000000000000000000000000000161790600160a01b9084908111156113c9576113c96134b0565b02179055505060668054915060006113e083613461565b9091555050606754604051633675e4e160e11b81526101009091046001600160a01b031690636cebc9c29061141f9084908d908d908c906004016131da565b600060405180830381600087803b15801561143957600080fd5b505af115801561144d573d6000803e3d6000fd5b50505050505050836001600160a01b03168361146761271c565b604080518581526001600160a01b038c811660208301529181018d90528d821660608201529116907f5f00e8f0d61ff1190912879949026c85a81f3f96038c7f4cd868bdfe882e0eeb9060800160405180910390a4817f5a297b2c9a9f94a0f4e5a796c74ad38e219d1185fccf5f79c18726a830c2b6f5826040516114ee91815260200190565b60405180910390a29998505050505050505050565b60675461010090046001600160a01b031633146115625760405162461bcd60e51b815260206004820152601e60248201527f53796d623a2063616c6c6572206973206e6f742074686520627269646765000060448201526064016104c7565b60675460ff16156115a45760405162461bcd60e51b815260206004820152600c60248201526b14de5b588e881c185d5cd95960a21b60448201526064016104c7565b600060408083015160009081526069602052205460ff1660028111156115cc576115cc6134b0565b146116655760405162461bcd60e51b815260206004820152604d60248201527f53796d623a2072657665727453796e74686573697a656452657175657374206360448201527f616c6c6564206f7220746f6b656e732068617665206265656e20616c7265616460648201527f792073796e74686573697a656400000000000000000000000000000000000000608482015260a4016104c7565b60408181015160009081526069602052818120805460ff191660011790556068546060840151608085015193517f506890a00000000000000000000000000000000000000000000000000000000081526001600160a01b0391821660048201526024810194909452919291169063506890a09060440160206040518083038186803b1580156116f357600080fd5b505afa158015611707573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061172b9190612c66565b90506001600160a01b0381166117a95760405162461bcd60e51b815260206004820152603460248201527f53796d623a205468657265206973206e6f2073796e7420726570726573656e7460448201527f6174696f6e20666f72207468697320746f6b656e00000000000000000000000060648201526084016104c7565b606854825160208401516001600160a01b039092169163e49029fc9130916117d1919061341e565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015260248101919091529084166044820152606401600060405180830381600087803b15801561182257600080fd5b505af1158015611836573d6000803e3d6000fd5b505060685460675485516040516339240a7f60e21b81526001600160a01b0361010090930483166004820152602481019190915285821660448201529116925063e49029fc9150606401600060405180830381600087803b15801561189a57600080fd5b505af11580156118ae573d6000803e3d6000fd5b5050835160208501516118c4935090915061341e565b6020830181905260a08301516040808501518551606087015192516001600160a01b039094169491937fcf9c9a943779bb691d0ed429f605107973fc5e52f4e10dffc28a1ef2d6784cb49361193493929192835260208301919091526001600160a01b0316604082015260600190565b60405180910390a360c08201515161195d57611959818360a001518460200151612863565b5050565b61199f8260c00151600081518110611977576119776134c6565b6020026020010151606c60009054906101000a90046001600160a01b03168460200151612863565b606c546040517fe1edd61c0000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063e1edd61c906119e8908590600401613236565b600060405180830381600087803b158015611a0257600080fd5b505af1158015611a16573d6000803e3d6000fd5b50505050505b50565b611a2761271c565b6001600160a01b0316611a426033546001600160a01b031690565b6001600160a01b031614611a985760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104c7565b6068546001600160a01b031615611af15760405162461bcd60e51b815260206004820152601860248201527f53796d623a2046616272696320616c726561647920736574000000000000000060448201526064016104c7565b6068805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527fe7258eee4870ba270f25f5a42dd11bfe5a77658959c916807b94b8e9063c3cd0906020015b60405180910390a150565b60675460009060ff1615611b985760405162461bcd60e51b815260206004820152600c60248201526b14de5b588e881c185d5cd95960a21b60448201526064016104c7565b60808201516001600160a01b03166000908152606b6020908152604090912054908301511015611c0a5760405162461bcd60e51b815260206004820152601c60248201527f53796d623a20616d6f756e7420756e646572207468726573686f6c640000000060448201526064016104c7565b6068546001600160a01b031663a8160b76611c2361271c565b602085015160808601516040516001600160e01b031960e086901b1681526001600160a01b0393841660048201526024810192909252919091166044820152606401600060405180830381600087803b158015611c7f57600080fd5b505af1158015611c93573d6000803e3d6000fd5b505050506101408201516001600160a01b0316611cbf5760e08201516001600160a01b03166101408301525b60685460808301516040517f161acb470000000000000000000000000000000000000000000000000000000081526001600160a01b039182166004820152600092919091169063161acb479060240160206040518083038186803b158015611d2657600080fd5b505afa158015611d3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d5e9190612c66565b90506001600160a01b038116611db65760405162461bcd60e51b815260206004820152601460248201527f53796d623a20696e636f72726563742073796e7400000000000000000000000060448201526064016104c7565b6066546040516bffffffffffffffffffffffff193060601b166020820152603481019190915246605482015260740160408051601f1981840301815282825280516020918201206101008701516101408801516101608901519386018390526bffffffffffffffffffffffff19606092831b811695870195909552901b90921660548401526068830152925060009060880160405160208183030381529060405280519060200120905060006040518060800160405280604f8152602001613526604f9139805190602001208560000151838760e001518860200151878a606001518b60a001518c60c00151604051602401611eb9989796959493929190613342565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506040518060c0016040528086604001516001600160a01b031681526020018660e001516001600160a01b0316815260200186602001518152602001846001600160a01b0316815260200186608001516001600160a01b0316815260200160016002811115611f8857611f886134b0565b90526000838152606a60209081526040918290208351815473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b039283161783559285015160018301805485169183169190911790559284015160028083019190915560608501516003830180548516918616919091179055608085015160048301805494851691909516908117855560a0860151929492937fffffffffffffffffffffff000000000000000000000000000000000000000000161790600160a01b90849081111561205a5761205a6134b0565b021790555050606680549150600061207183613461565b909155505060675461010086810151610120880151610160890151604051633675e4e160e11b8152939094046001600160a01b031693636cebc9c2936120bf938793909290916004016131da565b600060405180830381600087803b1580156120d957600080fd5b505af11580156120ed573d6000803e3d6000fd5b505050505050508161014001516001600160a01b031682610160015183604001516001600160a01b03167f5f00e8f0d61ff1190912879949026c85a81f3f96038c7f4cd868bdfe882e0eeb848660e001518760200151886080015160405161217a94939291909384526001600160a01b039283166020850152604084019190915216606082015260800190565b60405180910390a46101808201516040518281527f5a297b2c9a9f94a0f4e5a796c74ad38e219d1185fccf5f79c18726a830c2b6f59060200160405180910390a2919050565b6121c861271c565b6001600160a01b03166121e36033546001600160a01b031690565b6001600160a01b0316146122395760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104c7565b6001600160a01b0381166122b55760405162461bcd60e51b815260206004820152602760248201527f53796d623a206d657461526f757465722063616e6e6f74206265207a65726f2060448201527f616464726573730000000000000000000000000000000000000000000000000060648201526084016104c7565b606c805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527fd5c54ab1d37bfef4dd2253d9d73c292e46f5bd8a67ca5920aab4c2e1993178e790602001611b48565b61231861271c565b6001600160a01b03166123336033546001600160a01b031690565b6001600160a01b0316146123895760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104c7565b6001600160a01b0381166124055760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016104c7565b611a1c81612762565b60675461010090046001600160a01b0316331461246d5760405162461bcd60e51b815260206004820152601e60248201527f53796d623a2063616c6c6572206973206e6f742074686520627269646765000060448201526064016104c7565b60675460ff16156124af5760405162461bcd60e51b815260206004820152600c60248201526b14de5b588e881c185d5cd95960a21b60448201526064016104c7565b6000818152606a6020526040902060016004820154600160a01b900460ff1660028111156124df576124df6134b0565b146125525760405162461bcd60e51b815260206004820152602960248201527f53796d623a207374617465206e6f74206f70656e206f7220747820646f65732060448201527f6e6f74206578697374000000000000000000000000000000000000000000000060648201526084016104c7565b6004810180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1674020000000000000000000000000000000000000000179055606854815460028301546001600160a01b039283169263e49029fc9216906125bc90879061341e565b60048581015460405160e086901b6001600160e01b03191681526001600160a01b0394851692810192909252602482019290925291166044820152606401600060405180830381600087803b15801561261457600080fd5b505af1158015612628573d6000803e3d6000fd5b50506068546067546004858101546040516339240a7f60e21b81526001600160a01b0361010090940484169281019290925260248201899052821660448201529116925063e49029fc9150606401600060405180830381600087803b15801561269057600080fd5b505af11580156126a4573d6000803e3d6000fd5b5050825460028401546001600160a01b0390911692508491507fb6f5f7b98cc78a8031c967af163a8c197f470a35df1e326a9038859679e6a184906126ea90879061341e565b600485015460408051928352602083018990526001600160a01b039091169082015260600160405180910390a3505050565b6065546000906001600160a01b031633141561275d57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c90565b503390565b603380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff1661282c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016104c7565b6128346129d2565b6065805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905291516000928392908716916128ed9190613175565b6000604051808303816000865af19150503d806000811461292a576040519150601f19603f3d011682016040523d82523d6000602084013e61292f565b606091505b50915091508180156129595750805115806129595750808060200190518101906129599190612cfa565b6129cb5760405162461bcd60e51b815260206004820152602d60248201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260448201527f616e73666572206661696c65640000000000000000000000000000000000000060648201526084016104c7565b5050505050565b600054610100900460ff16612a3d5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016104c7565b612a45612a4d565b6105a3612ab8565b600054610100900460ff166105a35760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016104c7565b600054610100900460ff16612b235760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016104c7565b6105a3612b2e61271c565b612762565b8035612b3e81613510565b919050565b600082601f830112612b5457600080fd5b8135602067ffffffffffffffff821115612b7057612b706134dc565b8160051b612b7f8282016133ed565b838152828101908684018388018501891015612b9a57600080fd5b600093505b85841015612bc6578035612bb281613510565b835260019390930192918401918401612b9f565b50979650505050505050565b600082601f830112612be357600080fd5b813567ffffffffffffffff811115612bfd57612bfd6134dc565b612c106020601f19601f840116016133ed565b818152846020838601011115612c2557600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215612c5457600080fd5b8135612c5f81613510565b9392505050565b600060208284031215612c7857600080fd5b8151612c5f81613510565b600080600060608486031215612c9857600080fd5b8335612ca381613510565b92506020840135612cb381613510565b91506040840135612cc381613510565b809150509250925092565b60008060408385031215612ce157600080fd5b8235612cec81613510565b946020939093013593505050565b600060208284031215612d0c57600080fd5b81518015158114612c5f57600080fd5b600060208284031215612d2e57600080fd5b5035919050565b600060208284031215612d4757600080fd5b813567ffffffffffffffff80821115612d5f57600080fd5b908301906101a08286031215612d7457600080fd5b612d7c61339f565b8235815260208301356020820152612d9660408401612b33565b6040820152612da760608401612b33565b6060820152612db860808401612b33565b608082015260a083013582811115612dcf57600080fd5b612ddb87828601612bd2565b60a08301525060c083013560c0820152612df760e08401612b33565b60e08201526101009150612e0c828401612b33565b828201526101209150612e20828401612b33565b828201526101409150612e34828401612b33565b91810191909152610160828101359082015261018091820135918101919091529392505050565b600060208284031215612e6d57600080fd5b813567ffffffffffffffff80821115612e8557600080fd5b908301906101808286031215612e9a57600080fd5b612ea26133c9565b823581526020830135602082015260408301356040820152612ec660608401612b33565b606082015260808301356080820152612ee160a08401612b33565b60a082015260c083013582811115612ef857600080fd5b612f0487828601612b43565b60c083015250612f1660e08401612b33565b60e08201526101008084013583811115612f2f57600080fd5b612f3b88828701612bd2565b828401525050610120612f4f818501612b33565b908201526101408381013583811115612f6757600080fd5b612f7388828701612bd2565b91830191909152506101609283013592810192909252509392505050565b60008060008060008060008060006101208a8c031215612fb057600080fd5b8935985060208a0135612fc281613510565b975060408a0135965060608a0135612fd981613510565b955060808a0135612fe981613510565b945060a08a0135612ff981613510565b935060c08a013561300981613510565b8093505060e08a013591506101008a013590509295985092959850929598565b6000806040838503121561303c57600080fd5b50508035926020909101359150565b60008060008060008060c0878903121561306457600080fd5b8635955060208701359450604087013561307d81613510565b9350606087013561308d81613510565b9598949750929560808101359460a0909101359350915050565b60008060008060008060c087890312156130c057600080fd5b863595506020870135945060408701356130d981613510565b9350606087013592506080870135915060a08701356130f781613510565b809150509295509295509295565b600081518084526020808501945080840160005b8381101561313e5781516001600160a01b031687529582019590820190600101613119565b509495945050505050565b60008151808452613161816020860160208601613435565b601f01601f19169290920160200192915050565b60008251613187818460208701613435565b9190910192915050565b6001600160a01b03878116825286811660208301526040820186905284811660608301528316608082015260c081016131c9836134f2565b8260a0830152979650505050505050565b6080815260006131ed6080830187613149565b6001600160a01b0395861660208401529390941660408201526060015292915050565b6020810161321d836134f2565b91905290565b602081526000612c5f6020830184613149565b602081528151602082015260208201516040820152604082015160608201526000606083015161327160808401826001600160a01b03169052565b50608083015160a083015260a083015161329660c08401826001600160a01b03169052565b5060c08301516101808060e08501526132b36101a0850183613105565b915060e08501516101006132d1818701836001600160a01b03169052565b80870151915050601f196101208187860301818801526132f18584613149565b945080880151925050610140613311818801846001600160a01b03169052565b8088015192505061016081878603018188015261332e8584613149565b970151959092019490945250929392505050565b60006101008a83528960208401526001600160a01b03808a166040850152886060850152808816608085015280871660a0850152508060c084015261338981840186613149565b9150508260e08301529998505050505050505050565b6040516101a0810167ffffffffffffffff811182821017156133c3576133c36134dc565b60405290565b604051610180810167ffffffffffffffff811182821017156133c3576133c36134dc565b604051601f8201601f1916810167ffffffffffffffff81118282101715613416576134166134dc565b604052919050565b6000828210156134305761343061349a565b500390565b60005b83811015613450578181015183820152602001613438565b83811115610c835750506000910152565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156134935761349361349a565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60038110611a1c57634e487b7160e01b600052602160045260246000fd5b6001600160a01b0381168114611a1c57600080fdfe6d657461556e73796e74686573697a652875696e743235362c627974657333322c616464726573732c75696e743235362c616464726573732c616464726573732c62797465732c75696e7432353629756e73796e74686573697a652875696e743235362c627974657333322c616464726573732c75696e743235362c616464726573732972657665727453796e74686573697a652875696e743235362c6279746573333229a2646970667358221220f3c15eb10ec752837a0be2d0a812ae24c6f2ac197e701f49b5da24c44d1159b964736f6c63430008070033';

var isSuperArgs = function isSuperArgs(xs) {
  return xs.length > 1;
};

var Synthesis__factory = /*#__PURE__*/function (_ContractFactory) {
  _inheritsLoose(Synthesis__factory, _ContractFactory);

  function Synthesis__factory() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    if (isSuperArgs(args)) {
      _this = _ContractFactory.call.apply(_ContractFactory, [this].concat(args)) || this;
      _this.contractName = void 0;
    } else {
      _this = _ContractFactory.call(this, _abi$1, _bytecode, args[0]) || this;
      _this.contractName = void 0;
    }

    _this.contractName = 'Synthesis';
    return _assertThisInitialized(_this);
  }

  var _proto = Synthesis__factory.prototype;

  _proto.deploy = function deploy(overrides) {
    return _ContractFactory.prototype.deploy.call(this, overrides || {});
  };

  _proto.getDeployTransaction = function getDeployTransaction(overrides) {
    return _ContractFactory.prototype.getDeployTransaction.call(this, overrides || {});
  };

  _proto.attach = function attach(address) {
    return _ContractFactory.prototype.attach.call(this, address);
  };

  _proto.connect = function connect(signer) {
    return _ContractFactory.prototype.connect.call(this, signer);
  };

  Synthesis__factory.createInterface = function createInterface() {
    return new ethers.utils.Interface(_abi$1);
  };

  Synthesis__factory.connect = function connect(address, signerOrProvider) {
    return new ethers.Contract(address, _abi$1, signerOrProvider);
  };

  return Synthesis__factory;
}(ethers.ContractFactory);
Synthesis__factory.contractName = void 0;
Synthesis__factory.bytecode = _bytecode;
Synthesis__factory.abi = _abi$1;

/* Autogenerated file. Do not edit manually. */
var _abi = [{
  inputs: [],
  name: 'WETH',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  stateMutability: 'pure',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'tokenA',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'tokenB',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'amountADesired',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountBDesired',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountAMin',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountBMin',
    type: 'uint256'
  }, {
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'deadline',
    type: 'uint256'
  }],
  name: 'addLiquidity',
  outputs: [{
    internalType: 'uint256',
    name: 'amountA',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountB',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'liquidity',
    type: 'uint256'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'token',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'amountTokenDesired',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountTokenMin',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountETHMin',
    type: 'uint256'
  }, {
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'deadline',
    type: 'uint256'
  }],
  name: 'addLiquidityETH',
  outputs: [{
    internalType: 'uint256',
    name: 'amountToken',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountETH',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'liquidity',
    type: 'uint256'
  }],
  stateMutability: 'payable',
  type: 'function'
}, {
  inputs: [],
  name: 'factory',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  stateMutability: 'pure',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'amountOut',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'reserveIn',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'reserveOut',
    type: 'uint256'
  }],
  name: 'getAmountIn',
  outputs: [{
    internalType: 'uint256',
    name: 'amountIn',
    type: 'uint256'
  }],
  stateMutability: 'pure',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'amountIn',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'reserveIn',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'reserveOut',
    type: 'uint256'
  }],
  name: 'getAmountOut',
  outputs: [{
    internalType: 'uint256',
    name: 'amountOut',
    type: 'uint256'
  }],
  stateMutability: 'pure',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'amountOut',
    type: 'uint256'
  }, {
    internalType: 'address[]',
    name: 'path',
    type: 'address[]'
  }],
  name: 'getAmountsIn',
  outputs: [{
    internalType: 'uint256[]',
    name: 'amounts',
    type: 'uint256[]'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'amountIn',
    type: 'uint256'
  }, {
    internalType: 'address[]',
    name: 'path',
    type: 'address[]'
  }],
  name: 'getAmountsOut',
  outputs: [{
    internalType: 'uint256[]',
    name: 'amounts',
    type: 'uint256[]'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'amountA',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'reserveA',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'reserveB',
    type: 'uint256'
  }],
  name: 'quote',
  outputs: [{
    internalType: 'uint256',
    name: 'amountB',
    type: 'uint256'
  }],
  stateMutability: 'pure',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'tokenA',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'tokenB',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'liquidity',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountAMin',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountBMin',
    type: 'uint256'
  }, {
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'deadline',
    type: 'uint256'
  }],
  name: 'removeLiquidity',
  outputs: [{
    internalType: 'uint256',
    name: 'amountA',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountB',
    type: 'uint256'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'token',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'liquidity',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountTokenMin',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountETHMin',
    type: 'uint256'
  }, {
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'deadline',
    type: 'uint256'
  }],
  name: 'removeLiquidityETH',
  outputs: [{
    internalType: 'uint256',
    name: 'amountToken',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountETH',
    type: 'uint256'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'token',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'liquidity',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountTokenMin',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountETHMin',
    type: 'uint256'
  }, {
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'deadline',
    type: 'uint256'
  }],
  name: 'removeLiquidityETHSupportingFeeOnTransferTokens',
  outputs: [{
    internalType: 'uint256',
    name: 'amountETH',
    type: 'uint256'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'token',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'liquidity',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountTokenMin',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountETHMin',
    type: 'uint256'
  }, {
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'deadline',
    type: 'uint256'
  }, {
    internalType: 'bool',
    name: 'approveMax',
    type: 'bool'
  }, {
    internalType: 'uint8',
    name: 'v',
    type: 'uint8'
  }, {
    internalType: 'bytes32',
    name: 'r',
    type: 'bytes32'
  }, {
    internalType: 'bytes32',
    name: 's',
    type: 'bytes32'
  }],
  name: 'removeLiquidityETHWithPermit',
  outputs: [{
    internalType: 'uint256',
    name: 'amountToken',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountETH',
    type: 'uint256'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'token',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'liquidity',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountTokenMin',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountETHMin',
    type: 'uint256'
  }, {
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'deadline',
    type: 'uint256'
  }, {
    internalType: 'bool',
    name: 'approveMax',
    type: 'bool'
  }, {
    internalType: 'uint8',
    name: 'v',
    type: 'uint8'
  }, {
    internalType: 'bytes32',
    name: 'r',
    type: 'bytes32'
  }, {
    internalType: 'bytes32',
    name: 's',
    type: 'bytes32'
  }],
  name: 'removeLiquidityETHWithPermitSupportingFeeOnTransferTokens',
  outputs: [{
    internalType: 'uint256',
    name: 'amountETH',
    type: 'uint256'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'tokenA',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'tokenB',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'liquidity',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountAMin',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountBMin',
    type: 'uint256'
  }, {
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'deadline',
    type: 'uint256'
  }, {
    internalType: 'bool',
    name: 'approveMax',
    type: 'bool'
  }, {
    internalType: 'uint8',
    name: 'v',
    type: 'uint8'
  }, {
    internalType: 'bytes32',
    name: 'r',
    type: 'bytes32'
  }, {
    internalType: 'bytes32',
    name: 's',
    type: 'bytes32'
  }],
  name: 'removeLiquidityWithPermit',
  outputs: [{
    internalType: 'uint256',
    name: 'amountA',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountB',
    type: 'uint256'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'amountOut',
    type: 'uint256'
  }, {
    internalType: 'address[]',
    name: 'path',
    type: 'address[]'
  }, {
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'deadline',
    type: 'uint256'
  }],
  name: 'swapETHForExactTokens',
  outputs: [{
    internalType: 'uint256[]',
    name: 'amounts',
    type: 'uint256[]'
  }],
  stateMutability: 'payable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'amountOutMin',
    type: 'uint256'
  }, {
    internalType: 'address[]',
    name: 'path',
    type: 'address[]'
  }, {
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'deadline',
    type: 'uint256'
  }],
  name: 'swapExactETHForTokens',
  outputs: [{
    internalType: 'uint256[]',
    name: 'amounts',
    type: 'uint256[]'
  }],
  stateMutability: 'payable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'amountOutMin',
    type: 'uint256'
  }, {
    internalType: 'address[]',
    name: 'path',
    type: 'address[]'
  }, {
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'deadline',
    type: 'uint256'
  }],
  name: 'swapExactETHForTokensSupportingFeeOnTransferTokens',
  outputs: [],
  stateMutability: 'payable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'amountIn',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountOutMin',
    type: 'uint256'
  }, {
    internalType: 'address[]',
    name: 'path',
    type: 'address[]'
  }, {
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'deadline',
    type: 'uint256'
  }],
  name: 'swapExactTokensForETH',
  outputs: [{
    internalType: 'uint256[]',
    name: 'amounts',
    type: 'uint256[]'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'amountIn',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountOutMin',
    type: 'uint256'
  }, {
    internalType: 'address[]',
    name: 'path',
    type: 'address[]'
  }, {
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'deadline',
    type: 'uint256'
  }],
  name: 'swapExactTokensForETHSupportingFeeOnTransferTokens',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'amountIn',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountOutMin',
    type: 'uint256'
  }, {
    internalType: 'address[]',
    name: 'path',
    type: 'address[]'
  }, {
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'deadline',
    type: 'uint256'
  }],
  name: 'swapExactTokensForTokens',
  outputs: [{
    internalType: 'uint256[]',
    name: 'amounts',
    type: 'uint256[]'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'amountIn',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountOutMin',
    type: 'uint256'
  }, {
    internalType: 'address[]',
    name: 'path',
    type: 'address[]'
  }, {
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'deadline',
    type: 'uint256'
  }],
  name: 'swapExactTokensForTokensSupportingFeeOnTransferTokens',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'amountOut',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountInMax',
    type: 'uint256'
  }, {
    internalType: 'address[]',
    name: 'path',
    type: 'address[]'
  }, {
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'deadline',
    type: 'uint256'
  }],
  name: 'swapTokensForExactETH',
  outputs: [{
    internalType: 'uint256[]',
    name: 'amounts',
    type: 'uint256[]'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'amountOut',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountInMax',
    type: 'uint256'
  }, {
    internalType: 'address[]',
    name: 'path',
    type: 'address[]'
  }, {
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'deadline',
    type: 'uint256'
  }],
  name: 'swapTokensForExactTokens',
  outputs: [{
    internalType: 'uint256[]',
    name: 'amounts',
    type: 'uint256[]'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}];
var UniLikeRouter__factory = /*#__PURE__*/function () {
  function UniLikeRouter__factory() {}

  UniLikeRouter__factory.createInterface = function createInterface() {
    return new ethers.utils.Interface(_abi);
  };

  UniLikeRouter__factory.connect = function connect(address, signerOrProvider) {
    return new ethers.Contract(address, _abi, signerOrProvider);
  };

  return UniLikeRouter__factory;
}();
UniLikeRouter__factory.abi = _abi;

exports.ErrorCode = void 0;

(function (ErrorCode) {
  ErrorCode[ErrorCode["DEFAULT"] = 0] = "DEFAULT";
  ErrorCode[ErrorCode["NO_ROUTE"] = 1] = "NO_ROUTE";
  ErrorCode[ErrorCode["AMOUNT_TOO_LOW"] = 2] = "AMOUNT_TOO_LOW";
  ErrorCode[ErrorCode["AMOUNT_TOO_HIGH"] = 3] = "AMOUNT_TOO_HIGH";
  ErrorCode[ErrorCode["AMOUNT_LESS_THAN_FEE"] = 4] = "AMOUNT_LESS_THAN_FEE";
})(exports.ErrorCode || (exports.ErrorCode = {}));

var Error$1 = function Error(message, code) {
  this.code = void 0;
  this.message = void 0;
  this.code = code || exports.ErrorCode.DEFAULT;
  this.message = message;
};

function getRepresentation(_x, _x2, _x3) {
  return _getRepresentation.apply(this, arguments);
}

function _getRepresentation() {
  _getRepresentation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(symbiosis, token, chainId) {
    var fabricChainId, fabric, representation;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            fabricChainId = token.isSynthetic ? token.chainId : chainId;
            fabric = symbiosis.fabric(fabricChainId);
            _context.prev = 2;

            if (!token.isSynthetic) {
              _context.next = 9;
              break;
            }

            _context.next = 6;
            return fabric.getRealRepresentation(token.address);

          case 6:
            representation = _context.sent;
            _context.next = 12;
            break;

          case 9:
            _context.next = 11;
            return fabric.getSyntRepresentation(token.address, token.chainId);

          case 11:
            representation = _context.sent;

          case 12:
            if (!(representation === constants.AddressZero)) {
              _context.next = 14;
              break;
            }

            return _context.abrupt("return", undefined);

          case 14:
            return _context.abrupt("return", symbiosis.findStable(representation, chainId));

          case 17:
            _context.prev = 17;
            _context.t0 = _context["catch"](2);
            return _context.abrupt("return", undefined);

          case 20:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[2, 17]]);
  }));
  return _getRepresentation.apply(this, arguments);
}

var RevertPending = /*#__PURE__*/function () {
  function RevertPending(symbiosis, request) {
    this.symbiosis = void 0;
    this.request = void 0;
    this.symbiosis = symbiosis;
    this.request = request;
  }

  var _proto = RevertPending.prototype;

  _proto.revert = /*#__PURE__*/function () {
    var _revert = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
      var _this = this;

      var fee, transactionRequest;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.getFee();

            case 2:
              fee = _context.sent;
              transactionRequest = this.getTransactionRequest(fee);
              return _context.abrupt("return", {
                fee: fee,
                transactionRequest: transactionRequest,
                execute: function execute(signer) {
                  return _this.execute(transactionRequest, signer);
                }
              });

            case 5:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function revert() {
      return _revert.apply(this, arguments);
    }

    return revert;
  }() // Wait for the revert transaction to be mined on the original chain
  ;

  _proto.waitForComplete =
  /*#__PURE__*/
  function () {
    var _waitForComplete = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
      var _this$request, chainIdFrom, type, externalId, filter, otherPortal, otherSynthesis, log;

      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _this$request = this.request, chainIdFrom = _this$request.chainIdFrom, type = _this$request.type;
              externalId = this.getExternalId();

              if (type === 'synthesize') {
                otherPortal = this.symbiosis.portal(chainIdFrom);
                filter = otherPortal.filters.RevertSynthesizeCompleted(externalId);
              } else {
                otherSynthesis = this.symbiosis.synthesis(chainIdFrom);
                filter = otherSynthesis.filters.RevertBurnCompleted(externalId);
              }

              _context2.next = 5;
              return getLogWithTimeout({
                chainId: chainIdFrom,
                filter: filter,
                symbiosis: this.symbiosis
              });

            case 5:
              log = _context2.sent;
              return _context2.abrupt("return", log.transactionHash);

            case 7:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function waitForComplete() {
      return _waitForComplete.apply(this, arguments);
    }

    return waitForComplete;
  }();

  _proto.getFee = /*#__PURE__*/function () {
    var _getFee = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
      var _this$request2, type, chainIdTo, chainIdFrom, externalId, receiveSide, calldata, portal, synthesis, fee, feeTokenAmount;

      return _regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _this$request2 = this.request, type = _this$request2.type, chainIdTo = _this$request2.chainIdTo, chainIdFrom = _this$request2.chainIdFrom;
              externalId = this.getExternalId();

              if (type === 'synthesize') {
                portal = this.symbiosis.portal(chainIdFrom);
                calldata = portal["interface"].encodeFunctionData('revertSynthesize', ['0', externalId]);
                receiveSide = portal.address;
              } else {
                synthesis = this.symbiosis.synthesis(chainIdFrom);
                calldata = synthesis["interface"].encodeFunctionData('revertBurn', ['0', externalId]);
                receiveSide = synthesis.address;
              }

              _context3.next = 5;
              return this.symbiosis.getBridgeFee({
                receiveSide: receiveSide,
                calldata: calldata,
                chainIdFrom: chainIdTo,
                chainIdTo: chainIdFrom
              });

            case 5:
              fee = _context3.sent;
              feeTokenAmount = new TokenAmount(this.request.fromTokenAmount.token, fee);

              if (!this.request.fromTokenAmount.lessThan(feeTokenAmount)) {
                _context3.next = 9;
                break;
              }

              throw new Error$1("Amount $" + this.request.fromTokenAmount.toSignificant() + " less than fee $" + feeTokenAmount.toSignificant(), exports.ErrorCode.AMOUNT_LESS_THAN_FEE);

            case 9:
              return _context3.abrupt("return", feeTokenAmount);

            case 10:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function getFee() {
      return _getFee.apply(this, arguments);
    }

    return getFee;
  }();

  _proto.getTransactionRequest = function getTransactionRequest(fee) {
    if (this.request.type === 'synthesize') {
      return this.getRevertSynthesizeTransactionRequest(fee);
    }

    return this.getRevertBurnTransactionRequest(fee);
  };

  _proto.getRevertSynthesizeTransactionRequest = function getRevertSynthesizeTransactionRequest(fee) {
    var _this$request3 = this.request,
        internalId = _this$request3.internalId,
        chainIdTo = _this$request3.chainIdTo,
        chainIdFrom = _this$request3.chainIdFrom;
    var synthesis = this.symbiosis.synthesis(chainIdTo);
    var otherPortal = this.symbiosis.portal(chainIdFrom);
    var otherBridge = this.symbiosis.bridge(chainIdFrom);
    return {
      to: synthesis.address,
      data: synthesis["interface"].encodeFunctionData('revertSynthesizeRequest', [fee.raw.toString(), internalId, otherPortal.address, otherBridge.address, chainIdFrom, this.symbiosis.clientId]),
      chainId: chainIdTo
    };
  };

  _proto.getRevertBurnTransactionRequest = function getRevertBurnTransactionRequest(fee) {
    var _this$request4 = this.request,
        internalId = _this$request4.internalId,
        chainIdTo = _this$request4.chainIdTo,
        chainIdFrom = _this$request4.chainIdFrom;
    var otherBridge = this.symbiosis.bridge(chainIdFrom);
    var portal = this.symbiosis.portal(chainIdTo);
    var otherSynthesis = this.symbiosis.synthesis(chainIdFrom);
    return {
      to: portal.address,
      data: portal["interface"].encodeFunctionData('revertBurnRequest', [fee.raw.toString(), internalId, otherSynthesis.address, otherBridge.address, chainIdFrom, this.symbiosis.clientId]),
      chainId: chainIdTo
    };
  };

  _proto.execute = /*#__PURE__*/function () {
    var _execute = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(transactionRequest, signer) {
      var _this2 = this;

      var transactionRequestWithGasLimit, gasLimit, transaction;
      return _regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              transactionRequestWithGasLimit = _extends({}, transactionRequest);
              _context4.next = 3;
              return signer.estimateGas(transactionRequest);

            case 3:
              gasLimit = _context4.sent;
              transactionRequestWithGasLimit.gasLimit = calculateGasMargin(gasLimit);
              _context4.next = 7;
              return signer.sendTransaction(transactionRequestWithGasLimit);

            case 7:
              transaction = _context4.sent;
              return _context4.abrupt("return", {
                waitForMined: function waitForMined(confirmations) {
                  if (confirmations === void 0) {
                    confirmations = 1;
                  }

                  return _this2.waitForMined(confirmations, transaction);
                },
                transaction: transaction
              });

            case 9:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));

    function execute(_x, _x2) {
      return _execute.apply(this, arguments);
    }

    return execute;
  }();

  _proto.waitForMined = /*#__PURE__*/function () {
    var _waitForMined = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(confirmations, response) {
      var _this3 = this;

      var receipt;
      return _regeneratorRuntime.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return response.wait(confirmations);

            case 2:
              receipt = _context5.sent;
              return _context5.abrupt("return", {
                receipt: receipt,
                waitForComplete: function waitForComplete() {
                  return _this3.waitForComplete();
                }
              });

            case 4:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5);
    }));

    function waitForMined(_x3, _x4) {
      return _waitForMined.apply(this, arguments);
    }

    return waitForMined;
  }();

  _proto.getExternalId = function getExternalId$1() {
    var _this$request5 = this.request,
        type = _this$request5.type,
        internalId = _this$request5.internalId,
        chainId = _this$request5.chainIdTo,
        revertableAddress = _this$request5.revertableAddress;
    var contractAddress;

    if (type === 'synthesize') {
      contractAddress = this.symbiosis.synthesis(chainId).address;
    } else {
      contractAddress = this.symbiosis.portal(chainId).address;
    }

    return getExternalId({
      internalId: internalId,
      chainId: chainId,
      revertableAddress: revertableAddress,
      contractAddress: contractAddress
    });
  };

  return RevertPending;
}();

var NoMulticallAddressError = /*#__PURE__*/function (_Error) {
  _inheritsLoose(NoMulticallAddressError, _Error);

  function NoMulticallAddressError(chainId) {
    return _Error.call(this, "Failed to create Multicall instance. We do not know the multicall address on this network. ChainId: " + chainId) || this;
  }

  return NoMulticallAddressError;
}( /*#__PURE__*/_wrapNativeSuper(Error));
function getMulticall(_x) {
  return _getMulticall.apply(this, arguments);
}

function _getMulticall() {
  _getMulticall = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(provider) {
    var _yield$provider$getNe, chainId, address;

    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return provider.getNetwork();

          case 2:
            _yield$provider$getNe = _context.sent;
            chainId = _yield$provider$getNe.chainId;
            address = MULTICALL_ADDRESSES[chainId];

            if (address) {
              _context.next = 7;
              break;
            }

            throw new NoMulticallAddressError(chainId);

          case 7:
            return _context.abrupt("return", Multicall__factory.connect(address, provider));

          case 8:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getMulticall.apply(this, arguments);
}

var UniLikeTrade = /*#__PURE__*/function () {
  function UniLikeTrade(tokenAmountIn, tokenOut, to, slippage, deadline, router, dexFee) {
    this.tokenAmountIn = void 0;
    this.trade = void 0;
    this.route = void 0;
    this.amountOut = void 0;
    this.callData = void 0;
    this.priceImpact = void 0;
    this.routerAddress = void 0;
    this.callDataOffset = void 0;
    this.pairs = void 0;
    this.tokenOut = void 0;
    this.to = void 0;
    this.deadline = void 0;
    this.slippage = void 0;
    this.router = void 0;
    this.dexFee = void 0;
    this.tokenAmountIn = tokenAmountIn;
    this.tokenOut = tokenOut;
    this.to = to;
    this.slippage = slippage;
    this.deadline = deadline;
    this.router = router;
    this.routerAddress = router.address;
    this.dexFee = dexFee;
  }

  var _proto = UniLikeTrade.prototype;

  _proto.init = /*#__PURE__*/function () {
    var _init = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dataProvider) {
      var trade, priceImpact, amountOut, _this$buildCallData, data, offset;

      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!dataProvider) {
                _context.next = 6;
                break;
              }

              _context.next = 3;
              return dataProvider.getPairs(this.tokenAmountIn.token, this.tokenOut);

            case 3:
              this.pairs = _context.sent;
              _context.next = 9;
              break;

            case 6:
              _context.next = 8;
              return UniLikeTrade.getPairs(this.router.provider, this.tokenAmountIn.token, this.tokenOut);

            case 8:
              this.pairs = _context.sent;

            case 9:
              trade = Trade.bestTradeExactIn(this.pairs, this.tokenAmountIn, this.tokenOut, {
                maxHops: 3,
                maxNumResults: 1
              })[0];

              if (trade) {
                _context.next = 12;
                break;
              }

              throw new Error('Cannot create trade');

            case 12:
              this.trade = trade;
              priceImpact = computeTradePriceBreakdown(this.trade, this.dexFee).priceImpactWithoutFee;

              if (priceImpact) {
                _context.next = 16;
                break;
              }

              throw new Error('Cannot calculate priceImpact');

            case 16:
              this.priceImpact = priceImpact;
              this.route = trade.route.path;
              amountOut = computeSlippageAdjustedAmounts(trade, this.slippage).OUTPUT;

              if (amountOut) {
                _context.next = 21;
                break;
              }

              throw new Error('Cannot compute amountOut');

            case 21:
              this.amountOut = amountOut;
              _this$buildCallData = this.buildCallData(trade), data = _this$buildCallData.data, offset = _this$buildCallData.offset;
              this.callData = data;
              this.callDataOffset = offset;

              if (this.callData) {
                _context.next = 27;
                break;
              }

              throw new Error('Cannot build callData');

            case 27:
              return _context.abrupt("return", this);

            case 28:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function init(_x) {
      return _init.apply(this, arguments);
    }

    return init;
  }();

  _proto.buildCallData = function buildCallData(trade) {
    var _Router$swapCallParam = Router.swapCallParameters(trade, {
      allowedSlippage: new Percent(JSBI__default["default"].BigInt(Math.floor(this.slippage)), BIPS_BASE),
      recipient: this.to,
      ttl: this.deadline
    }),
        methodName = _Router$swapCallParam.methodName,
        args = _Router$swapCallParam.args,
        offset = _Router$swapCallParam.offset;

    var method = methodName; // TODO replace if condition to method mapping

    if (trade.inputAmount.token.chainId === exports.ChainId.AVAX_MAINNET) {
      method = methodName.replace('ETH', 'AVAX');
    }

    if ([exports.ChainId.MILKOMEDA_DEVNET, exports.ChainId.MILKOMEDA_MAINNET].includes(trade.inputAmount.token.chainId)) {
      method = methodName.replace('ETH', 'ADA');
    }

    return {
      data: this.router["interface"].encodeFunctionData(method, args),
      offset: offset
    };
  };

  UniLikeTrade.getPairs = /*#__PURE__*/function () {
    var _getPairs = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(provider, tokenIn, tokenOut) {
      var allPairCombinations, allPairs;
      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              allPairCombinations = UniLikeTrade.allPairCombinations(tokenIn, tokenOut);
              _context2.next = 3;
              return UniLikeTrade.allPairs(provider, allPairCombinations);

            case 3:
              allPairs = _context2.sent;
              return _context2.abrupt("return", Object.values(allPairs // filter out invalid pairs
              .filter(function (result) {
                return Boolean(result[0] === exports.PairState.EXISTS && result[1]);
              }) // filter out duplicated pairs
              .reduce(function (memo, _ref) {
                var _memo$curr$liquidityT;

                var curr = _ref[1];
                memo[curr.liquidityToken.address] = (_memo$curr$liquidityT = memo[curr.liquidityToken.address]) != null ? _memo$curr$liquidityT : curr;
                return memo;
              }, {})));

            case 5:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    function getPairs(_x2, _x3, _x4) {
      return _getPairs.apply(this, arguments);
    }

    return getPairs;
  }();

  UniLikeTrade.allPairs = /*#__PURE__*/function () {
    var _allPairs = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(provider, tokens) {
      var wrappedTokens, pairAddresses, pairInterface, getReservesData, calls, multicall, aggregateResult, reserves;
      return _regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              wrappedTokens = tokens.map(function (_ref2) {
                var tokenA = _ref2[0],
                    tokenB = _ref2[1];
                return [wrappedToken(tokenA), wrappedToken(tokenB)];
              });
              pairAddresses = wrappedTokens.map(function (_ref3) {
                var tokenA = _ref3[0],
                    tokenB = _ref3[1];
                if (!tokenA || !tokenB) throw new Error();
                if (tokenA.chainId !== tokenB.chainId) throw new Error();
                if (tokenA.equals(tokenB)) throw new Error();
                return Pair.getAddress(tokenA, tokenB);
              });
              pairInterface = Pair__factory.createInterface();
              getReservesData = pairInterface.encodeFunctionData('getReserves');
              calls = pairAddresses.map(function (pairAddress) {
                return {
                  target: pairAddress,
                  callData: getReservesData
                };
              });
              _context3.next = 7;
              return getMulticall(provider);

            case 7:
              multicall = _context3.sent;
              _context3.next = 10;
              return multicall.callStatic.tryAggregate(false, calls);

            case 10:
              aggregateResult = _context3.sent;
              reserves = aggregateResult.map(function (_ref4) {
                var success = _ref4[0],
                    returnData = _ref4[1];
                if (!success || returnData === '0x') return;
                return pairInterface.decodeFunctionResult('getReserves', returnData);
              });
              return _context3.abrupt("return", reserves.map(function (reserve, i) {
                var tokenA = wrappedTokens[i][0];
                var tokenB = wrappedTokens[i][1]; // if (loading) return [PairState.LOADING, null]

                if (!tokenA || !tokenB || tokenA.equals(tokenB)) return [exports.PairState.INVALID, null];
                if (!reserve) return [exports.PairState.NOT_EXISTS, null];
                var reserve0 = reserve.reserve0,
                    reserve1 = reserve.reserve1;

                var _ref5 = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA],
                    token0 = _ref5[0],
                    token1 = _ref5[1];

                return [exports.PairState.EXISTS, new Pair(new TokenAmount(token0, reserve0.toString()), new TokenAmount(token1, reserve1.toString()))];
              }));

            case 13:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    function allPairs(_x5, _x6) {
      return _allPairs.apply(this, arguments);
    }

    return allPairs;
  }();

  UniLikeTrade.allPairCombinations = function allPairCombinations(tokenIn, tokenOut) {
    var chainId = tokenIn.chainId; // Base tokens for building intermediary trading routes

    var bases = BASES_TO_CHECK_TRADES_AGAINST[chainId];

    if (!bases) {
      throw new Error('Bases not found');
    } // All pairs from base tokens


    var basePairs = flatMap__default["default"](bases, function (base) {
      return bases.map(function (otherBase) {
        return [base, otherBase];
      });
    }).filter(function (_ref6) {
      var t0 = _ref6[0],
          t1 = _ref6[1];
      return t0.address !== t1.address;
    });
    var _ref7 = [wrappedToken(tokenIn), wrappedToken(tokenOut)],
        tokenA = _ref7[0],
        tokenB = _ref7[1];

    if (!tokenA || !tokenB) {
      return [];
    }

    return [// the direct pair
    [tokenA, tokenB]].concat(bases.map(function (base) {
      return [tokenA, base];
    }), bases.map(function (base) {
      return [tokenB, base];
    }), basePairs).filter(function (tokens) {
      return Boolean(tokens[0] && tokens[1]);
    }).filter(function (_ref8) {
      var t0 = _ref8[0],
          t1 = _ref8[1];
      return t0.address !== t1.address;
    }) // This filter will remove all the pairs that are not supported by the CUSTOM_BASES settings
    // This option is currently not used on Pancake swap
    .filter(function (_ref9) {
      var t0 = _ref9[0],
          t1 = _ref9[1];
      if (!chainId) return true;
      var customBases = CUSTOM_BASES[chainId];
      if (!customBases) return true;
      var customBasesA = customBases[t0.address];
      var customBasesB = customBases[t1.address];
      if (!customBasesA && !customBasesB) return true;
      if (customBasesA && !customBasesA.find(function (base) {
        return t1.equals(base);
      })) return false;
      if (customBasesB && !customBasesB.find(function (base) {
        return t0.equals(base);
      })) return false;
      return true;
    });
  };

  return UniLikeTrade;
}();

var API_URL = 'https://api.1inch.io/v4.0';
var OneInchTrade = /*#__PURE__*/function () {
  function OneInchTrade(tokenAmountIn, tokenOut, from, to, slippage, oracle, dataProvider) {
    this.tokenAmountIn = void 0;
    this.route = void 0;
    this.amountOut = void 0;
    this.callData = void 0;
    this.priceImpact = void 0;
    this.routerAddress = void 0;
    this.oracle = void 0;
    this.callDataOffset = void 0;
    this.tokenOut = void 0;
    this.from = void 0;
    this.to = void 0;
    this.slippage = void 0;
    this.dataProvider = void 0;
    this.tokenAmountIn = tokenAmountIn;
    this.tokenOut = tokenOut;
    this.from = from;
    this.to = to;
    this.slippage = slippage;
    this.oracle = oracle;
    this.dataProvider = dataProvider;
  }

  var _proto = OneInchTrade.prototype;

  _proto.init = /*#__PURE__*/function () {
    var _init = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
      var nativeAddress, fromTokenAddress, toTokenAddress, protocols, params, url, response, json, tx, amountOutRaw;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              nativeAddress = '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE';
              fromTokenAddress = this.tokenAmountIn.token.address;

              if (this.tokenAmountIn.token.isNative) {
                fromTokenAddress = nativeAddress;
              }

              toTokenAddress = this.tokenOut.address;

              if (this.tokenOut.isNative) {
                toTokenAddress = nativeAddress;
              }

              _context.next = 7;
              return this.dataProvider.getOneInchProtocols(this.tokenAmountIn.token.chainId);

            case 7:
              protocols = _context.sent;
              params = [];
              params.push("fromTokenAddress=" + fromTokenAddress);
              params.push("toTokenAddress=" + toTokenAddress);
              params.push("amount=" + this.tokenAmountIn.raw.toString());
              params.push("fromAddress=" + this.from);
              params.push("destReceiver=" + this.to);
              params.push("slippage=" + this.slippage);
              params.push("disableEstimate=true");
              params.push("allowPartialFill=false");
              params.push("usePatching=true");
              params.push("protocols=" + protocols.map(function (i) {
                return i.id;
              }).join(','));
              url = API_URL + "/" + this.tokenAmountIn.token.chainId + "/swap?" + params.join('&');
              _context.next = 22;
              return fetch__default["default"](url);

            case 22:
              response = _context.sent;
              _context.next = 25;
              return response.json();

            case 25:
              json = _context.sent;

              if (!(response.status === 400)) {
                _context.next = 28;
                break;
              }

              throw new Error("Cannot build 1inch trade: " + json['description']);

            case 28:
              tx = json['tx'];
              amountOutRaw = json['toTokenAmount'];
              this.routerAddress = tx.to;
              this.callData = tx.data;
              this.callDataOffset = this.getOffset(tx.data);
              this.amountOut = new TokenAmount(this.tokenOut, amountOutRaw);
              this.route = [this.tokenAmountIn.token, this.tokenOut];
              _context.next = 37;
              return this.calculatePriceImpact(this.tokenAmountIn, this.amountOut);

            case 37:
              this.priceImpact = _context.sent;
              return _context.abrupt("return", this);

            case 39:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function init() {
      return _init.apply(this, arguments);
    }

    return init;
  }();

  OneInchTrade.getProtocols = /*#__PURE__*/function () {
    var _getProtocols = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(chainId) {
      var url, response, json;
      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              url = API_URL + "/" + chainId + "/liquidity-sources";
              _context2.next = 3;
              return fetch__default["default"](url);

            case 3:
              response = _context2.sent;
              _context2.next = 6;
              return response.json();

            case 6:
              json = _context2.sent;

              if (!(response.status === 400)) {
                _context2.next = 9;
                break;
              }

              throw new Error("Cannot get 1inch protocols: " + json['description']);

            case 9:
              return _context2.abrupt("return", json['protocols'].reduce(function (acc, protocol) {
                if (protocol.id.includes('ONE_INCH_LIMIT_ORDER')) {
                  return acc;
                }

                if (protocol.id.includes('PMM')) {
                  return acc;
                }

                acc.push(protocol);
                return acc;
              }, []));

            case 10:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    function getProtocols(_x) {
      return _getProtocols.apply(this, arguments);
    }

    return getProtocols;
  }();

  _proto.getOffset = function getOffset(callData) {
    var methods = [{
      // swap(address,(address,address,address,address,uint256,uint256,uint256,bytes),bytes)
      sigHash: '7c025200',
      offset: 260
    }, {
      // clipperSwapTo(address,address,address,uint256,uint256)
      sigHash: '9994dd15',
      offset: 132
    }, {
      // fillOrderRFQTo((uint256,address,address,address,address,uint256,uint256),bytes,uint256,uint256,address)
      sigHash: 'baba5855',
      offset: 292
    }, {
      // uniswapV3SwapTo(address,uint256,uint256,uint256[])
      sigHash: 'bc80f1a8',
      offset: 68
    }];
    var sigHash = callData.slice(2, 10);
    var method = methods.find(function (i) {
      return i.sigHash === sigHash;
    });
    return method == null ? void 0 : method.offset;
  };

  OneInchTrade.getRateToEth = /*#__PURE__*/function () {
    var _getRateToEth = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(tokens, oracle) {
      var calls, multicall;
      return _regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              calls = tokens.map(function (token) {
                return {
                  target: oracle.address,
                  callData: oracle["interface"].encodeFunctionData('getRateToEth', [token.address, true] // use wrapper
                  )
                };
              });
              _context3.next = 3;
              return getMulticall(oracle.provider);

            case 3:
              multicall = _context3.sent;
              _context3.next = 6;
              return multicall.callStatic.tryAggregate(false, calls);

            case 6:
              return _context3.abrupt("return", _context3.sent);

            case 7:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    function getRateToEth(_x2, _x3) {
      return _getRateToEth.apply(this, arguments);
    }

    return getRateToEth;
  }();

  _proto.calculatePriceImpact = /*#__PURE__*/function () {
    var _calculatePriceImpact = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(tokenAmountIn, tokenAmountOut) {
      var _this = this;

      var tokens, aggregated, denominator, data, multiplierPow, multiplier, spot, inBn, outBn, real, impact, impactNumber;
      return _regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              tokens = [wrappedToken(tokenAmountIn.token), wrappedToken(tokenAmountOut.token)];
              _context4.next = 3;
              return this.dataProvider.getOneInchRateToEth(tokens, this.oracle);

            case 3:
              aggregated = _context4.sent;
              denominator = ethers.BigNumber.from(10).pow(18); // eth decimals

              data = aggregated.map(function (_ref, i) {
                var success = _ref[0],
                    returnData = _ref[1];
                if (!success || returnData === '0x') return;

                var result = _this.oracle["interface"].decodeFunctionResult('getRateToEth', returnData);

                var numerator = ethers.BigNumber.from(10).pow(tokens[i].decimals);
                return ethers.BigNumber.from(result.weightedRate).mul(numerator).div(denominator);
              });

              if (!(!data[0] || !data[1])) {
                _context4.next = 8;
                break;
              }

              throw new Error('OneInch oracle: cannot to receive rate to ETH');

            case 8:
              multiplierPow = 18;
              multiplier = ethers.BigNumber.from(10).pow(multiplierPow);
              spot = data[0].mul(multiplier).div(data[1]); // with e18
              // calc real rate

              inBn = ethers.BigNumber.from(tokenAmountIn.raw.toString()).mul(ethers.BigNumber.from(10).pow(tokenAmountOut.token.decimals));
              outBn = ethers.BigNumber.from(tokenAmountOut.raw.toString()).mul(ethers.BigNumber.from(10).pow(tokenAmountIn.token.decimals));
              real = outBn.mul(multiplier).div(inBn);
              impact = real.mul(multiplier).div(spot);
              impactNumber = 1 - Number.parseFloat(units.formatUnits(impact, multiplierPow));
              return _context4.abrupt("return", new Percent(parseInt("" + impactNumber * JSBI__default["default"].toNumber(BIPS_BASE)).toString(), BIPS_BASE));

            case 17:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    function calculatePriceImpact(_x4, _x5) {
      return _calculatePriceImpact.apply(this, arguments);
    }

    return calculatePriceImpact;
  }();

  return OneInchTrade;
}();

var DataProvider = /*#__PURE__*/function () {
  function DataProvider(symbiosis) {
    this.symbiosis = void 0;
    this.cache = new Map();
    this.symbiosis = symbiosis;
  }

  var _proto = DataProvider.prototype;

  _proto.getRepresentation = /*#__PURE__*/function () {
    var _getRepresentation = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(token, chainId) {
      var _this = this;

      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", this.fromCache(['getRepresentation', token.address, chainId], function () {
                return _this.symbiosis.getRepresentation(token, chainId);
              }));

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function getRepresentation(_x, _x2) {
      return _getRepresentation.apply(this, arguments);
    }

    return getRepresentation;
  }();

  _proto.getPairs = /*#__PURE__*/function () {
    var _getPairs = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(tokenIn, tokenOut) {
      var _this2 = this;

      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", this.fromCache(['getPairs', tokenIn.address, tokenIn.address], function () {
                var provider = _this2.symbiosis.getProvider(tokenIn.chainId);

                return UniLikeTrade.getPairs(provider, tokenIn, tokenOut);
              }));

            case 1:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function getPairs(_x3, _x4) {
      return _getPairs.apply(this, arguments);
    }

    return getPairs;
  }();

  _proto.getOneInchProtocols = /*#__PURE__*/function () {
    var _getOneInchProtocols = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(chainId) {
      return _regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", this.fromCache(['getOneInchProtocols', chainId], function () {
                return OneInchTrade.getProtocols(chainId);
              }));

            case 1:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function getOneInchProtocols(_x5) {
      return _getOneInchProtocols.apply(this, arguments);
    }

    return getOneInchProtocols;
  }();

  _proto.getOneInchRateToEth = /*#__PURE__*/function () {
    var _getOneInchRateToEth = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(tokens, oracle) {
      return _regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              return _context4.abrupt("return", this.fromCache(['getOneInchRateToEth'].concat(tokens.map(function (i) {
                return i.address;
              })), function () {
                return OneInchTrade.getRateToEth(tokens, oracle);
              }));

            case 1:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    function getOneInchRateToEth(_x6, _x7) {
      return _getOneInchRateToEth.apply(this, arguments);
    }

    return getOneInchRateToEth;
  }();

  _proto.fromCache = /*#__PURE__*/function () {
    var _fromCache = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(key, func) {
      var stringKey, value;
      return _regeneratorRuntime.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              stringKey = key.join('-');
              value = this.cache.get(stringKey);

              if (!value) {
                _context5.next = 4;
                break;
              }

              return _context5.abrupt("return", value);

            case 4:
              _context5.next = 6;
              return func();

            case 6:
              value = _context5.sent;
              this.cache.set(stringKey, value);
              return _context5.abrupt("return", value);

            case 9:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this);
    }));

    function fromCache(_x8, _x9) {
      return _fromCache.apply(this, arguments);
    }

    return fromCache;
  }();

  return DataProvider;
}();

var NerveTrade = /*#__PURE__*/function () {
  function NerveTrade(tokenAmountIn, tokenOut, slippage, deadline, pool, symbiosis) {
    this.tokenAmountIn = void 0;
    this.pool = void 0;
    this.route = void 0;
    this.amountOut = void 0;
    this.callData = void 0;
    this.priceImpact = void 0;
    this.symbiosis = void 0;
    this.tokenOut = void 0;
    this.deadline = void 0;
    this.slippage = void 0;
    this.tokenAmountIn = tokenAmountIn;
    this.tokenOut = tokenOut;
    this.deadline = deadline;
    this.slippage = slippage;
    this.pool = pool;
    this.symbiosis = symbiosis;
  }

  var _proto = NerveTrade.prototype;

  _proto.init = /*#__PURE__*/function () {
    var _init = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
      var chainId, _this$symbiosis$getNe, indexTokenIn, indexTokenOut, amountOut, slippageTolerance, slippageAdjustedAmountOut, priceImpact;

      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.route = [this.tokenAmountIn.token, this.tokenOut];
              chainId = this.tokenAmountIn.token.chainId;
              _this$symbiosis$getNe = this.symbiosis.getNerveTokenIndexes(chainId, this.tokenAmountIn.token.address, this.tokenOut.address), indexTokenIn = _this$symbiosis$getNe[0], indexTokenOut = _this$symbiosis$getNe[1];
              _context.next = 5;
              return this.pool.calculateSwap(indexTokenIn, indexTokenOut, this.tokenAmountIn.raw.toString());

            case 5:
              amountOut = _context.sent;
              this.amountOut = new TokenAmount(this.tokenOut, amountOut.toString());
              slippageTolerance = basisPointsToPercent(this.slippage);
              slippageAdjustedAmountOut = new Fraction(ONE).add(slippageTolerance).invert().multiply(this.amountOut.raw).quotient;
              this.callData = this.pool["interface"].encodeFunctionData('swap', [indexTokenIn, indexTokenOut, this.tokenAmountIn.raw.toString(), slippageAdjustedAmountOut.toString(), this.deadline]);
              priceImpact = calculatePriceImpact(this.tokenAmountIn, this.amountOut);

              if (priceImpact) {
                _context.next = 13;
                break;
              }

              throw new Error('Cannot calculate priceImpact');

            case 13:
              this.priceImpact = priceImpact;
              return _context.abrupt("return", this);

            case 15:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function init() {
      return _init.apply(this, arguments);
    }

    return init;
  }();

  return NerveTrade;
}();

var Transit = /*#__PURE__*/function () {
  function Transit(symbiosis, dataProvider, amountIn, tokenOut, slippage, deadline, fee) {
    this.symbiosis = void 0;
    this.dataProvider = void 0;
    this.amountIn = void 0;
    this.tokenOut = void 0;
    this.slippage = void 0;
    this.deadline = void 0;
    this.fee = void 0;
    this.direction = void 0;
    this.receiveSide = void 0;
    this.callData = void 0;
    this.route = void 0;
    this.priceImpact = void 0;
    this.amountOut = void 0;
    this.feeToken = void 0;
    this.tradeB = void 0;
    this.symbiosis = symbiosis;
    this.dataProvider = dataProvider;
    this.amountIn = amountIn;
    this.tokenOut = tokenOut;
    this.slippage = slippage;
    this.deadline = deadline;
    this.fee = fee;
    this.direction = Transit.getDirection(amountIn.token.chainId, tokenOut.chainId);
    this.route = [];
    this.receiveSide = addresses.AddressZero;
    this.callData = [];
    this.priceImpact = new Percent('0');
  }

  var _proto = Transit.prototype;

  _proto.init = /*#__PURE__*/function () {
    var _init = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
      var transitTokenOut;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.getFeeToken();

            case 2:
              this.feeToken = _context.sent;

              if (this.isTradeRequired()) {
                _context.next = 9;
                break;
              }

              this.amountOut = this.getBridgeAmountOut(); // depends on this.feeToken

              transitTokenOut = this.symbiosis.transitStable(this.tokenOut.chainId);

              if (this.direction === 'mint') {
                if (!this.tokenOut.equals(transitTokenOut)) {
                  this.route = [transitTokenOut];
                }
              } else {
                this.route = [this.symbiosis.transitStable(this.amountIn.token.chainId)];
              }

              _context.next = 19;
              break;

            case 9:
              _context.next = 11;
              return this.buildTradeB();

            case 11:
              this.tradeB = _context.sent;
              _context.next = 14;
              return this.tradeB.init();

            case 14:
              this.receiveSide = this.tradeB.pool.address;
              this.callData = this.tradeB.callData;
              this.amountOut = this.getTradeBAmountOut();
              this.route = this.tradeB.route;
              this.priceImpact = this.tradeB.priceImpact;

            case 19:
              this.symbiosis.validateSwapAmounts(this.getBridgeAmountIn());
              return _context.abrupt("return", this);

            case 21:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function init() {
      return _init.apply(this, arguments);
    }

    return init;
  }();

  _proto.getBridgeAmountIn = function getBridgeAmountIn() {
    if (this.direction === 'mint') {
      return this.amountIn;
    }

    return this.tradeB ? this.tradeB.amountOut : this.amountIn;
  };

  _proto.getBridgeAmountOut = function getBridgeAmountOut() {
    var amountOut = new TokenAmount(this.feeToken, this.amountIn.raw);

    if (!this.fee) {
      return amountOut;
    }

    if (amountOut.lessThan(this.fee)) {
      throw new Error$1("Amount $" + amountOut.toSignificant() + " less than fee $" + this.fee.toSignificant(), exports.ErrorCode.AMOUNT_LESS_THAN_FEE);
    }

    return amountOut.subtract(this.fee);
  };

  _proto.getTradeBAmountOut = function getTradeBAmountOut() {
    if (!this.tradeB) {
      throw new Error$1('TradeB is undefined');
    }

    if (this.direction === 'mint') {
      return this.tradeB.amountOut;
    }

    var transitStableOut = this.symbiosis.transitStable(this.tokenOut.chainId);
    var amountOut = new TokenAmount(transitStableOut, this.tradeB.amountOut.raw);

    if (!this.fee) {
      return amountOut;
    }

    if (amountOut.lessThan(this.fee)) {
      throw new Error$1("Amount $" + amountOut.toSignificant() + " less than fee $" + this.fee.toSignificant(), exports.ErrorCode.AMOUNT_LESS_THAN_FEE);
    }

    return amountOut.subtract(this.fee);
  };

  _proto.amount = function amount() {
    return this.amountIn;
  };

  Transit.getDirection = function getDirection(chainIdIn, chainIdOut) {
    var indexIn = CHAINS_PRIORITY.indexOf(chainIdIn);
    var indexOut = CHAINS_PRIORITY.indexOf(chainIdOut);

    if (indexIn === -1) {
      throw new Error$1("Chain " + chainIdIn + " not found in chains priority");
    }

    if (indexOut === -1) {
      throw new Error$1("Chain " + chainIdOut + " not found in chains priority");
    }

    return indexIn > indexOut ? 'burn' : 'mint';
  };

  _proto.isTradeRequired = function isTradeRequired() {
    var chainId = this.direction === 'mint' ? this.tokenOut.chainId : this.amountIn.token.chainId;
    return this.symbiosis.chainConfig(chainId).nerves.length > 0;
  };

  _proto.getFeeToken = /*#__PURE__*/function () {
    var _getFeeToken = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
      var transitStableIn, rep;
      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (!(this.direction === 'burn' || !this.isTradeRequired())) {
                _context2.next = 2;
                break;
              }

              return _context2.abrupt("return", this.symbiosis.transitStable(this.tokenOut.chainId));

            case 2:
              transitStableIn = this.symbiosis.transitStable(this.amountIn.token.chainId); // USDC

              _context2.next = 5;
              return this.dataProvider.getRepresentation(transitStableIn, this.tokenOut.chainId);

            case 5:
              rep = _context2.sent;

              if (rep) {
                _context2.next = 8;
                break;
              }

              throw new Error$1("Representation of " + transitStableIn.symbol + " in chain " + this.tokenOut.chainId + " not found", exports.ErrorCode.NO_ROUTE);

            case 8:
              return _context2.abrupt("return", rep);

            case 9:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function getFeeToken() {
      return _getFeeToken.apply(this, arguments);
    }

    return getFeeToken;
  }();

  _proto.getTradeBAmountIn = function getTradeBAmountIn() {
    if (this.direction === 'burn') {
      return this.amountIn;
    }

    return this.getBridgeAmountOut();
  };

  _proto.getTradeBTokenOut = /*#__PURE__*/function () {
    var _getTradeBTokenOut = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
      var transitStableOut, rep;
      return _regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              if (!(this.direction === 'mint')) {
                _context3.next = 2;
                break;
              }

              return _context3.abrupt("return", this.symbiosis.transitStable(this.tokenOut.chainId));

            case 2:
              transitStableOut = this.symbiosis.transitStable(this.tokenOut.chainId); // USDC

              _context3.next = 5;
              return this.dataProvider.getRepresentation(transitStableOut, this.amountIn.token.chainId);

            case 5:
              rep = _context3.sent;

              if (rep) {
                _context3.next = 8;
                break;
              }

              throw new Error$1("Representation of " + transitStableOut.symbol + " in chain " + this.amountIn.token.chainId + " not found", exports.ErrorCode.NO_ROUTE);

            case 8:
              return _context3.abrupt("return", rep);

            case 9:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function getTradeBTokenOut() {
      return _getTradeBTokenOut.apply(this, arguments);
    }

    return getTradeBTokenOut;
  }();

  _proto.buildTradeB = /*#__PURE__*/function () {
    var _buildTradeB = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
      var amountIn, tokenOut, nervePool;
      return _regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              amountIn = this.getTradeBAmountIn();
              _context4.next = 3;
              return this.getTradeBTokenOut();

            case 3:
              tokenOut = _context4.sent;
              nervePool = this.symbiosis.nervePool(amountIn.token, tokenOut);
              return _context4.abrupt("return", new NerveTrade(amountIn, tokenOut, this.slippage, this.deadline, nervePool, this.symbiosis));

            case 6:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    function buildTradeB() {
      return _buildTradeB.apply(this, arguments);
    }

    return buildTradeB;
  }();

  return Transit;
}();

var BaseSwapping = /*#__PURE__*/function () {
  function BaseSwapping(symbiosis) {
    this.amountInUsd = void 0;
    this.from = void 0;
    this.to = void 0;
    this.revertableAddress = void 0;
    this.tokenAmountIn = void 0;
    this.tokenOut = void 0;
    this.slippage = void 0;
    this.deadline = void 0;
    this.ttl = void 0;
    this.use1Inch = void 0;
    this.route = void 0;
    this.tradeA = void 0;
    this.transit = void 0;
    this.tradeC = void 0;
    this.dataProvider = void 0;
    this.symbiosis = void 0;
    this.symbiosis = symbiosis;
    this.dataProvider = new DataProvider(symbiosis);
  }

  var _proto = BaseSwapping.prototype;

  _proto.doExactIn = /*#__PURE__*/function () {
    var _doExactIn = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(tokenAmountIn, tokenOut, from, to, revertableAddress, slippage, deadline, use1Inch) {
      var _this = this;

      var fee, tokenAmountOutWithZeroFee, transactionRequest;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.use1Inch = use1Inch;
              this.tokenAmountIn = tokenAmountIn;
              this.tokenOut = tokenOut;
              this.from = from;
              this.to = to;
              this.revertableAddress = revertableAddress;
              this.slippage = slippage;
              this.deadline = deadline;
              this.ttl = deadline - Math.floor(Date.now() / 1000);

              if (this.symbiosis.isTransitStable(tokenAmountIn.token)) {
                _context.next = 13;
                break;
              }

              this.tradeA = this.buildTradeA();
              _context.next = 13;
              return this.tradeA.init();

            case 13:
              this.transit = this.buildTransit();
              _context.next = 16;
              return this.transit.init();

            case 16:
              this.amountInUsd = this.transit.amount();

              if (this.symbiosis.isTransitStable(tokenOut)) {
                _context.next = 21;
                break;
              }

              this.tradeC = this.buildTradeC();
              _context.next = 21;
              return this.tradeC.init();

            case 21:
              this.route = this.getRoute();
              _context.next = 24;
              return this.getFee(this.transit.feeToken);

            case 24:
              fee = _context.sent;
              tokenAmountOutWithZeroFee = this.tokenAmountOut(); // >>> NOTE create trades with calculated fee

              _context.next = 28;
              return this.buildTransit(fee);

            case 28:
              this.transit = _context.sent;
              _context.next = 31;
              return this.transit.init();

            case 31:
              if (this.symbiosis.isTransitStable(tokenOut)) {
                _context.next = 35;
                break;
              }

              this.tradeC = this.buildTradeC();
              _context.next = 35;
              return this.tradeC.init();

            case 35:
              // <<< NOTE create trades with calculated fee
              transactionRequest = this.getTransactionRequest(fee);
              return _context.abrupt("return", {
                execute: function execute(signer) {
                  return _this.execute(transactionRequest, signer);
                },
                fee: fee,
                tokenAmountOut: this.tokenAmountOut(),
                tokenAmountOutWithZeroFee: tokenAmountOutWithZeroFee,
                route: this.route,
                priceImpact: this.calculatePriceImpact(),
                amountInUsd: this.amountInUsd,
                transactionRequest: transactionRequest,
                approveTo: this.approveTo()
              });

            case 37:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function doExactIn(_x, _x2, _x3, _x4, _x5, _x6, _x7, _x8) {
      return _doExactIn.apply(this, arguments);
    }

    return doExactIn;
  }();

  _proto.approveTo = function approveTo() {
    return this.symbiosis.chainConfig(this.tokenAmountIn.token.chainId).metaRouterGateway;
  };

  _proto.execute = /*#__PURE__*/function () {
    var _execute = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(transactionRequest, signer) {
      var _this2 = this;

      var transactionRequestWithGasLimit, gasLimit, response;
      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              transactionRequestWithGasLimit = _extends({}, transactionRequest);
              _context2.next = 3;
              return signer.estimateGas(transactionRequest);

            case 3:
              gasLimit = _context2.sent;
              transactionRequestWithGasLimit.gasLimit = calculateGasMargin(gasLimit);
              _context2.next = 7;
              return signer.sendTransaction(transactionRequestWithGasLimit);

            case 7:
              response = _context2.sent;
              return _context2.abrupt("return", {
                response: response,
                waitForMined: function waitForMined(confirmations) {
                  if (confirmations === void 0) {
                    confirmations = 1;
                  }

                  return _this2.waitForMined(confirmations, response);
                }
              });

            case 9:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    function execute(_x9, _x10) {
      return _execute.apply(this, arguments);
    }

    return execute;
  }();

  _proto.waitForMined = /*#__PURE__*/function () {
    var _waitForMined = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(confirmations, response) {
      var _this3 = this;

      var receipt;
      return _regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return response.wait(confirmations);

            case 2:
              receipt = _context3.sent;
              return _context3.abrupt("return", {
                receipt: receipt,
                waitForComplete: function waitForComplete() {
                  return _this3.waitForComplete(receipt);
                }
              });

            case 4:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    function waitForMined(_x11, _x12) {
      return _waitForMined.apply(this, arguments);
    }

    return waitForMined;
  }();

  _proto.waitForComplete = /*#__PURE__*/function () {
    var _waitForComplete = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(receipt) {
      return _regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              if (this.tokenOut) {
                _context4.next = 2;
                break;
              }

              throw new Error('Tokens are not set');

            case 2:
              return _context4.abrupt("return", new WaitForComplete({
                direction: this.transit.direction,
                tokenOut: this.tokenOut,
                symbiosis: this.symbiosis,
                revertableAddress: this.revertableAddress,
                chainIdIn: this.tokenAmountIn.token.chainId
              }).waitForComplete(receipt));

            case 3:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    function waitForComplete(_x13) {
      return _waitForComplete.apply(this, arguments);
    }

    return waitForComplete;
  }();

  _proto.getTransactionRequest = function getTransactionRequest(fee) {
    var chainId = this.tokenAmountIn.token.chainId;
    var metaRouter = this.symbiosis.metaRouter(chainId);

    var _this$otherSideData = this.otherSideData(fee),
        relayRecipient = _this$otherSideData[0],
        otherSideCalldata = _this$otherSideData[1];

    var amount = this.tradeA ? this.tradeA.tokenAmountIn : this.tokenAmountIn;
    var value = this.tradeA && this.tokenAmountIn.token.isNative ? ethers.BigNumber.from(this.tradeA.tokenAmountIn.raw.toString()) : undefined;
    var data = metaRouter["interface"].encodeFunctionData('metaRoute', [{
      amount: amount.raw.toString(),
      nativeIn: amount.token.isNative,
      approvedTokens: this.approvedTokens(),
      firstDexRouter: this.firstDexRouter(),
      firstSwapCalldata: this.firstSwapCalldata(),
      secondDexRouter: this.secondDexRouter(),
      secondSwapCalldata: this.transit.direction === 'burn' ? this.secondSwapCalldata() : [],
      relayRecipient: relayRecipient,
      otherSideCalldata: otherSideCalldata
    }]);
    return {
      chainId: chainId,
      to: metaRouter.address,
      data: data,
      value: value
    };
  };

  _proto.calculatePriceImpact = function calculatePriceImpact() {
    var _this$tradeA, _this$tradeC;

    var zero = new Percent(JSBI__default["default"].BigInt(0), BIPS_BASE); // 0%

    var pia = ((_this$tradeA = this.tradeA) == null ? void 0 : _this$tradeA.priceImpact) || zero;
    var pib = this.transit.priceImpact || zero;
    var pic = ((_this$tradeC = this.tradeC) == null ? void 0 : _this$tradeC.priceImpact) || zero; // console.log([pia, pib, pic].map((i) => i.toSignificant()))

    var pi = pia.add(pib).add(pic);
    var max = new Percent(JSBI__default["default"].BigInt(10000), BIPS_BASE); // 100%

    if (pi.greaterThan(max)) pi = max;
    return new Percent(pi.numerator, pi.denominator);
  };

  _proto.tokenAmountOut = function tokenAmountOut() {
    if (this.tradeC) {
      return this.tradeC.amountOut;
    }

    return this.transit.amountOut;
  };

  _proto.buildTradeA = function buildTradeA() {
    var chainId = this.tokenAmountIn.token.chainId;
    var tokenOut = this.symbiosis.transitStable(chainId);
    var from = this.symbiosis.metaRouter(chainId).address;
    var to = from;

    if (this.use1Inch && canOneInch(chainId)) {
      var oracle = this.symbiosis.oneInchOracle(chainId);
      return new OneInchTrade(this.tokenAmountIn, tokenOut, from, to, this.slippage / 100, oracle, this.dataProvider);
    }

    var dexFee = this.symbiosis.dexFee(chainId);
    var routerA = this.symbiosis.uniLikeRouter(chainId);

    if (chainId === exports.ChainId.AVAX_MAINNET) {
      routerA = this.symbiosis.avaxRouter(chainId);
    }

    if ([exports.ChainId.MILKOMEDA_DEVNET, exports.ChainId.MILKOMEDA_MAINNET].includes(chainId)) {
      routerA = this.symbiosis.adaRouter(chainId);
    }

    return new UniLikeTrade(this.tokenAmountIn, tokenOut, to, this.slippage, this.ttl, routerA, dexFee);
  };

  _proto.buildTransit = function buildTransit(fee) {
    return new Transit(this.symbiosis, this.dataProvider, this.tradeA ? this.tradeA.amountOut : this.tokenAmountIn, this.tokenOut, this.slippage, this.deadline, fee);
  };

  _proto.buildTradeC = function buildTradeC() {
    var chainId = this.tokenOut.chainId;
    var amountIn = this.transit.amountOut;

    if (this.use1Inch && canOneInch(chainId)) {
      var from = this.symbiosis.metaRouter(chainId).address;
      var oracle = this.symbiosis.oneInchOracle(chainId);
      return new OneInchTrade(amountIn, this.tokenOut, from, this.to, this.slippage / 100, oracle, this.dataProvider);
    }

    var dexFee = this.symbiosis.dexFee(chainId);
    var routerC = this.symbiosis.uniLikeRouter(chainId);

    if (chainId === exports.ChainId.AVAX_MAINNET) {
      routerC = this.symbiosis.avaxRouter(chainId);
    }

    if ([exports.ChainId.MILKOMEDA_DEVNET, exports.ChainId.MILKOMEDA_MAINNET].includes(chainId)) {
      routerC = this.symbiosis.adaRouter(chainId);
    }

    return new UniLikeTrade(amountIn, this.tokenOut, this.to, this.slippage, this.ttl, routerC, dexFee);
  };

  _proto.getRoute = function getRoute() {
    var started = this.tradeA ? [] : [this.tokenAmountIn.token];
    var terminated = this.tradeC ? [] : [this.tokenOut];
    return [].concat(started, this.tradeA ? this.tradeA.route : [], this.transit.route, this.tradeC ? this.tradeC.route : [], terminated).reduce(function (acc, token) {
      var found = acc.find(function (i) {
        return i.equals(token);
      });
      if (found) return acc;
      return [].concat(acc, [token]);
    }, []);
  };

  _proto.otherSideBurnCallData = function otherSideBurnCallData(fee) {
    if (!this.tokenAmountIn || !this.tokenOut) {
      throw new Error('Tokens are not set');
    }

    var synthesis = this.symbiosis.synthesis(this.tokenAmountIn.token.chainId);
    var amount = this.transit.getBridgeAmountIn();
    return [synthesis.address, synthesis["interface"].encodeFunctionData('metaBurnSyntheticToken', [{
      stableBridgingFee: fee.raw.toString(),
      amount: amount.raw.toString(),
      syntCaller: this.from,
      finalReceiveSide: this.finalReceiveSide(),
      sToken: amount.token.address,
      finalCallData: this.finalCalldata(),
      finalOffset: this.finalOffset(),
      chain2address: this.to,
      receiveSide: this.symbiosis.portal(this.tokenOut.chainId).address,
      oppositeBridge: this.symbiosis.bridge(this.tokenOut.chainId).address,
      revertableAddress: this.revertableAddress,
      chainID: this.tokenOut.chainId,
      clientID: this.symbiosis.clientId
    }])];
  };

  _proto.otherSideSynthCallData = function otherSideSynthCallData(fee) {
    if (!this.tokenAmountIn || !this.tokenOut) {
      throw new Error('Tokens are not set');
    }

    var chainIdIn = this.tokenAmountIn.token.chainId;
    var chainIdOut = this.tokenOut.chainId;
    var tokenAmount = this.transit.getBridgeAmountIn();
    var portal = this.symbiosis.portal(chainIdIn);
    return [portal.address, portal["interface"].encodeFunctionData('metaSynthesize', [{
      stableBridgingFee: fee.raw.toString(),
      amount: tokenAmount.raw.toString(),
      rtoken: tokenAmount.token.address,
      chain2address: this.to,
      receiveSide: this.symbiosis.synthesis(chainIdOut).address,
      oppositeBridge: this.symbiosis.bridge(chainIdOut).address,
      syntCaller: this.from,
      chainID: chainIdOut,
      swapTokens: this.swapTokens(),
      secondDexRouter: this.secondDexRouter(),
      secondSwapCalldata: this.secondSwapCalldata(),
      finalReceiveSide: this.finalReceiveSide(),
      finalCalldata: this.finalCalldata(),
      finalOffset: this.finalOffset(),
      revertableAddress: this.revertableAddress,
      clientID: this.symbiosis.clientId
    }])];
  };

  _proto.otherSideData = function otherSideData(fee) {
    return this.transit.direction === 'burn' ? this.otherSideBurnCallData(fee) : this.otherSideSynthCallData(fee);
  };

  _proto.feeMintCallData = /*#__PURE__*/function () {
    var _feeMintCallData = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
      var chainIdIn, chainIdOut, portal, synthesis, internalId, externalId, amount, callData;
      return _regeneratorRuntime.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              chainIdIn = this.tokenAmountIn.token.chainId;
              chainIdOut = this.tokenOut.chainId;
              portal = this.symbiosis.portal(chainIdIn);
              synthesis = this.symbiosis.synthesis(chainIdOut);
              internalId = getInternalId({
                contractAddress: portal.address,
                requestCount: constants.MaxUint256,
                chainId: chainIdIn
              });
              externalId = getExternalId({
                internalId: internalId,
                contractAddress: synthesis.address,
                revertableAddress: this.revertableAddress,
                chainId: chainIdOut
              });
              amount = this.transit.getBridgeAmountIn();
              callData = synthesis["interface"].encodeFunctionData('metaMintSyntheticToken', [{
                stableBridgingFee: '1',
                amount: amount.raw.toString(),
                externalID: externalId,
                tokenReal: amount.token.address,
                chainID: chainIdIn,
                to: this.to,
                swapTokens: this.swapTokens(),
                secondDexRouter: this.secondDexRouter(),
                secondSwapCalldata: this.secondSwapCalldata(),
                finalReceiveSide: this.finalReceiveSide(),
                finalCalldata: this.finalCalldata(),
                finalOffset: this.finalOffset()
              }]);
              return _context5.abrupt("return", [synthesis.address, callData]);

            case 9:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this);
    }));

    function feeMintCallData() {
      return _feeMintCallData.apply(this, arguments);
    }

    return feeMintCallData;
  }();

  _proto.feeBurnCallData = /*#__PURE__*/function () {
    var _feeBurnCallData = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {
      var chainIdIn, chainIdOut, synthesis, portal, internalId, externalId, amount, calldata;
      return _regeneratorRuntime.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              chainIdIn = this.tokenAmountIn.token.chainId;
              chainIdOut = this.tokenOut.chainId;
              synthesis = this.symbiosis.synthesis(chainIdIn);
              portal = this.symbiosis.portal(chainIdOut);
              internalId = getInternalId({
                contractAddress: synthesis.address,
                requestCount: constants.MaxUint256,
                chainId: chainIdIn
              });
              externalId = getExternalId({
                internalId: internalId,
                contractAddress: portal.address,
                revertableAddress: this.revertableAddress,
                chainId: chainIdOut
              });
              amount = this.transit.amountOut;
              calldata = portal["interface"].encodeFunctionData('metaUnsynthesize', ['1', externalId, this.to, amount.raw.toString(), amount.token.address, this.finalReceiveSide(), this.finalCalldata(), this.finalOffset() // _finalOffset
              ]);
              return _context6.abrupt("return", [portal.address, calldata]);

            case 9:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, this);
    }));

    function feeBurnCallData() {
      return _feeBurnCallData.apply(this, arguments);
    }

    return feeBurnCallData;
  }();

  _proto.getFee = /*#__PURE__*/function () {
    var _getFee = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(feeToken) {
      var _ref, receiveSide, calldata, fee;

      return _regeneratorRuntime.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              if (!(this.transit.direction === 'burn')) {
                _context7.next = 6;
                break;
              }

              _context7.next = 3;
              return this.feeBurnCallData();

            case 3:
              _context7.t0 = _context7.sent;
              _context7.next = 9;
              break;

            case 6:
              _context7.next = 8;
              return this.feeMintCallData();

            case 8:
              _context7.t0 = _context7.sent;

            case 9:
              _ref = _context7.t0;
              receiveSide = _ref[0];
              calldata = _ref[1];
              _context7.next = 14;
              return this.symbiosis.getBridgeFee({
                receiveSide: receiveSide,
                calldata: calldata,
                chainIdFrom: this.tokenAmountIn.token.chainId,
                chainIdTo: this.tokenOut.chainId
              });

            case 14:
              fee = _context7.sent;
              return _context7.abrupt("return", new TokenAmount(feeToken, fee.toString()));

            case 16:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7, this);
    }));

    function getFee(_x14) {
      return _getFee.apply(this, arguments);
    }

    return getFee;
  }();

  _proto.approvedTokens = function approvedTokens() {
    var firstToken = this.tradeA ? this.tradeA.tokenAmountIn.token.address : this.tokenAmountIn.token.address;

    if (!firstToken) {
      firstToken = addresses.AddressZero; // AddressZero if first token is GasToken
    }

    var tokens;

    if (this.transit.direction === 'burn') {
      tokens = [firstToken].concat(this.transit.route.map(function (i) {
        return i.address;
      }));
    } else {
      tokens = [firstToken, this.tradeA ? this.tradeA.amountOut.token.address : this.tokenAmountIn.token.address];
    }

    return tokens;
  };

  _proto.firstDexRouter = function firstDexRouter() {
    var _this$tradeA2;

    return ((_this$tradeA2 = this.tradeA) == null ? void 0 : _this$tradeA2.routerAddress) || addresses.AddressZero;
  };

  _proto.firstSwapCalldata = function firstSwapCalldata() {
    var _this$tradeA3;

    return ((_this$tradeA3 = this.tradeA) == null ? void 0 : _this$tradeA3.callData) || [];
  };

  _proto.secondDexRouter = function secondDexRouter() {
    return this.transit.receiveSide;
  };

  _proto.secondSwapCalldata = function secondSwapCalldata() {
    return this.transit.callData;
  };

  _proto.finalReceiveSide = function finalReceiveSide() {
    var _this$tradeC2;

    return ((_this$tradeC2 = this.tradeC) == null ? void 0 : _this$tradeC2.routerAddress) || addresses.AddressZero;
  };

  _proto.finalCalldata = function finalCalldata() {
    var _this$tradeC3;

    return ((_this$tradeC3 = this.tradeC) == null ? void 0 : _this$tradeC3.callData) || [];
  };

  _proto.finalOffset = function finalOffset() {
    var _this$tradeC4;

    return ((_this$tradeC4 = this.tradeC) == null ? void 0 : _this$tradeC4.callDataOffset) || 0;
  };

  _proto.swapTokens = function swapTokens() {
    var tokens = this.transit.route.map(function (i) {
      return i.address;
    });

    if (this.tradeC) {
      tokens.push(wrappedToken(this.tradeC.amountOut.token).address);
    }

    return tokens;
  };

  return BaseSwapping;
}();

var Swapping = /*#__PURE__*/function (_BaseSwapping) {
  _inheritsLoose(Swapping, _BaseSwapping);

  function Swapping() {
    return _BaseSwapping.apply(this, arguments) || this;
  }

  var _proto = Swapping.prototype;

  _proto.exactIn = /*#__PURE__*/function () {
    var _exactIn = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(tokenAmountIn, tokenOut, from, to, revertableAddress, slippage, deadline, use1Inch) {
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (use1Inch === void 0) {
                use1Inch = true;
              }

              return _context.abrupt("return", this.doExactIn(tokenAmountIn, tokenOut, from, to, revertableAddress, slippage, deadline, use1Inch));

            case 2:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function exactIn(_x, _x2, _x3, _x4, _x5, _x6, _x7, _x8) {
      return _exactIn.apply(this, arguments);
    }

    return exactIn;
  }();

  return Swapping;
}(BaseSwapping);

var NerveLiquidity = /*#__PURE__*/function () {
  function NerveLiquidity(tokenAmountIn, to, slippage, deadline, pool) {
    this.tokenAmountIn = void 0;
    this.pool = void 0;
    this.poolLpToken = void 0;
    this.amountOut = void 0;
    this.callData = void 0;
    this.priceImpact = void 0;
    this.callDataOffset = 4 + 32 * 6;
    this.to = void 0;
    this.deadline = void 0;
    this.slippage = void 0;
    this.tokenAmountIn = tokenAmountIn;
    this.to = to;
    this.deadline = deadline;
    this.slippage = slippage;
    this.pool = pool;
  }

  var _proto = NerveLiquidity.prototype;

  _proto.init = /*#__PURE__*/function () {
    var _init = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
      var network, storage, lpTokenAmount, slippageTolerance, slippageAdjustedAmountOut;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.pool.provider.getNetwork();

            case 2:
              network = _context.sent;
              _context.next = 5;
              return this.pool.swapStorage();

            case 5:
              storage = _context.sent;
              _context.next = 8;
              return this.pool.calculateTokenAmount(this.to, ['0', this.tokenAmountIn.raw.toString()], true);

            case 8:
              lpTokenAmount = _context.sent;
              this.poolLpToken = new Token({
                address: storage.lpToken,
                decimals: 18,
                chainId: network.chainId
              });
              this.amountOut = new TokenAmount(this.poolLpToken, lpTokenAmount.toString());
              slippageTolerance = basisPointsToPercent(this.slippage);
              slippageAdjustedAmountOut = new Fraction(ONE).add(slippageTolerance).invert().multiply(this.amountOut.raw).quotient;
              this.callData = this.pool["interface"].encodeFunctionData('addLiquidity', [['0', this.tokenAmountIn.raw.toString()], slippageAdjustedAmountOut.toString(), this.deadline]);
              return _context.abrupt("return", this);

            case 15:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function init() {
      return _init.apply(this, arguments);
    }

    return init;
  }();

  return NerveLiquidity;
}();

var Zapping = /*#__PURE__*/function () {
  function Zapping(symbiosis) {
    this.dataProvider = void 0;
    this.from = void 0;
    this.to = void 0;
    this.revertableAddress = void 0;
    this.tokenAmountIn = void 0;
    this.poolAddress = void 0;
    this.poolChainId = void 0;
    this.slippage = void 0;
    this.deadline = void 0;
    this.ttl = void 0;
    this.use1Inch = void 0;
    this.tradeA = void 0;
    this.synthToken = void 0;
    this.nerveLiquidity = void 0;
    this.symbiosis = void 0;
    this.symbiosis = symbiosis;
    this.dataProvider = new DataProvider(symbiosis);
  }

  var _proto = Zapping.prototype;

  _proto.exactIn = /*#__PURE__*/function () {
    var _exactIn = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(tokenAmountIn, poolAddress, poolChainId, from, to, revertableAddress, slippage, deadline, use1Inch) {
      var _this = this;

      var amountInUsd, pool, fee, transactionRequest;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (use1Inch === void 0) {
                use1Inch = true;
              }

              this.use1Inch = use1Inch;
              this.tokenAmountIn = tokenAmountIn;
              this.poolAddress = poolAddress;
              this.poolChainId = poolChainId;
              this.from = from;
              this.to = to;
              this.revertableAddress = revertableAddress;
              this.slippage = slippage;
              this.deadline = deadline;
              this.ttl = deadline - Math.floor(Date.now() / 1000);

              if (this.symbiosis.isTransitStable(tokenAmountIn.token)) {
                _context.next = 18;
                break;
              }

              this.tradeA = this.buildTradeA();
              _context.next = 15;
              return this.tradeA.init();

            case 15:
              amountInUsd = this.tradeA.amountOut;
              _context.next = 19;
              break;

            case 18:
              amountInUsd = tokenAmountIn;

            case 19:
              this.symbiosis.validateSwapAmounts(amountInUsd);
              _context.next = 22;
              return this.getSynthToken();

            case 22:
              this.synthToken = _context.sent;
              pool = this.symbiosis.nervePoolByAddress(this.poolAddress, this.poolChainId);
              this.nerveLiquidity = this.buildNerveLiquidity(pool);
              _context.next = 27;
              return this.nerveLiquidity.init();

            case 27:
              _context.next = 29;
              return this.getFee();

            case 29:
              fee = _context.sent;
              this.nerveLiquidity = this.buildNerveLiquidity(pool, fee);
              _context.next = 33;
              return this.nerveLiquidity.init();

            case 33:
              transactionRequest = this.getTransactionRequest(fee);
              return _context.abrupt("return", {
                execute: function execute(signer) {
                  return _this.execute(transactionRequest, signer);
                },
                fee: fee,
                tokenAmountOut: this.nerveLiquidity.amountOut,
                priceImpact: this.calculatePriceImpact(),
                amountInUsd: this.getSynthAmount(fee),
                transactionRequest: transactionRequest
              });

            case 35:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function exactIn(_x, _x2, _x3, _x4, _x5, _x6, _x7, _x8, _x9) {
      return _exactIn.apply(this, arguments);
    }

    return exactIn;
  }();

  _proto.waitForComplete = /*#__PURE__*/function () {
    var _waitForComplete = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(receipt) {
      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", new WaitForComplete({
                direction: 'mint',
                tokenOut: this.nerveLiquidity.amountOut.token,
                symbiosis: this.symbiosis,
                revertableAddress: this.revertableAddress,
                chainIdIn: this.tokenAmountIn.token.chainId
              }).waitForComplete(receipt));

            case 1:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function waitForComplete(_x10) {
      return _waitForComplete.apply(this, arguments);
    }

    return waitForComplete;
  }();

  _proto.getTransactionRequest = function getTransactionRequest(fee) {
    var _this$tradeA, _this$tradeA2;

    var chainId = this.tokenAmountIn.token.chainId;
    var metaRouter = this.symbiosis.metaRouter(chainId);

    var _this$otherSideSynthC = this.otherSideSynthCallData(fee),
        relayRecipient = _this$otherSideSynthC[0],
        otherSideCalldata = _this$otherSideSynthC[1];

    var firstToken = this.tradeA ? this.tradeA.tokenAmountIn.token.address : this.tokenAmountIn.token.address;

    if (!firstToken) {
      // AddressZero if first token is GasToken
      firstToken = addresses.AddressZero;
    }

    var approvedTokens = [firstToken, this.tradeA ? this.tradeA.amountOut.token.address : this.tokenAmountIn.token.address];
    var value = this.tradeA && this.tokenAmountIn.token.isNative ? ethers.BigNumber.from(this.tradeA.tokenAmountIn.raw.toString()) : undefined;
    var data = metaRouter["interface"].encodeFunctionData('metaRoute', [{
      firstSwapCalldata: ((_this$tradeA = this.tradeA) == null ? void 0 : _this$tradeA.callData) || [],
      secondSwapCalldata: [],
      approvedTokens: approvedTokens,
      firstDexRouter: ((_this$tradeA2 = this.tradeA) == null ? void 0 : _this$tradeA2.routerAddress) || addresses.AddressZero,
      secondDexRouter: addresses.AddressZero,
      amount: this.tokenAmountIn.raw.toString(),
      nativeIn: this.tokenAmountIn.token.isNative,
      relayRecipient: relayRecipient,
      otherSideCalldata: otherSideCalldata
    }]);
    return {
      chainId: chainId,
      to: metaRouter.address,
      data: data,
      value: value
    };
  };

  _proto.calculatePriceImpact = function calculatePriceImpact() {
    var _this$tradeA3;

    var zero = new Percent(JSBI__default["default"].BigInt(0), BIPS_BASE); // 0%

    var pi = ((_this$tradeA3 = this.tradeA) == null ? void 0 : _this$tradeA3.priceImpact) || zero;
    var max = new Percent(JSBI__default["default"].BigInt(10000), BIPS_BASE); // 100%

    if (pi.greaterThan(max)) pi = max;
    return new Percent(pi.numerator, pi.denominator);
  };

  _proto.getSynthAmount = function getSynthAmount(fee) {
    var synthAmount = new TokenAmount(this.synthToken, this.tradeA ? this.tradeA.amountOut.raw : this.tokenAmountIn.raw);

    if (fee) {
      synthAmount = synthAmount.subtract(fee);
    }

    return synthAmount;
  };

  _proto.buildTradeA = function buildTradeA() {
    var chainId = this.tokenAmountIn.token.chainId;
    var tokenOut = this.symbiosis.transitStable(chainId);
    var from = this.symbiosis.metaRouter(chainId).address;
    var to = from;

    if (this.use1Inch && canOneInch(chainId)) {
      var oracle = this.symbiosis.oneInchOracle(chainId);
      return new OneInchTrade(this.tokenAmountIn, tokenOut, from, to, this.slippage / 100, oracle, this.dataProvider);
    }

    var dexFee = this.symbiosis.dexFee(chainId);
    var routerA = this.symbiosis.uniLikeRouter(chainId);

    if (chainId === exports.ChainId.AVAX_MAINNET) {
      routerA = this.symbiosis.avaxRouter(chainId);
    }

    if ([exports.ChainId.MILKOMEDA_DEVNET, exports.ChainId.MILKOMEDA_MAINNET].includes(chainId)) {
      routerA = this.symbiosis.adaRouter(chainId);
    }

    return new UniLikeTrade(this.tokenAmountIn, tokenOut, to, this.slippage, this.ttl, routerA, dexFee);
  };

  _proto.buildNerveLiquidity = function buildNerveLiquidity(pool, fee) {
    var tokenAmountIn = this.getSynthAmount(fee);
    return new NerveLiquidity(tokenAmountIn, this.to, this.slippage, this.deadline, pool);
  };

  _proto.otherSideSynthCallData = function otherSideSynthCallData(fee) {
    if (!this.tokenAmountIn) {
      throw new Error$1('Token is not set');
    }

    var chainIdIn = this.tokenAmountIn.token.chainId;
    var chainIdOut = this.poolChainId;
    var tokenAmount = this.tradeA ? this.tradeA.amountOut : this.tokenAmountIn;
    var portal = this.symbiosis.portal(chainIdIn);
    var swapTokens = [this.synthToken.address, this.nerveLiquidity.poolLpToken.address];
    return [portal.address, portal["interface"].encodeFunctionData('metaSynthesize', [{
      stableBridgingFee: fee.raw.toString(),
      amount: tokenAmount.raw.toString(),
      rtoken: tokenAmount.token.address,
      chain2address: this.to,
      receiveSide: this.symbiosis.synthesis(chainIdOut).address,
      oppositeBridge: this.symbiosis.bridge(chainIdOut).address,
      syntCaller: this.from,
      chainID: chainIdOut,
      swapTokens: swapTokens,
      secondDexRouter: addresses.AddressZero,
      secondSwapCalldata: [],
      finalReceiveSide: this.nerveLiquidity.pool.address,
      finalCalldata: this.nerveLiquidity.callData,
      finalOffset: this.nerveLiquidity.callDataOffset,
      revertableAddress: this.revertableAddress,
      clientID: this.symbiosis.clientId
    }])];
  };

  _proto.execute = /*#__PURE__*/function () {
    var _execute = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(transactionRequest, signer) {
      var _this2 = this;

      var transactionRequestWithGasLimit, gasLimit, response;
      return _regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              transactionRequestWithGasLimit = _extends({}, transactionRequest);
              _context3.next = 3;
              return signer.estimateGas(transactionRequest);

            case 3:
              gasLimit = _context3.sent;
              transactionRequestWithGasLimit.gasLimit = calculateGasMargin(gasLimit);
              _context3.next = 7;
              return signer.sendTransaction(transactionRequestWithGasLimit);

            case 7:
              response = _context3.sent;
              return _context3.abrupt("return", {
                response: response,
                waitForMined: function waitForMined(confirmations) {
                  if (confirmations === void 0) {
                    confirmations = 1;
                  }

                  return _this2.waitForMined(confirmations, response);
                }
              });

            case 9:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    function execute(_x11, _x12) {
      return _execute.apply(this, arguments);
    }

    return execute;
  }();

  _proto.waitForMined = /*#__PURE__*/function () {
    var _waitForMined = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(confirmations, response) {
      var _this3 = this;

      var receipt;
      return _regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return response.wait(confirmations);

            case 2:
              receipt = _context4.sent;
              return _context4.abrupt("return", {
                receipt: receipt,
                waitForComplete: function waitForComplete() {
                  return _this3.waitForComplete(receipt);
                }
              });

            case 4:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));

    function waitForMined(_x13, _x14) {
      return _waitForMined.apply(this, arguments);
    }

    return waitForMined;
  }();

  _proto.getSynthToken = /*#__PURE__*/function () {
    var _getSynthToken = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
      var transitStableIn, rep;
      return _regeneratorRuntime.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              transitStableIn = this.symbiosis.transitStable(this.tokenAmountIn.token.chainId);
              _context5.next = 3;
              return this.symbiosis.getRepresentation(transitStableIn, this.poolChainId);

            case 3:
              rep = _context5.sent;

              if (rep) {
                _context5.next = 6;
                break;
              }

              throw new Error$1("Representation of " + transitStableIn.symbol + " in chain " + this.poolChainId + " not found", exports.ErrorCode.NO_ROUTE);

            case 6:
              return _context5.abrupt("return", rep);

            case 7:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this);
    }));

    function getSynthToken() {
      return _getSynthToken.apply(this, arguments);
    }

    return getSynthToken;
  }();

  _proto.getFee = /*#__PURE__*/function () {
    var _getFee = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {
      var chainIdIn, chainIdOut, portal, synthesis, amount, internalId, externalId, swapTokens, calldata, fee;
      return _regeneratorRuntime.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              chainIdIn = this.tokenAmountIn.token.chainId;
              chainIdOut = this.poolChainId;
              portal = this.symbiosis.portal(chainIdIn);
              synthesis = this.symbiosis.synthesis(chainIdOut);
              amount = this.tradeA ? this.tradeA.amountOut : this.tokenAmountIn;
              internalId = getInternalId({
                contractAddress: portal.address,
                requestCount: constants.MaxUint256,
                chainId: chainIdIn
              });
              externalId = getExternalId({
                internalId: internalId,
                contractAddress: synthesis.address,
                revertableAddress: this.revertableAddress,
                chainId: chainIdOut
              });
              swapTokens = [this.synthToken.address, this.nerveLiquidity.poolLpToken.address];
              calldata = synthesis["interface"].encodeFunctionData('metaMintSyntheticToken', [{
                stableBridgingFee: '1',
                amount: amount.raw.toString(),
                externalID: externalId,
                tokenReal: amount.token.address,
                chainID: chainIdIn,
                to: this.to,
                swapTokens: swapTokens,
                secondDexRouter: addresses.AddressZero,
                secondSwapCalldata: [],
                finalReceiveSide: this.nerveLiquidity.pool.address,
                finalCalldata: this.nerveLiquidity.callData,
                finalOffset: this.nerveLiquidity.callDataOffset
              }]);
              _context6.next = 11;
              return this.symbiosis.getBridgeFee({
                receiveSide: synthesis.address,
                calldata: calldata,
                chainIdFrom: this.tokenAmountIn.token.chainId,
                chainIdTo: chainIdOut
              });

            case 11:
              fee = _context6.sent;
              return _context6.abrupt("return", new TokenAmount(this.synthToken, fee.toString()));

            case 13:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, this);
    }));

    function getFee() {
      return _getFee.apply(this, arguments);
    }

    return getFee;
  }();

  return Zapping;
}();

var ZappingAave = /*#__PURE__*/function (_BaseSwapping) {
  _inheritsLoose(ZappingAave, _BaseSwapping);

  function ZappingAave() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _BaseSwapping.call.apply(_BaseSwapping, [this].concat(args)) || this;
    _this.multicallRouter = void 0;
    _this.userAddress = void 0;
    _this.aavePool = void 0;
    _this.aToken = void 0;
    return _this;
  }

  var _proto = ZappingAave.prototype;

  _proto.exactIn = /*#__PURE__*/function () {
    var _exactIn = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(tokenAmountIn, tokenOut, from, to, revertableAddress, slippage, deadline, use1Inch) {
      var data;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (use1Inch === void 0) {
                use1Inch = true;
              }

              this.multicallRouter = this.symbiosis.multicallRouter(tokenOut.chainId);
              this.userAddress = to;
              this.aavePool = this.symbiosis.aavePool(tokenOut.chainId);
              _context.next = 6;
              return this.aavePool.getReserveData(tokenOut.address);

            case 6:
              data = _context.sent;
              this.aToken = data.aTokenAddress;
              return _context.abrupt("return", this.doExactIn(tokenAmountIn, wrappedToken(tokenOut), from, this.multicallRouter.address, revertableAddress, slippage, deadline, use1Inch));

            case 9:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function exactIn(_x, _x2, _x3, _x4, _x5, _x6, _x7, _x8) {
      return _exactIn.apply(this, arguments);
    }

    return exactIn;
  }();

  _proto.finalReceiveSide = function finalReceiveSide() {
    return this.multicallRouter.address;
  };

  _proto.finalCalldata = function finalCalldata() {
    return this.buildMulticall();
  };

  _proto.finalOffset = function finalOffset() {
    return 36;
  };

  _proto.swapTokens = function swapTokens() {
    var tokens = this.transit.route.map(function (i) {
      return i.address;
    });

    if (this.tradeC) {
      tokens.push(wrappedToken(this.tradeC.amountOut.token).address);
    } else {
      tokens.push(this.aToken);
    }

    return tokens;
  };

  _proto.buildMulticall = function buildMulticall() {
    var callDatas = [];
    var receiveSides = [];
    var path = [];
    var offsets = [];
    var amount;
    var supplyToken;

    if (this.tradeC) {
      amount = this.tradeC.tokenAmountIn.raw.toString();
      supplyToken = this.tradeC.amountOut.token;
      callDatas.push(this.tradeC.callData);
      receiveSides.push(this.tradeC.routerAddress);
      path.push(this.tradeC.tokenAmountIn.token.address);
      offsets.push(this.tradeC.callDataOffset);
    } else {
      amount = this.transit.amountOut.raw.toString();

      if (this.transit.direction === 'mint') {
        supplyToken = this.transit.amountOut.token;
      } else {
        supplyToken = this.transit.feeToken;
      }
    }

    var supplyCalldata = this.aavePool["interface"].encodeFunctionData('supply', [supplyToken.address, '0', this.userAddress, '0']);
    callDatas.push(supplyCalldata);
    receiveSides.push(this.aavePool.address);
    path.push(supplyToken.address);
    offsets.push(68);
    return this.multicallRouter["interface"].encodeFunctionData('multicall', [amount, callDatas, receiveSides, path, offsets, this.userAddress]);
  };

  return ZappingAave;
}(BaseSwapping);

var ZappingCream = /*#__PURE__*/function (_BaseSwapping) {
  _inheritsLoose(ZappingCream, _BaseSwapping);

  function ZappingCream() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _BaseSwapping.call.apply(_BaseSwapping, [this].concat(args)) || this;
    _this.multicallRouter = void 0;
    _this.userAddress = void 0;
    _this.creamPoolAddress = void 0;
    return _this;
  }

  var _proto = ZappingCream.prototype;

  _proto.getAllMarkets = /*#__PURE__*/function () {
    var _getAllMarkets = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(chainId) {
      var comptroller, multicall, markets, marketsWithUnderlying;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              comptroller = this.symbiosis.creamComptroller(chainId);
              _context.next = 3;
              return getMulticall(comptroller.provider);

            case 3:
              multicall = _context.sent;
              _context.next = 6;
              return comptroller.getAllMarkets();

            case 6:
              markets = _context.sent;
              _context.next = 9;
              return this.reduceUnderlying(multicall, markets);

            case 9:
              marketsWithUnderlying = _context.sent;
              return _context.abrupt("return", this.reducePaused(multicall, comptroller.address, marketsWithUnderlying));

            case 11:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function getAllMarkets(_x) {
      return _getAllMarkets.apply(this, arguments);
    }

    return getAllMarkets;
  }();

  _proto.reduceUnderlying = /*#__PURE__*/function () {
    var _reduceUnderlying = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(multicall, markets) {
      var creamCErc20Interface, calls, aggregated;
      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              creamCErc20Interface = CreamCErc20__factory.createInterface();
              calls = markets.map(function (market) {
                return {
                  target: market,
                  callData: creamCErc20Interface.encodeFunctionData('underlying')
                };
              });
              _context2.next = 4;
              return multicall.callStatic.tryAggregate(false, calls);

            case 4:
              aggregated = _context2.sent;
              return _context2.abrupt("return", aggregated.map(function (_ref, i) {
                var success = _ref[0],
                    returnData = _ref[1];
                if (!success || returnData === '0x') return;
                return {
                  market: markets[i],
                  underlying: creamCErc20Interface.decodeFunctionResult('underlying', returnData).toString().toLowerCase(),
                  paused: false
                };
              }).filter(function (i) {
                return i !== undefined;
              }));

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    function reduceUnderlying(_x2, _x3) {
      return _reduceUnderlying.apply(this, arguments);
    }

    return reduceUnderlying;
  }();

  _proto.reducePaused = /*#__PURE__*/function () {
    var _reducePaused = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(multicall, target, markets) {
      var comptrollerInterface, calls, aggregated;
      return _regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              comptrollerInterface = CreamComptroller__factory.createInterface();
              calls = markets.map(function (marketWithUnderlying) {
                return {
                  target: target,
                  callData: comptrollerInterface.encodeFunctionData('mintGuardianPaused', [marketWithUnderlying.market])
                };
              });
              _context3.next = 4;
              return multicall.callStatic.tryAggregate(false, calls);

            case 4:
              aggregated = _context3.sent;
              return _context3.abrupt("return", aggregated.map(function (_ref2, i) {
                var success = _ref2[0],
                    returnData = _ref2[1];
                if (!success || returnData === '0x') return;
                var paused = comptrollerInterface.decodeFunctionResult('mintGuardianPaused', returnData)[0];
                return _extends({}, markets[i], {
                  paused: paused
                });
              }).filter(function (i) {
                return !!i;
              }));

            case 6:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    function reducePaused(_x4, _x5, _x6) {
      return _reducePaused.apply(this, arguments);
    }

    return reducePaused;
  }();

  _proto.exactIn = /*#__PURE__*/function () {
    var _exactIn = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(tokenAmountIn, tokenOut, from, to, revertableAddress, slippage, deadline, use1Inch) {
      var wrappedTokenOut, chainIdOut, markets, index, _wrappedTokenOut$chai, _wrappedTokenOut$chai2;

      return _regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              if (use1Inch === void 0) {
                use1Inch = true;
              }

              wrappedTokenOut = wrappedToken(tokenOut);
              chainIdOut = wrappedTokenOut.chainId;
              this.multicallRouter = this.symbiosis.multicallRouter(chainIdOut);
              this.userAddress = to;
              _context4.next = 7;
              return this.getAllMarkets(chainIdOut);

            case 7:
              markets = _context4.sent;
              index = markets.map(function (i) {
                return i.underlying;
              }).indexOf(wrappedTokenOut.address.toLowerCase());

              if (!(index === -1)) {
                _context4.next = 11;
                break;
              }

              throw new Error("Cream: cannot to find underlying token " + wrappedTokenOut.address + " on chain " + ((_wrappedTokenOut$chai = wrappedTokenOut.chain) == null ? void 0 : _wrappedTokenOut$chai.name));

            case 11:
              if (!markets[index].paused) {
                _context4.next = 13;
                break;
              }

              throw new Error("Cream: market " + markets[index].market + " on chain " + ((_wrappedTokenOut$chai2 = wrappedTokenOut.chain) == null ? void 0 : _wrappedTokenOut$chai2.name) + " is paused");

            case 13:
              this.creamPoolAddress = markets[index].market;
              return _context4.abrupt("return", this.doExactIn(tokenAmountIn, wrappedTokenOut, from, this.multicallRouter.address, revertableAddress, slippage, deadline, use1Inch));

            case 15:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    function exactIn(_x7, _x8, _x9, _x10, _x11, _x12, _x13, _x14) {
      return _exactIn.apply(this, arguments);
    }

    return exactIn;
  }();

  _proto.finalReceiveSide = function finalReceiveSide() {
    return this.multicallRouter.address;
  };

  _proto.finalCalldata = function finalCalldata() {
    var _this$buildMulticall = this.buildMulticall(),
        callData = _this$buildMulticall.callData;

    return callData;
  };

  _proto.finalOffset = function finalOffset() {
    return 36;
  };

  _proto.swapTokens = function swapTokens() {
    var tokens = this.transit.route.map(function (i) {
      return i.address;
    });

    if (this.tradeC) {
      tokens.push(wrappedToken(this.tradeC.amountOut.token).address);
    } else {
      var _this$buildMulticall2 = this.buildMulticall(),
          supplyAddress = _this$buildMulticall2.supplyAddress;

      tokens.push(supplyAddress);
    }

    return tokens;
  };

  _proto.buildMulticall = function buildMulticall() {
    var callDatas = [];
    var receiveSides = [];
    var path = [];
    var offsets = [];
    var amount;
    var supplyToken;

    if (this.tradeC) {
      amount = this.tradeC.tokenAmountIn.raw.toString();
      supplyToken = this.tradeC.amountOut.token;
      callDatas.push(this.tradeC.callData);
      receiveSides.push(this.tradeC.routerAddress);
      path.push(this.tradeC.tokenAmountIn.token.address);
      offsets.push(this.tradeC.callDataOffset);
    } else {
      amount = this.transit.amountOut.raw.toString();

      if (this.transit.direction === 'mint') {
        supplyToken = this.transit.amountOut.token;
      } else {
        supplyToken = this.transit.feeToken;
      }
    }

    var cream = this.symbiosis.creamCErc20ByAddress(this.creamPoolAddress, supplyToken.chainId);
    var supplyCalldata = cream["interface"].encodeFunctionData('mint', ['0']); // amount will be patched

    callDatas.push(supplyCalldata);
    receiveSides.push(cream.address);
    path.push(supplyToken.address);
    path.push(cream.address);
    offsets.push(36);
    var callData = this.multicallRouter["interface"].encodeFunctionData('multicall', [amount, callDatas, receiveSides, path, offsets, this.userAddress]);
    return {
      callData: callData,
      supplyAddress: cream.address
    };
  };

  return ZappingCream;
}(BaseSwapping);

var _excluded = ["tokenAmountOut", "execute"];

var fromUTF8String = function fromUTF8String(input) {
  var a = [];
  var encodedInput = encodeURIComponent(input);

  for (var i = 0; i < encodedInput.length; i++) {
    if (encodedInput[i] === '%') {
      // Load the next two characters of encodedInput and treat them
      // as a UTF-8 code.
      a.push(parseInt(encodedInput.substr(i + 1, 2), 16));
      i += 2;
    } else {
      a.push(encodedInput.charCodeAt(i));
    }
  }

  return new Uint8Array(a);
};

var ZappingRenBTC = /*#__PURE__*/function (_BaseSwapping) {
  _inheritsLoose(ZappingRenBTC, _BaseSwapping);

  function ZappingRenBTC() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _BaseSwapping.call.apply(_BaseSwapping, [this].concat(args)) || this;
    _this.multicallRouter = void 0;
    _this.userAddress = void 0;
    _this.renMintGatewayV3 = void 0;
    _this.renBTCAddress = void 0;
    _this.renChainId = void 0;
    return _this;
  }

  var _proto = ZappingRenBTC.prototype;

  _proto.exactIn = /*#__PURE__*/function () {
    var _exactIn = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(tokenAmountIn, renChainId, from, to, revertableAddress, slippage, deadline, use1Inch) {
      var renRenGatewayRegistry, renBTC, mintGatewayAddress, _yield$this$doExactIn, tokenAmountOut, execute, result, btcAmountOut;

      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (use1Inch === void 0) {
                use1Inch = true;
              }

              this.renChainId = renChainId;
              this.multicallRouter = this.symbiosis.multicallRouter(renChainId);
              this.userAddress = to;
              renRenGatewayRegistry = this.symbiosis.renRenGatewayRegistry(renChainId);
              _context.next = 7;
              return renRenGatewayRegistry.getRenAssetBySymbol('BTC');

            case 7:
              this.renBTCAddress = _context.sent;
              renBTC = new Token({
                address: this.renBTCAddress,
                chainId: renChainId,
                decimals: 8,
                name: 'renBTC',
                symbol: 'renBTC',
                icons: {
                  small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/5777.png',
                  large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/5777.png'
                }
              });
              _context.next = 11;
              return renRenGatewayRegistry.getMintGatewayBySymbol('BTC');

            case 11:
              mintGatewayAddress = _context.sent;
              this.renMintGatewayV3 = this.symbiosis.renMintGatewayByAddress(mintGatewayAddress, renChainId);
              _context.next = 15;
              return this.doExactIn(tokenAmountIn, renBTC, from, this.multicallRouter.address, revertableAddress, slippage, deadline, use1Inch);

            case 15:
              _yield$this$doExactIn = _context.sent;
              tokenAmountOut = _yield$this$doExactIn.tokenAmountOut;
              execute = _yield$this$doExactIn.execute;
              result = _objectWithoutPropertiesLoose(_yield$this$doExactIn, _excluded);
              _context.next = 21;
              return this.estimateBTCOutput(tokenAmountOut);

            case 21:
              btcAmountOut = _context.sent;
              return _context.abrupt("return", _extends({}, result, {
                execute: this.buildExecute(execute),
                renBTCAmountOut: tokenAmountOut,
                tokenAmountOut: btcAmountOut
              }));

            case 23:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function exactIn(_x, _x2, _x3, _x4, _x5, _x6, _x7, _x8) {
      return _exactIn.apply(this, arguments);
    }

    return exactIn;
  }();

  _proto.waitForREN = /*#__PURE__*/function () {
    var _waitForREN = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(transactionHash) {
      var _gateway$in, _gateway$in2;

      var _this$createRENJS, bitcoin, ethereum, renJS, gateway, result;

      return _regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _this$createRENJS = this.createRENJS(), bitcoin = _this$createRENJS.bitcoin, ethereum = _this$createRENJS.ethereum, renJS = _this$createRENJS.renJS;
              _context3.next = 3;
              return renJS.gateway({
                asset: bitcoin.assets.BTC,
                from: ethereum.Transaction({
                  txHash: transactionHash
                }),
                to: bitcoin.Address(this.userAddress)
              });

            case 3:
              gateway = _context3.sent;
              result = new Promise(function (resolve, reject) {
                gateway.on('transaction', /*#__PURE__*/function () {
                  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(tx) {
                    var outTx;
                    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
                      while (1) {
                        switch (_context2.prev = _context2.next) {
                          case 0:
                            _context2.prev = 0;
                            _context2.next = 3;
                            return tx.renVM.submit();

                          case 3:
                            _context2.next = 5;
                            return tx.renVM.wait();

                          case 5:
                            _context2.next = 7;
                            return tx.out.submit == null ? void 0 : tx.out.submit();

                          case 7:
                            _context2.next = 9;
                            return tx.out.wait();

                          case 9:
                            _context2.next = 15;
                            break;

                          case 11:
                            _context2.prev = 11;
                            _context2.t0 = _context2["catch"](0);
                            reject(_context2.t0);
                            return _context2.abrupt("return");

                          case 15:
                            outTx = tx.out.progress.transaction;
                            resolve(outTx == null ? void 0 : outTx.txHash);

                          case 17:
                          case "end":
                            return _context2.stop();
                        }
                      }
                    }, _callee2, null, [[0, 11]]);
                  }));

                  return function (_x10) {
                    return _ref.apply(this, arguments);
                  };
                }());
              });
              _context3.next = 7;
              return (_gateway$in = gateway["in"]) == null ? void 0 : _gateway$in.submit == null ? void 0 : _gateway$in.submit();

            case 7:
              _context3.next = 9;
              return (_gateway$in2 = gateway["in"]) == null ? void 0 : _gateway$in2.wait(1);

            case 9:
              return _context3.abrupt("return", result);

            case 10:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function waitForREN(_x9) {
      return _waitForREN.apply(this, arguments);
    }

    return waitForREN;
  }();

  _proto.finalReceiveSide = function finalReceiveSide() {
    return this.multicallRouter.address;
  };

  _proto.finalCalldata = function finalCalldata() {
    return this.buildMulticall();
  };

  _proto.finalOffset = function finalOffset() {
    return 36;
  };

  _proto.buildMulticall = function buildMulticall() {
    if (!this.tradeC) {
      throw new Error('TradeC is not set');
    }

    if (!this.tradeC.callDataOffset) {
      throw new Error('TradeC is not initialized');
    }

    var burnCalldata = this.renMintGatewayV3["interface"].encodeFunctionData('burn(bytes,uint256)', [fromUTF8String(this.userAddress), this.tradeC.amountOut.raw.toString()]);
    var callDatas = [this.tradeC.callData, burnCalldata];
    var receiveSides = [this.tradeC.routerAddress, this.renMintGatewayV3.address];
    var path = [this.tradeC.tokenAmountIn.token.address, this.tradeC.amountOut.token.address];
    var offsets = [this.tradeC.callDataOffset, 68];
    return this.multicallRouter["interface"].encodeFunctionData('multicall', [this.tradeC.tokenAmountIn.raw.toString(), callDatas, receiveSides, path, offsets, this.from]);
  };

  _proto.createRENJS = function createRENJS() {
    var provider = this.symbiosis.providers.get(this.renChainId);

    if (!provider) {
      throw new Error("Provider not found for chain " + this.renChainId);
    }

    var network;
    var ethereum;

    if (this.renChainId === exports.ChainId.ETH_KOVAN) {
      network = 'testnet';
      ethereum = new chainsEthereum.Ethereum({
        network: network,
        provider: provider
      });
    } else if (this.renChainId === exports.ChainId.BSC_MAINNET) {
      network = 'mainnet';
      ethereum = new chainsEthereum.BinanceSmartChain({
        network: network,
        provider: provider
      });
    } else if (this.renChainId === exports.ChainId.MATIC_MAINNET) {
      network = 'mainnet';
      ethereum = new chainsEthereum.Polygon({
        network: network,
        provider: provider
      });
    } else {
      throw new Error("Unsupported chain " + this.renChainId);
    }

    var bitcoin = new chainsBitcoin.Bitcoin({
      network: network
    });
    var renJS = new RenJS__default["default"](network).withChains(ethereum, bitcoin);
    return {
      bitcoin: bitcoin,
      ethereum: ethereum,
      renJS: renJS,
      network: network
    };
  };

  _proto.estimateBTCOutput = /*#__PURE__*/function () {
    var _estimateBTCOutput = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(tokenAmountOut) {
      var _this$createRENJS2, ethereum, renJS, network, fees, estimateOutput;

      return _regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _this$createRENJS2 = this.createRENJS(), ethereum = _this$createRENJS2.ethereum, renJS = _this$createRENJS2.renJS, network = _this$createRENJS2.network;
              _context4.next = 3;
              return renJS.getFees({
                asset: 'BTC',
                from: ethereum.Account(),
                to: 'Bitcoin'
              });

            case 3:
              fees = _context4.sent;
              estimateOutput = fees.estimateOutput(tokenAmountOut.raw.toString()).toString();
              return _context4.abrupt("return", new TokenAmount(new Token({
                chainId: network === 'mainnet' ? exports.ChainId.BTC_MAINNET : exports.ChainId.BTC_TESTNET,
                symbol: 'BTC',
                name: 'Bitcoin',
                address: '',
                decimals: 8,
                isNative: true,
                icons: {
                  small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1.png',
                  large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1.png'
                }
              }), estimateOutput));

            case 6:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    function estimateBTCOutput(_x11) {
      return _estimateBTCOutput.apply(this, arguments);
    }

    return estimateBTCOutput;
  }();

  _proto.buildExecute = function buildExecute(execute) {
    var _this2 = this;

    return /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(signer) {
        var _yield$execute, response, _waitForMined;

        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return execute(signer);

              case 2:
                _yield$execute = _context7.sent;
                response = _yield$execute.response;
                _waitForMined = _yield$execute.waitForMined;
                return _context7.abrupt("return", {
                  response: response,
                  waitForMined: function () {
                    var _waitForMined2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {
                      var _yield$_waitForMined, receipt;

                      return _regeneratorRuntime.wrap(function _callee6$(_context6) {
                        while (1) {
                          switch (_context6.prev = _context6.next) {
                            case 0:
                              _context6.next = 2;
                              return _waitForMined();

                            case 2:
                              _yield$_waitForMined = _context6.sent;
                              receipt = _yield$_waitForMined.receipt;
                              return _context6.abrupt("return", {
                                receipt: receipt,
                                waitForComplete: function () {
                                  var _waitForComplete = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
                                    var log;
                                    return _regeneratorRuntime.wrap(function _callee5$(_context5) {
                                      while (1) {
                                        switch (_context5.prev = _context5.next) {
                                          case 0:
                                            _context5.next = 2;
                                            return _this2.waitForComplete(receipt);

                                          case 2:
                                            log = _context5.sent;
                                            return _context5.abrupt("return", {
                                              log: log,
                                              waitForREN: function waitForREN() {
                                                return _this2.waitForREN(log.transactionHash);
                                              }
                                            });

                                          case 4:
                                          case "end":
                                            return _context5.stop();
                                        }
                                      }
                                    }, _callee5);
                                  }));

                                  function waitForComplete() {
                                    return _waitForComplete.apply(this, arguments);
                                  }

                                  return waitForComplete;
                                }()
                              });

                            case 5:
                            case "end":
                              return _context6.stop();
                          }
                        }
                      }, _callee6);
                    }));

                    function waitForMined() {
                      return _waitForMined2.apply(this, arguments);
                    }

                    return waitForMined;
                  }()
                });

              case 6:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7);
      }));

      return function (_x12) {
        return _ref2.apply(this, arguments);
      };
    }();
  };

  return ZappingRenBTC;
}(BaseSwapping);

var config$1 = {
  minSwapAmountInUsd: 10,
  maxSwapAmountInUsd: 5000000,
  advisor: {
    url: 'https://api.symbiosis.finance/calculations'
  },
  chains: [{
    id: 1,
    rpc: 'https://rpc.ankr.com/eth',
    filterBlockOffset: 3000,
    waitForBlocksCount: 5,
    stables: [{
      name: 'USD Coin',
      address: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',
      symbol: 'USDC',
      decimals: 6,
      chainId: 1,
      isStable: true,
      icons: {
        large: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48/logo.png',
        small: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48/logo.png'
      }
    }],
    nerves: [],
    router: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D',
    dexFee: 30,
    metaRouter: '0xB9E13785127BFfCc3dc970A55F6c7bF0844a3C15',
    metaRouterGateway: '0x03B7551EB0162c838a10c2437b60D1f5455b9554',
    bridge: '0xd5F0f8dB993D26F5df89E70a83d32b369DcCdaa0',
    synthesis: '0x0000000000000000000000000000000000000000',
    portal: '0xb80fDAA74dDA763a8A158ba85798d373A5E84d84',
    fabric: '0x0000000000000000000000000000000000000000',
    multicallRouter: '0x49d3Fc00f3ACf80FABCb42D7681667B20F60889A',
    aavePool: '0x0000000000000000000000000000000000000000',
    creamComptroller: '0x3d5BC3c8d13dcB8bF317092d84783c2697AE9258',
    renGatewayRegistry: '0x0000000000000000000000000000000000000000'
  }, {
    id: 56,
    rpc: 'https://rpc.ankr.com/bsc',
    filterBlockOffset: 3000,
    waitForBlocksCount: 20,
    stables: [{
      name: 'Binance USD',
      address: '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56',
      symbol: 'BUSD',
      decimals: 18,
      chainId: 56,
      isStable: true,
      icons: {
        large: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/binance/assets/BUSD-BD1/logo.png',
        small: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/binance/assets/BUSD-BD1/logo.png'
      }
    }, {
      name: 'Synthetic USDC',
      address: '0x2f28Add68e59733D23D5F57d94c31fb965f835D0',
      symbol: 'sUSDC',
      decimals: 6,
      chainId: 56,
      chainFromId: 1,
      isStable: true,
      icons: {
        large: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48/logo.png',
        small: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48/logo.png'
      }
    }],
    nerves: [{
      address: '0xab0738320A21741f12797Ee921461C691673E276',
      tokens: ['0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56', '0x2f28Add68e59733D23D5F57d94c31fb965f835D0'],
      decimals: [18, 6]
    }],
    router: '0x10ED43C718714eb63d5aA57B78B54704E256024E',
    dexFee: 25,
    metaRouter: '0x8D602356c7A6220CDE24BDfB4AB63EBFcb0a9b5d',
    metaRouterGateway: '0xe2faC824615538C3A9ae704c75582cD1AbdD7cdf',
    bridge: '0xd5F0f8dB993D26F5df89E70a83d32b369DcCdaa0',
    synthesis: '0xb80fDAA74dDA763a8A158ba85798d373A5E84d84',
    portal: '0xD7F9989bE0d15319d13d6FA5d468211C89F0b147',
    fabric: '0x947a0d452b40013190295a4151A090E1638Fb848',
    multicallRouter: '0x44b5d0F16Ad55c4e7113310614745e8771b963bB',
    aavePool: '0x0000000000000000000000000000000000000000',
    creamComptroller: '0x589de0f0ccf905477646599bb3e5c622c84cc0ba',
    renGatewayRegistry: '0xf36666C230Fa12333579b9Bd6196CB634D6BC506'
  }, {
    id: 43114,
    rpc: 'https://rpc.ankr.com/avalanche',
    filterBlockOffset: 3000,
    waitForBlocksCount: 30,
    stables: [{
      name: 'USD Coin',
      address: '0xA7D7079b0FEaD91F3e65f86E8915Cb59c1a4C664',
      symbol: 'USDC.e',
      decimals: 6,
      chainId: 43114,
      isStable: true,
      icons: {
        large: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48/logo.png',
        small: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48/logo.png'
      }
    }, {
      name: 'Synthetic USDC',
      address: '0x2f28Add68e59733D23D5F57d94c31fb965f835D0',
      symbol: 'sUSDC',
      decimals: 6,
      chainId: 43114,
      chainFromId: 1,
      isStable: true,
      icons: {
        large: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48/logo.png',
        small: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48/logo.png'
      }
    }, {
      name: 'Synthetic BUSD',
      address: '0xf04d3A8Eb17B832Fbebf43610e94BdC4fD5Cf2dd',
      symbol: 'sBUSD',
      decimals: 18,
      chainId: 43114,
      chainFromId: 56,
      isStable: true,
      icons: {
        large: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/binance/assets/BUSD-BD1/logo.png',
        small: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/binance/assets/BUSD-BD1/logo.png'
      }
    }],
    nerves: [{
      address: '0xab0738320A21741f12797Ee921461C691673E276',
      tokens: ['0xA7D7079b0FEaD91F3e65f86E8915Cb59c1a4C664', '0x2f28Add68e59733D23D5F57d94c31fb965f835D0'],
      decimals: [6, 6]
    }, {
      address: '0xF4BFF06E02cdF55918e0ec98082bDE1DA85d33Db',
      tokens: ['0xA7D7079b0FEaD91F3e65f86E8915Cb59c1a4C664', '0xf04d3A8Eb17B832Fbebf43610e94BdC4fD5Cf2dd'],
      decimals: [6, 18]
    }],
    router: '0xE54Ca86531e17Ef3616d22Ca28b0D458b6C89106',
    dexFee: 30,
    metaRouter: '0xE5E68630B5B759e6C701B70892AA8324b71e6e20',
    metaRouterGateway: '0x25821A21C2E3455967229cADCA9b6fdd4A80a40b',
    bridge: '0xd5F0f8dB993D26F5df89E70a83d32b369DcCdaa0',
    synthesis: '0xb80fDAA74dDA763a8A158ba85798d373A5E84d84',
    portal: '0xD7F9989bE0d15319d13d6FA5d468211C89F0b147',
    fabric: '0x947a0d452b40013190295a4151A090E1638Fb848',
    multicallRouter: '0xDc9a6a26209A450caC415fb78487e907c660cf6a',
    aavePool: '0x794a61358D6845594F94dc1DB02A252b5b4814aD',
    creamComptroller: '0x486Af39519B4Dc9a7fCcd318217352830E8AD9b4',
    renGatewayRegistry: '0x0000000000000000000000000000000000000000'
  }, {
    id: 137,
    rpc: 'https://rpc.ankr.com/polygon',
    filterBlockOffset: 3000,
    waitForBlocksCount: 60,
    stables: [{
      name: 'USD Coin',
      address: '0x2791bca1f2de4661ed88a30c99a7a9449aa84174',
      symbol: 'USDC',
      isStable: true,
      decimals: 6,
      chainId: 137,
      icons: {
        large: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48/logo.png',
        small: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48/logo.png'
      }
    }, {
      name: 'Synthetic USDC',
      symbol: 'sUSDC',
      address: '0x2f28Add68e59733D23D5F57d94c31fb965f835D0',
      chainId: 137,
      chainFromId: 1,
      decimals: 6,
      isStable: true,
      icons: {
        large: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48/logo.png',
        small: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48/logo.png'
      }
    }, {
      name: 'Synthetic BUSD',
      symbol: 'sBUSD',
      address: '0xf04d3A8Eb17B832Fbebf43610e94BdC4fD5Cf2dd',
      chainId: 137,
      chainFromId: 56,
      decimals: 18,
      isStable: true,
      icons: {
        large: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/binance/assets/BUSD-BD1/logo.png',
        small: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/binance/assets/BUSD-BD1/logo.png'
      }
    }, {
      name: 'Synthetic USDC.e',
      symbol: 'sUSDC.e',
      address: '0x8Eb3771A43a8C45AaBE6d61ED709eCe652281DC9',
      chainId: 137,
      chainFromId: 43114,
      decimals: 6,
      isStable: true,
      icons: {
        large: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48/logo.png',
        small: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48/logo.png'
      }
    }],
    nerves: [{
      address: '0xab0738320A21741f12797Ee921461C691673E276',
      tokens: ['0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174', '0x2f28Add68e59733D23D5F57d94c31fb965f835D0'],
      decimals: [6, 6]
    }, {
      address: '0xF4BFF06E02cdF55918e0ec98082bDE1DA85d33Db',
      tokens: ['0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174', '0xf04d3A8Eb17B832Fbebf43610e94BdC4fD5Cf2dd'],
      decimals: [6, 18]
    }, {
      address: '0x3F1bfa6FA3B6D03202538Bf0cdE92BbE551104ac',
      tokens: ['0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174', '0x8Eb3771A43a8C45AaBE6d61ED709eCe652281DC9'],
      decimals: [6, 6]
    }],
    router: '0xa5E0829CaCEd8fFDD4De3c43696c57F7D7A678ff',
    dexFee: 30,
    metaRouter: '0x733D33FA01424F83E9C095af3Ece80Ed6fa565F1',
    metaRouterGateway: '0xF3273BD35e4Ad4fcd49DabDee33582b41Cbb9d77',
    bridge: '0xd5F0f8dB993D26F5df89E70a83d32b369DcCdaa0',
    synthesis: '0xb80fDAA74dDA763a8A158ba85798d373A5E84d84',
    portal: '0xD7F9989bE0d15319d13d6FA5d468211C89F0b147',
    fabric: '0x947a0d452b40013190295a4151A090E1638Fb848',
    multicallRouter: '0xc5B61b9abC3C6229065cAD0e961aF585C5E0135c',
    aavePool: '0x794a61358D6845594F94dc1DB02A252b5b4814aD',
    creamComptroller: '0x20CA53E2395FA571798623F1cFBD11Fe2C114c24',
    renGatewayRegistry: '0xf36666C230Fa12333579b9Bd6196CB634D6BC506'
  }, {
    id: 288,
    rpc: 'https://mainnet.boba.network',
    filterBlockOffset: 4900,
    waitForBlocksCount: 0,
    stables: [{
      name: 'USD Coin',
      address: '0x66a2A913e447d6b4BF33EFbec43aAeF87890FBbc',
      symbol: 'USDC',
      decimals: 6,
      chainId: 288,
      isStable: true,
      icons: {
        large: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48/logo.png',
        small: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48/logo.png'
      }
    }, {
      name: 'Synthetic USDC',
      address: '0x2f28Add68e59733D23D5F57d94c31fb965f835D0',
      symbol: 'sUSDC',
      decimals: 6,
      chainId: 288,
      chainFromId: 1,
      isStable: true,
      icons: {
        large: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48/logo.png',
        small: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48/logo.png'
      }
    }, {
      name: 'Synthetic BUSD',
      address: '0xf04d3A8Eb17B832Fbebf43610e94BdC4fD5Cf2dd',
      symbol: 'sBUSD',
      decimals: 18,
      chainId: 288,
      chainFromId: 56,
      isStable: true,
      icons: {
        large: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/binance/assets/BUSD-BD1/logo.png',
        small: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/binance/assets/BUSD-BD1/logo.png'
      }
    }],
    nerves: [{
      address: '0xab0738320A21741f12797Ee921461C691673E276',
      tokens: ['0x66a2A913e447d6b4BF33EFbec43aAeF87890FBbc', '0x2f28Add68e59733D23D5F57d94c31fb965f835D0'],
      decimals: [6, 6]
    }, {
      address: '0xe0ddd7afC724BD4B320472B5C954c0abF8192344',
      tokens: ['0x66a2A913e447d6b4BF33EFbec43aAeF87890FBbc', '0xf04d3A8Eb17B832Fbebf43610e94BdC4fD5Cf2dd'],
      decimals: [6, 18]
    }],
    router: '0x17C83E2B96ACfb5190d63F5E46d93c107eC0b514',
    dexFee: 30,
    metaRouter: '0xd2B5945829D8254C40f63f476C9F02CF5762F8DF',
    metaRouterGateway: '0x5ee04643fe2D63f364F77B38C41F15A54930f5C1',
    bridge: '0xd5F0f8dB993D26F5df89E70a83d32b369DcCdaa0',
    synthesis: '0xb80fDAA74dDA763a8A158ba85798d373A5E84d84',
    portal: '0xD7F9989bE0d15319d13d6FA5d468211C89F0b147',
    fabric: '0x947a0d452b40013190295a4151A090E1638Fb848',
    multicallRouter: '0x506803495B1876FE1fA6Cd9dC65fB060057A4Cc3',
    aavePool: '0x0000000000000000000000000000000000000000',
    creamComptroller: '0x0000000000000000000000000000000000000000',
    renGatewayRegistry: '0x0000000000000000000000000000000000000000'
  }, {
    id: 2001,
    rpc: 'https://rpc-mainnet-cardano-evm.c1.milkomeda.com',
    filterBlockOffset: 4900,
    waitForBlocksCount: 0,
    stables: [{
      name: 'USDC from Ethereum',
      address: '0x42110A5133F91B49E32B671Db86E2C44Edc13832',
      symbol: 'sUSDC',
      decimals: 6,
      chainId: 2001,
      isStable: true,
      chainFromId: 1,
      icons: {
        large: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48/logo.png',
        small: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48/logo.png'
      }
    }],
    nerves: [],
    router: '0x9CdcE24c0e67611B698E6C228BF7791D4ECc553A',
    dexFee: 30,
    metaRouter: '0xc2299c4a45b7e44fFC23e6ba7aAC4AeFF0DDbccC',
    metaRouterGateway: '0xcB9ec7Bfa69c400F97fD667Bf3D8C61359cf50c2',
    bridge: '0xd5F0f8dB993D26F5df89E70a83d32b369DcCdaa0',
    synthesis: '0x47E70310b17f97f3bd5F2536854E3ccEc4A98295',
    portal: '0x3Cd5343546837B958a70B82E3F9a0E857d0b5fea',
    fabric: '0x17A0E3234f00b9D7028e2c78dB2caa777F11490F',
    multicallRouter: '0xcB28fbE3E9C0FEA62E0E63ff3f232CECfE555aD4',
    aavePool: '0x0000000000000000000000000000000000000000',
    creamComptroller: '0x0000000000000000000000000000000000000000',
    renGatewayRegistry: '0x0000000000000000000000000000000000000000'
  }, {
    id: 1313161554,
    rpc: 'https://mainnet.aurora.dev',
    filterBlockOffset: 4900,
    waitForBlocksCount: 60,
    stables: [{
      name: 'USD Coin',
      address: '0xB12BFcA5A55806AaF64E99521918A4bf0fC40802',
      symbol: 'USDC',
      decimals: 6,
      chainId: 1313161554,
      isStable: true,
      icons: {
        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png',
        small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png'
      }
    }, {
      name: 'Synthetic BUSD',
      address: '0xd5e98CAeb396daBE5a102bB9256B552944e3401f',
      symbol: 'sBUSD',
      decimals: 18,
      chainId: 1313161554,
      chainFromId: 56,
      isStable: true,
      icons: {
        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/4687.png',
        small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/4687.png'
      }
    }, {
      name: 'Synthetic USDC',
      address: '0x42Cc1CBf253F89bE6814a0f59F745b40b69b6220',
      symbol: 'sUSDC',
      decimals: 6,
      chainId: 1313161554,
      chainFromId: 137,
      isStable: true,
      icons: {
        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png',
        small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png'
      }
    }],
    nerves: [{
      address: '0x7Ff7AdE2A214F9A4634bBAA4E870A5125dA521B8',
      tokens: ['0xB12BFcA5A55806AaF64E99521918A4bf0fC40802', '0xd5e98CAeb396daBE5a102bB9256B552944e3401f'],
      decimals: [6, 18]
    }, {
      address: '0x7F1245B61Ba0b7D4C41f28cAc9F8637fc6Bec9E4',
      tokens: ['0xB12BFcA5A55806AaF64E99521918A4bf0fC40802', '0x42Cc1CBf253F89bE6814a0f59F745b40b69b6220'],
      decimals: [6, 6]
    }],
    router: '0x2CB45Edb4517d5947aFdE3BEAbF95A582506858B',
    dexFee: 30,
    metaRouter: '0xc2299c4a45b7e44fFC23e6ba7aAC4AeFF0DDbccC',
    metaRouterGateway: '0xcB9ec7Bfa69c400F97fD667Bf3D8C61359cf50c2',
    bridge: '0xd5F0f8dB993D26F5df89E70a83d32b369DcCdaa0',
    synthesis: '0x47E70310b17f97f3bd5F2536854E3ccEc4A98295',
    portal: '0x17A0E3234f00b9D7028e2c78dB2caa777F11490F',
    fabric: '0x310F5991c627b55a6CDd53dD01f70E15f7c249F3',
    multicallRouter: '0xcB28fbE3E9C0FEA62E0E63ff3f232CECfE555aD4',
    aavePool: '0x0000000000000000000000000000000000000000',
    creamComptroller: '0x0000000000000000000000000000000000000000',
    renGatewayRegistry: '0x0000000000000000000000000000000000000000'
  }, {
    id: 40,
    rpc: 'https://mainnet.telos.net/evm',
    filterBlockOffset: 4900,
    waitForBlocksCount: 120,
    stables: [{
      name: 'USDC',
      symbol: 'USDC',
      address: '0x818ec0a7fe18ff94269904fced6ae3dae6d6dc0b',
      chainId: 40,
      decimals: 6,
      isStable: true,
      icons: {
        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png',
        small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png'
      }
    }, {
      name: 'Synthetic BUSD',
      symbol: 'sBUSD',
      address: '0x017043607270ECbB440e20b0f0BC5E760818b3d8',
      chainId: 40,
      chainFromId: 56,
      decimals: 18,
      isStable: true,
      icons: {
        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/4687.png',
        small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/4687.png'
      }
    }],
    nerves: [{
      address: '0x7f3C1E54b8b8C7c08b02f0da820717fb641F26C8',
      tokens: ['0x818ec0a7fe18ff94269904fced6ae3dae6d6dc0b', '0x017043607270ECbB440e20b0f0BC5E760818b3d8'],
      decimals: [6, 18]
    }],
    router: '0xf9678db1ce83f6f51e5df348e2cc842ca51efec1',
    dexFee: 25,
    metaRouter: '0xc2299c4a45b7e44fFC23e6ba7aAC4AeFF0DDbccC',
    metaRouterGateway: '0xcB9ec7Bfa69c400F97fD667Bf3D8C61359cf50c2',
    bridge: '0xd5F0f8dB993D26F5df89E70a83d32b369DcCdaa0',
    synthesis: '0x47E70310b17f97f3bd5F2536854E3ccEc4A98295',
    portal: '0x17A0E3234f00b9D7028e2c78dB2caa777F11490F',
    fabric: '0x310F5991c627b55a6CDd53dD01f70E15f7c249F3',
    multicallRouter: '0xcB28fbE3E9C0FEA62E0E63ff3f232CECfE555aD4',
    aavePool: '0x0000000000000000000000000000000000000000',
    creamComptroller: '0x0000000000000000000000000000000000000000',
    renGatewayRegistry: '0x0000000000000000000000000000000000000000'
  }]
};

var config = {
  minSwapAmountInUsd: 10,
  maxSwapAmountInUsd: 10000,
  advisor: {
    url: 'https://api.testnet.symbiosis.finance/calculations'
  },
  chains: [{
    id: 4,
    rpc: 'https://rpc.ankr.com/eth_rinkeby',
    filterBlockOffset: 3000,
    waitForBlocksCount: 5,
    stables: [{
      name: 'USD Coin',
      address: '0x4DBCdF9B62e891a7cec5A2568C3F4FAF9E8Abe2b',
      symbol: 'USDC',
      isStable: true,
      decimals: 6,
      chainId: 4,
      icons: {
        large: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48/logo.png',
        small: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48/logo.png'
      }
    }],
    nerves: [],
    router: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D',
    dexFee: 30,
    metaRouter: '0x57751D871E199f6fB204d0FEb9B7055B639906a8',
    metaRouterGateway: '0x1c136C8fA324708b0621008777446eb509527e9A',
    bridge: '0x38b07a83b691bB221d0710B0eA6Ebd7494E106D3',
    synthesis: '0xBA7c80bb5d316c4eE55F96F47d1a1477fFD1aFb6',
    portal: '0x68801662cab0D678E5216CB67DaD350271375024',
    fabric: '0xB5ec93b32320Adb12Eef81cB97B68a3C69f8bc4E',
    multicallRouter: '0x4D497d76bB2D1696478BDe75cFe41635d4e3489B',
    aavePool: '0x0000000000000000000000000000000000000000',
    creamComptroller: '0x0000000000000000000000000000000000000000',
    renGatewayRegistry: '0x0000000000000000000000000000000000000000'
  }, {
    id: 97,
    rpc: 'https://data-seed-prebsc-1-s1.binance.org:8545',
    filterBlockOffset: 3000,
    waitForBlocksCount: 20,
    stables: [{
      name: 'Binance USD',
      address: '0x9a01bf917477dd9f5d715d188618fc8b7350cd22',
      symbol: 'BUSD',
      decimals: 18,
      chainId: 97,
      isStable: true,
      icons: {
        large: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/binance/assets/BUSD-BD1/logo.png',
        small: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/binance/assets/BUSD-BD1/logo.png'
      }
    }, {
      name: 'Synthetic USD Coin',
      address: '0x6fECa3dB72eE8a2CF9653136E98565993b541848',
      symbol: 'sUSDC',
      decimals: 6,
      chainId: 97,
      chainFromId: 4,
      isStable: true,
      icons: {
        large: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48/logo.png',
        small: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48/logo.png'
      }
    }],
    nerves: [{
      address: '0x83E28bdF57a381Ec600f2fA0Cf423019EE9A4649',
      tokens: ['0x9a01bf917477dd9f5d715d188618fc8b7350cd22', '0x6fECa3dB72eE8a2CF9653136E98565993b541848'],
      decimals: [18, 6]
    }],
    router: '0xD99D1c33F9fC3444f8101754aBC46c52416550D1',
    dexFee: 25,
    metaRouter: '0x77Bd1d0F771bc5034AB6aC743D7d7b9c220b0D07',
    metaRouterGateway: '0x98A5B2040cAf5bAA073B04d1a7Fb2907A8881B3B',
    bridge: '0x67e2696fb65641902AA26DC9bABf76cE134CA377',
    synthesis: '0xF0f4F93CE9A0Ee6e9ad9406e0fea81843164fD74',
    portal: '0x1EE47a7DF64a8A23FA47458d9d7b148559b728ac',
    fabric: '0xdBfb647247E4e402437f717FB154a990a6f5372d',
    multicallRouter: '0x11F86290B2E223Ff66B89d9BED8004815436ee77',
    aavePool: '0x0000000000000000000000000000000000000000',
    creamComptroller: '0x0000000000000000000000000000000000000000',
    renGatewayRegistry: '0x0000000000000000000000000000000000000000'
  }, {
    id: 43113,
    rpc: 'https://rpc.ankr.com/avalanche_fuji',
    filterBlockOffset: 3000,
    waitForBlocksCount: 20,
    stables: [{
      name: 'USDT',
      symbol: 'USDT',
      address: '0x9a01bf917477dd9f5d715d188618fc8b7350cd22',
      chainId: 43113,
      decimals: 6,
      isStable: true,
      icons: {
        large: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xdAC17F958D2ee523a2206206994597C13D831ec7/logo.png',
        small: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xdAC17F958D2ee523a2206206994597C13D831ec7/logo.png'
      }
    }, {
      name: 'Synthetic USDC',
      symbol: 'sUSDC',
      address: '0xF18a3A0516d6e7A5A0416c79499E1dE370EBe1E2',
      chainId: 43113,
      chainFromId: 4,
      decimals: 6,
      isStable: true,
      icons: {
        large: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48/logo.png',
        small: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48/logo.png'
      }
    }, {
      name: 'Synthetic BUSD',
      symbol: 'sBUSD',
      address: '0x80423D3640674a4c2EFFC7a628C1f22d71C3C994',
      chainId: 43113,
      chainFromId: 97,
      decimals: 18,
      isStable: true,
      icons: {
        large: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/binance/assets/BUSD-BD1/logo.png',
        small: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/binance/assets/BUSD-BD1/logo.png'
      }
    }, {
      name: 'Synthetic USDT',
      symbol: 'sUSDT',
      address: '0x7857192Cc69869CaE1701127338Fd9b033f88915',
      chainId: 43113,
      chainFromId: 80001,
      decimals: 6,
      isStable: true,
      icons: {
        large: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/binance/assets/BUSD-BD1/logo.png',
        small: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/binance/assets/BUSD-BD1/logo.png'
      }
    }],
    nerves: [{
      address: '0x38b07a83b691bB221d0710B0eA6Ebd7494E106D3',
      tokens: ['0x9a01bf917477dd9f5d715d188618fc8b7350cd22', '0xF18a3A0516d6e7A5A0416c79499E1dE370EBe1E2'],
      decimals: [6, 6]
    }, {
      address: '0x68801662cab0D678E5216CB67DaD350271375024',
      tokens: ['0x9a01bf917477dd9f5d715d188618fc8b7350cd22', '0x80423D3640674a4c2EFFC7a628C1f22d71C3C994'],
      decimals: [6, 18]
    }, {
      address: '0xB5ec93b32320Adb12Eef81cB97B68a3C69f8bc4E',
      tokens: ['0x9a01bf917477dd9f5d715d188618fc8b7350cd22', '0x7857192Cc69869CaE1701127338Fd9b033f88915'],
      decimals: [6, 6]
    }],
    router: '0x4F86a87985a2eD1E843c0b93755Ac06A3DbCc55E',
    dexFee: 30,
    metaRouter: '0xAc7e49bd1Ed1859a8928318603260bFF91c4d6a4',
    metaRouterGateway: '0x9af39c876D55C7eBC63C1852Cdf4aacf839467a4',
    bridge: '0x68d12DD9cd42BD62A6F707A96B3dc8D1A6a9f076',
    synthesis: '0x9A857D526A9e53697a9Df5fFc40bCCD70E7A0388',
    portal: '0x14be03e34B05a87A028acfF0292C1AF135D26699',
    fabric: '0x69fA0Ae9E3065B9d6c4c1909E101807bAaf3227e',
    multicallRouter: '0x20c6f13c168bA6C90b0AD0cC0C021d01D1DFA820',
    aavePool: '0x0000000000000000000000000000000000000000',
    creamComptroller: '0x0000000000000000000000000000000000000000',
    renGatewayRegistry: '0x0000000000000000000000000000000000000000'
  }, {
    id: 80001,
    rpc: 'https://rpc.ankr.com/polygon_mumbai',
    filterBlockOffset: 3000,
    waitForBlocksCount: 60,
    stables: [{
      name: 'USDT',
      symbol: 'USDT',
      address: '0x9a01bf917477dd9f5d715d188618fc8b7350cd22',
      chainId: 80001,
      decimals: 6,
      isStable: true,
      icons: {
        large: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xdAC17F958D2ee523a2206206994597C13D831ec7/logo.png',
        small: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xdAC17F958D2ee523a2206206994597C13D831ec7/logo.png'
      }
    }, {
      name: 'Synthetic BUSD',
      symbol: 'sBUSD',
      address: '0x680889574BAFC0B13d0F4B593C0f521F0511edA3',
      chainId: 80001,
      chainFromId: 97,
      decimals: 18,
      isStable: true,
      icons: {
        large: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/binance/assets/BUSD-BD1/logo.png',
        small: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/binance/assets/BUSD-BD1/logo.png'
      }
    }, {
      name: 'Synthetic USDC',
      symbol: 'sUSDC',
      address: '0xA6ec42a332039C9BDA7779A27b867db46fbdDE60',
      chainId: 80001,
      chainFromId: 4,
      decimals: 6,
      isStable: true,
      icons: {
        large: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48/logo.png',
        small: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48/logo.png'
      }
    }],
    nerves: [{
      address: '0x9666642b7B68281F912A0b4bee1d00b15ce7B28a',
      tokens: ['0x9a01bf917477dd9f5d715d188618fc8b7350cd22', '0xA6ec42a332039C9BDA7779A27b867db46fbdDE60'],
      decimals: [6, 6]
    }, {
      address: '0x575Fc14176F6F1fdbFC02b1FBe498b247A608203',
      tokens: ['0x9a01bf917477dd9f5d715d188618fc8b7350cd22', '0x680889574BAFC0B13d0F4B593C0f521F0511edA3'],
      decimals: [6, 18]
    }],
    router: '0xca33f6D096BDD7FcB28d708f631cD76E73Ecfc2d',
    dexFee: 30,
    metaRouter: '0x21A03993657116c281aa92206f2c0e6760707A26',
    metaRouterGateway: '0x27364922A07a39e4898a514751e28343131784b3',
    bridge: '0xEdCAeb1D346396B3e4E861e4A6F0B72b9850fCC5',
    synthesis: '0xEE0F117Db9ED4d1A4421cdCa7d32a1F878eF4F7C',
    portal: '0xfF0a032e793bAf78C4153CD96135013D6A468b39',
    fabric: '0xe0A0CEb6f3e740C4fc4A1eb38e4135440470175A',
    multicallRouter: '0xd44a28f1d6Cc17389597e415FAd6c6338dA0F0dC',
    aavePool: '0x0000000000000000000000000000000000000000',
    creamComptroller: '0x0000000000000000000000000000000000000000',
    renGatewayRegistry: '0x0000000000000000000000000000000000000000'
  }]
};

var ZappingBeefy = /*#__PURE__*/function (_BaseSwapping) {
  _inheritsLoose(ZappingBeefy, _BaseSwapping);

  function ZappingBeefy() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _BaseSwapping.call.apply(_BaseSwapping, [this].concat(args)) || this;
    _this.multicallRouter = void 0;
    _this.userAddress = void 0;
    _this.beefyVault = void 0;
    _this.aToken = void 0;
    return _this;
  }

  var _proto = ZappingBeefy.prototype;

  _proto.exactIn = /*#__PURE__*/function () {
    var _exactIn = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(tokenAmountIn, vaultAddress, vaultChainId, from, to, revertableAddress, slippage, deadline, use1Inch) {
      var tokenAddress, tokenContract, decimals, token;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (use1Inch === void 0) {
                use1Inch = true;
              }

              this.multicallRouter = this.symbiosis.multicallRouter(vaultChainId);
              this.userAddress = to;
              this.beefyVault = this.symbiosis.beefyVault(vaultAddress, vaultChainId);
              _context.next = 6;
              return this.beefyVault.want();

            case 6:
              tokenAddress = _context.sent;
              tokenContract = new contracts.Contract(tokenAddress, ERC20, this.symbiosis.providers.get(vaultChainId));
              _context.next = 10;
              return tokenContract.decimals();

            case 10:
              decimals = _context.sent;
              token = new Token({
                address: tokenAddress,
                chainId: vaultChainId,
                decimals: decimals
              });
              return _context.abrupt("return", this.doExactIn(tokenAmountIn, token, from, this.multicallRouter.address, revertableAddress, slippage, deadline, use1Inch));

            case 13:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function exactIn(_x, _x2, _x3, _x4, _x5, _x6, _x7, _x8, _x9) {
      return _exactIn.apply(this, arguments);
    }

    return exactIn;
  }();

  _proto.finalReceiveSide = function finalReceiveSide() {
    return this.multicallRouter.address;
  };

  _proto.finalCalldata = function finalCalldata() {
    return this.buildMulticall();
  };

  _proto.finalOffset = function finalOffset() {
    return 36;
  };

  _proto.swapTokens = function swapTokens() {
    var tokens = this.transit.route.map(function (i) {
      return i.address;
    });

    if (this.tradeC) {
      tokens.push(wrappedToken(this.tradeC.amountOut.token).address);
    } else {
      tokens.push(this.aToken);
    }

    return tokens;
  };

  _proto.buildMulticall = function buildMulticall() {
    var callDatas = [];
    var receiveSides = [];
    var path = [];
    var offsets = [];
    var amount;
    var supplyToken;

    if (this.tradeC) {
      amount = this.tradeC.tokenAmountIn.raw.toString();
      supplyToken = this.tradeC.amountOut.token;
      callDatas.push(this.tradeC.callData);
      receiveSides.push(this.tradeC.routerAddress);
      path.push(this.tradeC.tokenAmountIn.token.address);
      offsets.push(this.tradeC.callDataOffset);
    } else {
      amount = this.transit.amountOut.raw.toString();

      if (this.transit.direction === 'mint') {
        supplyToken = this.transit.amountOut.token;
      } else {
        supplyToken = this.transit.feeToken;
      }
    }

    var beefyCalldata = this.beefyVault["interface"].encodeFunctionData('deposit', ['0']); // amount will be patched

    callDatas.push(beefyCalldata);
    receiveSides.push(this.beefyVault.address);
    path.push(supplyToken.address, this.beefyVault.address);
    offsets.push(36);
    return this.multicallRouter["interface"].encodeFunctionData('multicall', [amount, callDatas, receiveSides, path, offsets, this.userAddress]);
  };

  return ZappingBeefy;
}(BaseSwapping);

var Symbiosis = /*#__PURE__*/function () {
  function Symbiosis(config$2, clientId) {
    this.providers = void 0;
    this.config = void 0;
    this.clientId = void 0;

    if (config$2 === 'mainnet') {
      this.config = config$1;
    } else if (config$2 === 'testnet') {
      this.config = config;
    } else {
      this.config = config$2;
    }

    this.clientId = ethers.utils.formatBytes32String(clientId);
    this.providers = new Map(this.config.chains.map(function (i) {
      return [i.id, new providers.StaticJsonRpcProvider(i.rpc, i.id)];
    }));
  }

  var _proto = Symbiosis.prototype;

  _proto.validateSwapAmounts = function validateSwapAmounts(amount) {
    var parsedAmount = parseFloat(amount.toExact(2));
    var minAmount = this.config.minSwapAmountInUsd;
    var maxAmount = this.config.maxSwapAmountInUsd;

    if (parsedAmount < minAmount) {
      throw new Error$1("The amount is too low: $" + parsedAmount + ". Min amount: $" + minAmount, exports.ErrorCode.AMOUNT_TOO_LOW);
    } else if (parsedAmount > maxAmount) {
      throw new Error$1("The amount is too high: $" + parsedAmount + ". Max amount: $" + maxAmount, exports.ErrorCode.AMOUNT_TOO_HIGH);
    } else ;
  };

  _proto.chains = function chains$1() {
    var ids = this.config.chains.map(function (i) {
      return i.id;
    });
    return chains.filter(function (i) {
      return ids.includes(i.id);
    });
  };

  _proto.newBridging = function newBridging() {
    return new Bridging(this);
  };

  _proto.newSwapping = function newSwapping() {
    return new Swapping(this);
  };

  _proto.newRevertPending = function newRevertPending(request) {
    return new RevertPending(this, request);
  };

  _proto.newZapping = function newZapping() {
    return new Zapping(this);
  };

  _proto.newZappingAave = function newZappingAave() {
    return new ZappingAave(this);
  };

  _proto.newZappingCream = function newZappingCream() {
    return new ZappingCream(this);
  };

  _proto.newZappingRenBTC = function newZappingRenBTC() {
    return new ZappingRenBTC(this);
  };

  _proto.newZappingBeefy = function newZappingBeefy() {
    return new ZappingBeefy(this);
  };

  _proto.getPendingRequests = function getPendingRequests$1(address) {
    return getPendingRequests(this, address);
  };

  _proto.getProvider = function getProvider(chainId) {
    var provider = this.providers.get(chainId);

    if (!provider) {
      throw new Error$1('No provider for given chainId');
    }

    return provider;
  };

  _proto.portal = function portal(chainId, signer) {
    var address = this.chainConfig(chainId).portal;
    var signerOrProvider = signer || this.getProvider(chainId);
    return Portal__factory.connect(address, signerOrProvider);
  };

  _proto.synthesis = function synthesis(chainId, signer) {
    var address = this.chainConfig(chainId).synthesis;
    var signerOrProvider = signer || this.getProvider(chainId);
    return Synthesis__factory.connect(address, signerOrProvider);
  };

  _proto.bridge = function bridge(chainId, signer) {
    var address = this.chainConfig(chainId).bridge;
    var signerOrProvider = signer || this.getProvider(chainId);
    return Bridge__factory.connect(address, signerOrProvider);
  };

  _proto.fabric = function fabric(chainId, signer) {
    var address = this.chainConfig(chainId).fabric;
    var signerOrProvider = signer || this.getProvider(chainId);
    return Fabric__factory.connect(address, signerOrProvider);
  };

  _proto.uniLikeRouter = function uniLikeRouter(chainId, signer) {
    var address = this.chainConfig(chainId).router;
    var signerOrProvider = signer || this.getProvider(chainId);
    return UniLikeRouter__factory.connect(address, signerOrProvider);
  };

  _proto.avaxRouter = function avaxRouter(chainId, signer) {
    var address = this.chainConfig(chainId).router;
    var signerOrProvider = signer || this.getProvider(chainId);
    return AvaxRouter__factory.connect(address, signerOrProvider);
  };

  _proto.adaRouter = function adaRouter(chainId, signer) {
    var address = this.chainConfig(chainId).router;
    var signerOrProvider = signer || this.getProvider(chainId);
    return AdaRouter__factory.connect(address, signerOrProvider);
  };

  _proto.nervePool = function nervePool(tokenIn, tokenOut, signer) {
    var _this$chainConfig$ner;

    var chainId = tokenIn.chainId;
    var address = (_this$chainConfig$ner = this.chainConfig(chainId).nerves.find(function (data) {
      return data.tokens.find(function (token) {
        return token.toLowerCase() === tokenIn.address.toLowerCase();
      }) && data.tokens.find(function (token) {
        return token.toLowerCase() === tokenOut.address.toLowerCase();
      });
    })) == null ? void 0 : _this$chainConfig$ner.address;

    if (!address) {
      throw new Error$1('Nerve pool not found');
    }

    var signerOrProvider = signer || this.getProvider(chainId);
    return NervePool__factory.connect(address, signerOrProvider);
  };

  _proto.getNerveTokenIndexes = function getNerveTokenIndexes(chainId, tokenA, tokenB) {
    var pool = this.chainConfig(chainId).nerves.find(function (data) {
      return data.tokens.find(function (token) {
        return token.toLowerCase() === tokenA.toLowerCase();
      }) && data.tokens.find(function (token) {
        return token.toLowerCase() === tokenB.toLowerCase();
      });
    });

    if (!pool) {
      throw new Error$1('Nerve pool not found');
    }

    var tokens = pool.tokens.map(function (i) {
      return i.toLowerCase();
    });
    var indexA = tokens.indexOf(tokenA.toLowerCase());
    var indexB = tokens.indexOf(tokenB.toLowerCase());

    if (indexA === -1 || indexB === -1) {
      throw new Error$1('Cannot find token');
    }

    return [indexA, indexB];
  };

  _proto.nervePoolByAddress = function nervePoolByAddress(address, chainId, signer) {
    var signerOrProvider = signer || this.getProvider(chainId);
    return NervePool__factory.connect(address, signerOrProvider);
  };

  _proto.creamCErc20ByAddress = function creamCErc20ByAddress(address, chainId, signer) {
    var signerOrProvider = signer || this.getProvider(chainId);
    return CreamCErc20__factory.connect(address, signerOrProvider);
  };

  _proto.benqiQiErc20ByAddress = function benqiQiErc20ByAddress(address, chainId, signer) {
    var signerOrProvider = signer || this.getProvider(chainId);
    return BenqiQiErc20__factory.connect(address, signerOrProvider);
  };

  _proto.creamComptroller = function creamComptroller(chainId, signer) {
    var address = this.chainConfig(chainId).creamComptroller;
    var signerOrProvider = signer || this.getProvider(chainId);
    return CreamComptroller__factory.connect(address, signerOrProvider);
  };

  _proto.aavePool = function aavePool(chainId, signer) {
    var address = this.chainConfig(chainId).aavePool;
    var signerOrProvider = signer || this.getProvider(chainId);
    return Aave__factory.connect(address, signerOrProvider);
  };

  _proto.multicallRouter = function multicallRouter(chainId, signer) {
    var address = this.chainConfig(chainId).multicallRouter;
    var signerOrProvider = signer || this.getProvider(chainId);
    return MulticallRouter__factory.connect(address, signerOrProvider);
  };

  _proto.metaRouter = function metaRouter(chainId, signer) {
    var address = this.chainConfig(chainId).metaRouter;
    var signerOrProvider = signer || this.getProvider(chainId);
    return MetaRouter__factory.connect(address, signerOrProvider);
  };

  _proto.oneInchOracle = function oneInchOracle(chainId, signer) {
    var address = ONE_INCH_ORACLE_MAP[chainId];

    if (!address) {
      throw new Error$1("Could not find oneInch off-chain oracle on chain " + chainId);
    }

    var signerOrProvider = signer || this.getProvider(chainId);
    return OneInchOracle__factory.connect(address, signerOrProvider);
  };

  _proto.renRenGatewayRegistry = function renRenGatewayRegistry(chainId, signer) {
    var address = this.chainConfig(chainId).renGatewayRegistry;
    var signerOrProvider = signer || this.getProvider(chainId);
    return RenGatewayRegistryV2__factory.connect(address, signerOrProvider);
  };

  _proto.renMintGatewayByAddress = function renMintGatewayByAddress(address, chainId, signer) {
    var signerOrProvider = signer || this.getProvider(chainId);
    return RenMintGatewayV3__factory.connect(address, signerOrProvider);
  };

  _proto.beefyVault = function beefyVault(address, chainId, signer) {
    var signerOrProvider = signer || this.getProvider(chainId);
    return BeefyVault__factory.connect(address, signerOrProvider);
  };

  _proto.stables = function stables() {
    return this.config.chains.map(function (chainConfig) {
      return chainConfig.stables.map(function (params) {
        return new Token(params);
      });
    }).reduce(function (acc, tokens) {
      return [].concat(acc, tokens);
    }, []);
  };

  _proto.findTransitStable = function findTransitStable(chainId) {
    return this.stables().find(function (token) {
      return token.chainId === chainId && !token.isSynthetic;
    });
  };

  _proto.findStable = function findStable(address, chainId, chainFromId) {
    return this.stables().find(function (token) {
      var condition = token.address.toLowerCase() === address.toLowerCase() && token.chainId === chainId;
      if (chainFromId === undefined) return condition;
      return condition && token.chainFromId === chainFromId;
    });
  };

  _proto.getRepresentation = /*#__PURE__*/function () {
    var _getRepresentation2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(token, chainId) {
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", getRepresentation(this, token, chainId));

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function getRepresentation$1(_x, _x2) {
      return _getRepresentation2.apply(this, arguments);
    }

    return getRepresentation$1;
  }();

  _proto.getBridgeFee = /*#__PURE__*/function () {
    var _getBridgeFee = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(_ref) {
      var calldata, receiveSide, chainIdFrom, chainIdTo, params;
      return _regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              calldata = _ref.calldata, receiveSide = _ref.receiveSide, chainIdFrom = _ref.chainIdFrom, chainIdTo = _ref.chainIdTo;
              params = {
                chain_id_from: chainIdFrom,
                chain_id_to: chainIdTo,
                receive_side: receiveSide,
                call_data: calldata,
                client_id: ethers.utils.parseBytes32String(this.clientId)
              };
              return _context3.abrupt("return", fetch__default["default"](this.config.advisor.url + "/v1/swap/price", {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify(params)
              }).then( /*#__PURE__*/function () {
                var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(response) {
                  return _regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                      switch (_context2.prev = _context2.next) {
                        case 0:
                          if (response.ok) {
                            _context2.next = 8;
                            break;
                          }

                          _context2.t0 = Promise;
                          _context2.t1 = Error$1;
                          _context2.next = 5;
                          return response.text();

                        case 5:
                          _context2.t2 = _context2.sent;
                          _context2.t3 = new _context2.t1(_context2.t2);
                          return _context2.abrupt("return", _context2.t0.reject.call(_context2.t0, _context2.t3));

                        case 8:
                          return _context2.abrupt("return", response.json());

                        case 9:
                        case "end":
                          return _context2.stop();
                      }
                    }
                  }, _callee2);
                }));

                return function (_x4) {
                  return _ref2.apply(this, arguments);
                };
              }()).then(function (_ref3) {
                var price = _ref3.price;
                return JSBI__default["default"].BigInt(price);
              }));

            case 3:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function getBridgeFee(_x3) {
      return _getBridgeFee.apply(this, arguments);
    }

    return getBridgeFee;
  }();

  _proto.filterBlockOffset = function filterBlockOffset(chainId) {
    return this.chainConfig(chainId).filterBlockOffset;
  };

  _proto.getFromBlockWithOffset = /*#__PURE__*/function () {
    var _getFromBlockWithOffset = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(chainId) {
      var provider, blockNumber, offset;
      return _regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              provider = this.getProvider(chainId);
              _context4.next = 3;
              return provider.getBlockNumber();

            case 3:
              blockNumber = _context4.sent;
              offset = this.filterBlockOffset(chainId);
              return _context4.abrupt("return", Math.max(0, blockNumber - offset));

            case 6:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    function getFromBlockWithOffset(_x5) {
      return _getFromBlockWithOffset.apply(this, arguments);
    }

    return getFromBlockWithOffset;
  }();

  _proto.dexFee = function dexFee(chainId) {
    return this.chainConfig(chainId).dexFee;
  };

  _proto.chainConfig = function chainConfig(chainId) {
    var config = this.config.chains.find(function (item) {
      return item.id === chainId;
    });
    if (!config) throw new Error$1("Could not config by given chainId: " + chainId);
    return config;
  };

  _proto.transitStable = function transitStable(chainId) {
    var stable = this.findTransitStable(chainId);

    if (stable === undefined) {
      throw new Error$1("Cannot find transit stable token for chain " + chainId);
    }

    return stable;
  };

  _proto.isTransitStable = function isTransitStable(token) {
    return token.address === this.transitStable(token.chainId).address;
  };

  return Symbiosis;
}();

var RevertRequest = /*#__PURE__*/function () {
  function RevertRequest(symbiosis, chainId, transactionHash) {
    this.symbiosis = void 0;
    this.chainId = void 0;
    this.transactionHash = void 0;
    this.symbiosis = symbiosis;
    this.chainId = chainId;
    this.transactionHash = transactionHash;
  }

  var _proto = RevertRequest.prototype;

  _proto.init = /*#__PURE__*/function () {
    var _init = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {
      var _ref$validateState, validateState, provider, receipt, type, log, _log$args, id, amount, tokenAddress, from, to, chainID, revertableAddress, chainIdTo, contractAddress, token, externalId, state;

      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _ref$validateState = _ref.validateState, validateState = _ref$validateState === void 0 ? false : _ref$validateState;
              provider = this.symbiosis.getProvider(this.chainId);
              _context.next = 4;
              return provider.ready;

            case 4:
              _context.next = 6;
              return provider.getTransactionReceipt(this.transactionHash);

            case 6:
              receipt = _context.sent;

              if (receipt) {
                _context.next = 9;
                break;
              }

              throw new Error("Tx " + this.transactionHash + " does not exist on chain " + this.chainId + ". Provider " + provider.connection.url);

            case 9:
              type = 'synthesize';
              log = this.findSynthesizeRequest(receipt);

              if (!log) {
                type = 'burn';
                log = this.findBurnRequest(receipt);
              }

              if (log) {
                _context.next = 14;
                break;
              }

              throw new Error('Tx does not contain mint/burn event and cannot be reverted');

            case 14:
              _log$args = log.args, id = _log$args.id, amount = _log$args.amount, tokenAddress = _log$args.token, from = _log$args.from, to = _log$args.to, chainID = _log$args.chainID, revertableAddress = _log$args.revertableAddress;
              chainIdTo = chainID.toNumber();

              if (type === 'synthesize') {
                contractAddress = this.symbiosis.synthesis(chainIdTo).address;
              } else {
                contractAddress = this.symbiosis.portal(chainIdTo).address;
              }

              token = this.symbiosis.findStable(tokenAddress, this.chainId);

              if (token) {
                _context.next = 20;
                break;
              }

              throw new Error("Cannot find token " + tokenAddress + " at chain " + this.chainId);

            case 20:
              externalId = getExternalId({
                internalId: id,
                contractAddress: contractAddress,
                revertableAddress: revertableAddress,
                chainId: chainIdTo
              });
              state = exports.PendingRequestState.Default;

              if (!validateState) {
                _context.next = 34;
                break;
              }

              if (!(type === 'synthesize')) {
                _context.next = 29;
                break;
              }

              _context.next = 26;
              return this.symbiosis.synthesis(chainIdTo).synthesizeStates(externalId);

            case 26:
              state = _context.sent;
              _context.next = 32;
              break;

            case 29:
              _context.next = 31;
              return this.symbiosis.portal(chainIdTo).unsynthesizeStates(externalId);

            case 31:
              state = _context.sent;

            case 32:
              if (!(state === 1)) {
                _context.next = 34;
                break;
              }

              throw new Error("Tx is success and cannot be reverted.");

            case 34:
              return _context.abrupt("return", {
                internalId: id,
                externalId: externalId,
                transactionHash: this.transactionHash,
                state: state,
                type: type,
                from: from,
                to: to,
                revertableAddress: revertableAddress,
                chainIdFrom: this.chainId,
                chainIdTo: chainIdTo,
                fromTokenAmount: new TokenAmount(token, amount)
              });

            case 35:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function init(_x) {
      return _init.apply(this, arguments);
    }

    return init;
  }();

  _proto.findSynthesizeRequest = function findSynthesizeRequest(receipt) {
    var contract = Portal__factory.createInterface();
    var event = contract.events['SynthesizeRequest(bytes32,address,uint256,address,address,uint256,address)'];
    var log = receipt.logs.find(function (log) {
      var topic = contract.getEventTopic(event);
      return log.topics[0] === topic;
    });
    if (!log) return null;
    return contract.parseLog(log);
  };

  _proto.findBurnRequest = function findBurnRequest(receipt) {
    var contract = Synthesis__factory.createInterface();
    var burnRequest = contract.events['BurnRequest(bytes32,address,uint256,address,address,uint256,address)'];
    var log = receipt.logs.find(function (log) {
      var topic = contract.getEventTopic(burnRequest);
      return log.topics[0] === topic;
    });
    if (!log) return null;
    return contract.parseLog(log);
  };

  return RevertRequest;
}();

Object.defineProperty(exports, 'JSBI', {
    enumerable: true,
    get: function () { return JSBI__default["default"]; }
});
exports.BASES_TO_CHECK_TRADES_AGAINST = BASES_TO_CHECK_TRADES_AGAINST;
exports.BIPS_BASE = BIPS_BASE;
exports.Bridging = Bridging;
exports.CHAINS_PRIORITY = CHAINS_PRIORITY;
exports.CUSTOM_BASES = CUSTOM_BASES;
exports.Chain = Chain;
exports.DEX_TOKENS_TO_CHECK_TRADES_AGAINST = DEX_TOKENS_TO_CHECK_TRADES_AGAINST;
exports.Error = Error$1;
exports.FACTORY_ADDRESS = FACTORY_ADDRESS;
exports.Fetcher = Fetcher;
exports.Fraction = Fraction;
exports.GetLogTimeoutExceededError = GetLogTimeoutExceededError;
exports.INIT_CODE_HASH = INIT_CODE_HASH;
exports.InsufficientInputAmountError = InsufficientInputAmountError;
exports.InsufficientReservesError = InsufficientReservesError;
exports.MINIMUM_LIQUIDITY = MINIMUM_LIQUIDITY;
exports.MULTICALL_ADDRESSES = MULTICALL_ADDRESSES;
exports.NoMulticallAddressError = NoMulticallAddressError;
exports.ONE_BIPS = ONE_BIPS;
exports.ONE_INCH_CHAINS = ONE_INCH_CHAINS;
exports.ONE_INCH_ORACLE_MAP = ONE_INCH_ORACLE_MAP;
exports.Pair = Pair;
exports.Percent = Percent;
exports.Price = Price;
exports.RevertRequest = RevertRequest;
exports.Route = Route;
exports.Router = Router;
exports.Symbiosis = Symbiosis;
exports.Token = Token;
exports.TokenAmount = TokenAmount;
exports.Trade = Trade;
exports.TransactionStuckError = TransactionStuckError;
exports.WETH = WETH;
exports.WETH_ONLY = WETH_ONLY;
exports.WaitForComplete = WaitForComplete;
exports.ZERO = ZERO;
exports.Zapping = Zapping;
exports.ZappingRenBTC = ZappingRenBTC;
exports.basisPointsToPercent = basisPointsToPercent;
exports.calculateGasMargin = calculateGasMargin;
exports.calculatePriceImpact = calculatePriceImpact;
exports.canOneInch = canOneInch;
exports.chains = chains;
exports.computeSlippageAdjustedAmounts = computeSlippageAdjustedAmounts;
exports.computeTradePriceBreakdown = computeTradePriceBreakdown;
exports.getChainById = getChainById;
exports.getChainPendingRequests = getChainPendingRequests;
exports.getExternalId = getExternalId;
exports.getInternalId = getInternalId;
exports.getLogWithTimeout = getLogWithTimeout;
exports.getMulticall = getMulticall;
exports.getPendingRequests = getPendingRequests;
exports.getRepresentation = getRepresentation;
exports.inputOutputComparator = inputOutputComparator;
exports.tokenEquals = tokenEquals;
exports.tradeComparator = tradeComparator;
exports.wrappedAmount = wrappedAmount;
exports.wrappedToken = wrappedToken;
//# sourceMappingURL=symbiosis-js-sdk.cjs.development.js.map
