import { Log, TransactionReceipt, TransactionRequest, TransactionResponse } from '@ethersproject/providers';
import { Signer } from 'ethers';
import { Percent, Token, TokenAmount } from '../entities';
import { Execute, WaitForMined } from './bridging';
import type { Symbiosis } from './symbiosis';
import { UniLikeTrade } from './uniLikeTrade';
import { OneInchTrade } from './oneInchTrade';
import { DataProvider } from './dataProvider';
import { Transit } from './transit';
export declare type SwapExactIn = Promise<{
    execute: (signer: Signer) => Execute;
    fee: TokenAmount;
    tokenAmountOut: TokenAmount;
    tokenAmountOutWithZeroFee: TokenAmount;
    route: Token[];
    priceImpact: Percent;
    amountInUsd: TokenAmount;
    transactionRequest: TransactionRequest;
    approveTo: string;
}>;
export declare abstract class BaseSwapping {
    amountInUsd: TokenAmount | undefined;
    protected from: string;
    protected to: string;
    protected revertableAddress: string;
    protected tokenAmountIn: TokenAmount;
    protected tokenOut: Token;
    protected slippage: number;
    protected deadline: number;
    protected ttl: number;
    protected use1Inch: boolean;
    protected route: Token[];
    protected tradeA: UniLikeTrade | OneInchTrade | undefined;
    protected transit: Transit;
    protected tradeC: UniLikeTrade | OneInchTrade | undefined;
    protected dataProvider: DataProvider;
    protected readonly symbiosis: Symbiosis;
    constructor(symbiosis: Symbiosis);
    protected doExactIn(tokenAmountIn: TokenAmount, tokenOut: Token, from: string, to: string, revertableAddress: string, slippage: number, deadline: number, use1Inch: boolean): SwapExactIn;
    protected approveTo(): string;
    protected execute(transactionRequest: TransactionRequest, signer: Signer): Execute;
    protected waitForMined(confirmations: number, response: TransactionResponse): WaitForMined;
    waitForComplete(receipt: TransactionReceipt): Promise<Log>;
    protected getTransactionRequest(fee: TokenAmount): TransactionRequest;
    protected calculatePriceImpact(): Percent;
    protected tokenAmountOut(): TokenAmount;
    protected buildTradeA(): UniLikeTrade | OneInchTrade;
    protected buildTransit(fee?: TokenAmount): Transit;
    protected buildTradeC(): UniLikeTrade | OneInchTrade;
    protected getRoute(): Token[];
    protected otherSideBurnCallData(fee: TokenAmount): [string, string];
    protected otherSideSynthCallData(fee: TokenAmount): [string, string];
    protected otherSideData(fee: TokenAmount): [string, string];
    protected feeMintCallData(): Promise<[string, string]>;
    protected feeBurnCallData(): Promise<[string, string]>;
    protected getFee(feeToken: Token): Promise<TokenAmount>;
    protected approvedTokens(): string[];
    protected firstDexRouter(): string;
    protected firstSwapCalldata(): string | [];
    protected secondDexRouter(): string;
    protected secondSwapCalldata(): string | [];
    protected finalReceiveSide(): string;
    protected finalCalldata(): string | [];
    protected finalOffset(): number;
    protected swapTokens(): string[];
}
