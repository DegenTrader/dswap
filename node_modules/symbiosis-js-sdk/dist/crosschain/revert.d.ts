import { TransactionRequest } from '@ethersproject/providers';
import { Signer } from 'ethers';
import { TokenAmount } from '../entities';
import { PendingRequest } from './pending';
import type { Symbiosis } from './symbiosis';
export declare class RevertPending {
    private symbiosis;
    private request;
    constructor(symbiosis: Symbiosis, request: PendingRequest);
    revert(): Promise<{
        fee: TokenAmount;
        transactionRequest: TransactionRequest;
        execute: (signer: Signer) => Promise<{
            waitForMined: (confirmations?: number) => Promise<{
                receipt: import("ethers").ContractReceipt;
                waitForComplete: () => Promise<string>;
            }>;
            transaction: import("@ethersproject/abstract-provider").TransactionResponse;
        }>;
    }>;
    waitForComplete(): Promise<string>;
    private getFee;
    private getTransactionRequest;
    private getRevertSynthesizeTransactionRequest;
    private getRevertBurnTransactionRequest;
    private execute;
    private waitForMined;
    private getExternalId;
}
