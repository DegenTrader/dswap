import { Filter, Log } from '@ethersproject/providers';
import { BigNumber } from 'ethers';
import { ChainId } from '../constants';
import { Percent, TokenAmount, Trade } from '../entities';
import type { Symbiosis } from './symbiosis';
import { Field } from './types';
interface GetInternalIdParams {
    contractAddress: string;
    requestCount: BigNumber;
    chainId: ChainId;
}
interface GetExternalIdParams {
    internalId: string;
    contractAddress: string;
    revertableAddress: string;
    chainId: ChainId;
}
export declare const canOneInch: (chainId: ChainId) => boolean;
export declare function getInternalId({ contractAddress, requestCount, chainId }: GetInternalIdParams): string;
export declare function getExternalId({ internalId, contractAddress, revertableAddress, chainId, }: GetExternalIdParams): string;
export declare function calculateGasMargin(value: BigNumber): BigNumber;
export declare function computeTradePriceBreakdown(trade?: Trade, dexFee?: number): {
    priceImpactWithoutFee?: Percent;
    realizedLPFee?: TokenAmount;
};
export declare function basisPointsToPercent(num: number): Percent;
export declare function computeSlippageAdjustedAmounts(trade: Trade | undefined, allowedSlippage: number): {
    [field in Field]?: TokenAmount;
};
export declare function calculatePriceImpact(tokenAmountIn: TokenAmount, tokenAmountOut: TokenAmount): Percent;
export declare class GetLogTimeoutExceededError extends Error {
    readonly filter: Filter;
    constructor(filter: Filter);
}
interface GetLogsWithTimeoutParams {
    symbiosis: Symbiosis;
    chainId: ChainId;
    filter: Filter;
    exceedDelay?: number;
}
export declare function getLogWithTimeout({ symbiosis, chainId, filter, exceedDelay: exceedTimeout, }: GetLogsWithTimeoutParams): Promise<Log>;
export {};
