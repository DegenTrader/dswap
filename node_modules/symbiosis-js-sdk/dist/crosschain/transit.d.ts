import { NerveTrade } from './nerveTrade';
import { Symbiosis } from './symbiosis';
import { DataProvider } from './dataProvider';
import { Percent, Token, TokenAmount } from '../entities';
import { ChainId } from '../constants';
import { BridgeDirection } from './types';
export declare class Transit {
    protected symbiosis: Symbiosis;
    protected dataProvider: DataProvider;
    protected amountIn: TokenAmount;
    protected tokenOut: Token;
    protected slippage: number;
    protected deadline: number;
    protected fee?: TokenAmount | undefined;
    direction: BridgeDirection;
    receiveSide: string;
    callData: string | [];
    route: Token[];
    priceImpact: Percent;
    amountOut: TokenAmount;
    feeToken: Token;
    protected tradeB: NerveTrade | undefined;
    constructor(symbiosis: Symbiosis, dataProvider: DataProvider, amountIn: TokenAmount, tokenOut: Token, slippage: number, deadline: number, fee?: TokenAmount | undefined);
    init(): Promise<Transit>;
    getBridgeAmountIn(): TokenAmount;
    getBridgeAmountOut(): TokenAmount;
    protected getTradeBAmountOut(): TokenAmount;
    amount(): TokenAmount;
    protected static getDirection(chainIdIn: ChainId, chainIdOut: ChainId): "burn" | "mint";
    protected isTradeRequired(): boolean;
    protected getFeeToken(): Promise<Token>;
    protected getTradeBAmountIn(): TokenAmount;
    protected getTradeBTokenOut(): Promise<Token>;
    protected buildTradeB(): Promise<NerveTrade>;
}
