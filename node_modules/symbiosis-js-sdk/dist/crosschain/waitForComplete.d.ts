import { Log, TransactionReceipt } from '@ethersproject/providers';
import { ChainId } from '../constants';
import { Token } from '../entities';
import type { Symbiosis } from './symbiosis';
import { BridgeDirection } from './types';
import { PendingRequest } from './pending';
interface WaitForCompleteParams {
    symbiosis: Symbiosis;
    tokenOut: Token;
    direction: BridgeDirection;
    revertableAddress: string;
    chainIdIn: ChainId;
}
export declare class TransactionStuckError extends Error {
    readonly pendingRequest: PendingRequest;
    constructor(pendingRequest: PendingRequest);
}
export declare class WaitForComplete {
    private readonly direction;
    private readonly symbiosis;
    private readonly tokenOut;
    private readonly revertableAddress;
    private readonly chainIdIn;
    constructor({ direction, symbiosis, tokenOut, revertableAddress, chainIdIn }: WaitForCompleteParams);
    waitForComplete(receipt: TransactionReceipt): Promise<Log>;
    private getRequestArgs;
    private buildOtherSideFilter;
    private getPendingRequest;
}
export {};
