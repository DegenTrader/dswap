import { Log, TransactionReceipt, TransactionRequest, TransactionResponse } from '@ethersproject/providers';
import { Signer } from 'ethers';
import { Token, TokenAmount } from '../entities';
import type { Symbiosis } from './symbiosis';
import { BridgeDirection } from './types';
export declare type WaitForMined = Promise<{
    receipt: TransactionReceipt;
    waitForComplete: () => Promise<Log>;
}>;
export declare type Execute = Promise<{
    response: TransactionResponse;
    waitForMined: () => WaitForMined;
}>;
export declare type ExactIn = Promise<{
    execute: (signer: Signer) => Execute;
    fee: TokenAmount;
    tokenAmountOut: TokenAmount;
    transactionRequest: TransactionRequest;
}>;
export declare class Bridging {
    tokenAmountIn: TokenAmount | undefined;
    tokenOut: Token | undefined;
    tokenAmountOut: TokenAmount | undefined;
    direction: BridgeDirection;
    to: string;
    revertableAddress: string;
    protected fee: TokenAmount | undefined;
    private readonly symbiosis;
    constructor(symbiosis: Symbiosis);
    exactIn(tokenAmountIn: TokenAmount, tokenOut: Token, to: string, revertableAddress: string): ExactIn;
    protected getFee(): Promise<TokenAmount>;
    protected execute(transactionRequest: TransactionRequest, signer: Signer): Execute;
    protected waitForMined(confirmations: number, response: TransactionResponse): WaitForMined;
    protected getTransactionRequest(fee: TokenAmount): TransactionRequest;
    private getMintFee;
    private getBurnFee;
    waitForComplete(receipt: TransactionReceipt): Promise<Log>;
}
