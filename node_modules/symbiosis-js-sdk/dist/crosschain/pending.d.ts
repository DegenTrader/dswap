import { TokenAmount } from '../entities';
import { ChainId } from '../constants';
import type { Symbiosis } from './symbiosis';
export declare enum PendingRequestState {
    Default = 0,
    Sent = 1,
    Reverted = 2
}
export declare type PendingRequestType = 'burn' | 'synthesize';
export interface PendingRequest {
    fromTokenAmount: TokenAmount;
    transactionHash: string;
    state: PendingRequestState;
    internalId: string;
    externalId: string;
    type: PendingRequestType;
    from: string;
    to: string;
    revertableAddress: string;
    chainIdFrom: ChainId;
    chainIdTo: ChainId;
}
interface GetChainPendingRequestsParams {
    symbiosis: Symbiosis;
    activeChainId: ChainId;
    chainsIds: ChainId[];
    address: string;
    type: PendingRequestType;
}
export declare function getChainPendingRequests({ symbiosis, activeChainId, chainsIds, address, type, }: GetChainPendingRequestsParams): Promise<PendingRequest[]>;
export declare function getPendingRequests(symbiosis: Symbiosis, address: string): Promise<PendingRequest[]>;
export {};
