import { Log, TransactionReceipt, TransactionRequest, TransactionResponse } from '@ethersproject/providers';
import { Signer } from 'ethers';
import { ChainId } from '../constants';
import { Percent, TokenAmount } from '../entities';
import { Execute, WaitForMined } from './bridging';
import type { Symbiosis } from './symbiosis';
import { DataProvider } from './dataProvider';
export declare type SwapExactIn = Promise<{
    execute: (signer: Signer) => Execute;
    fee: TokenAmount;
    tokenAmountOut: TokenAmount;
    priceImpact: Percent;
    amountInUsd: TokenAmount;
    transactionRequest: TransactionRequest;
}>;
export declare class Zapping {
    protected dataProvider: DataProvider;
    private from;
    private to;
    private revertableAddress;
    private tokenAmountIn;
    private poolAddress;
    private poolChainId;
    private slippage;
    private deadline;
    private ttl;
    private use1Inch;
    private tradeA;
    private synthToken;
    private nerveLiquidity;
    private readonly symbiosis;
    constructor(symbiosis: Symbiosis);
    exactIn(tokenAmountIn: TokenAmount, poolAddress: string, poolChainId: ChainId, from: string, to: string, revertableAddress: string, slippage: number, deadline: number, use1Inch?: boolean): SwapExactIn;
    waitForComplete(receipt: TransactionReceipt): Promise<Log>;
    private getTransactionRequest;
    private calculatePriceImpact;
    private getSynthAmount;
    private buildTradeA;
    private buildNerveLiquidity;
    private otherSideSynthCallData;
    protected execute(transactionRequest: TransactionRequest, signer: Signer): Execute;
    protected waitForMined(confirmations: number, response: TransactionResponse): WaitForMined;
    private getSynthToken;
    protected getFee(): Promise<TokenAmount>;
}
