import { ChainId } from '../constants';
import { TokenAmount } from '../entities';
import { SwapExactIn, BaseSwapping } from './baseSwapping';
import { MulticallRouter, RenMintGatewayV3 } from './contracts';
export declare type ZappingRenBTCExactIn = Promise<Omit<Awaited<SwapExactIn>, 'execute'> & {
    execute: ReturnType<ZappingRenBTC['buildExecute']>;
    renBTCAmountOut: TokenAmount;
}>;
export declare class ZappingRenBTC extends BaseSwapping {
    protected multicallRouter: MulticallRouter;
    protected userAddress: string;
    protected renMintGatewayV3: RenMintGatewayV3;
    protected renBTCAddress: string;
    protected renChainId: ChainId;
    exactIn(tokenAmountIn: TokenAmount, renChainId: ChainId, from: string, to: string, revertableAddress: string, slippage: number, deadline: number, use1Inch?: boolean): ZappingRenBTCExactIn;
    waitForREN(transactionHash: string): Promise<string | undefined>;
    protected finalReceiveSide(): string;
    protected finalCalldata(): string | [];
    protected finalOffset(): number;
    private buildMulticall;
    private createRENJS;
    private estimateBTCOutput;
    private buildExecute;
}
