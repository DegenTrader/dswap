import { ChainId, Icons, TokenConstructor } from '../constants';
import { Chain } from './chain';
/**
 * A token is any fungible financial instrument on Ethereum.
 *
 */
export declare class Token {
    readonly decimals: number;
    readonly symbol?: string;
    readonly name?: string;
    readonly chainId: ChainId;
    readonly address: string;
    readonly icons?: Icons;
    readonly chainFromId?: ChainId;
    readonly isNative: boolean;
    readonly isStable?: boolean;
    readonly userToken?: boolean;
    /**
     * Constructs an instance of the base class `Token`.
     * @param params TokenConstructor
     */
    constructor(params: TokenConstructor);
    /**
     * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.
     * @param other other token to compare
     */
    equals(other: Token): boolean;
    /**
     * Returns true if the address of this token sorts before the address of the other token
     * @param other other token to compare
     * @throws if the tokens have the same address
     * @throws if the tokens are on different chains
     */
    sortsBefore(other: Token): boolean;
    get isSynthetic(): boolean;
    get chain(): Chain | undefined;
    get chainFrom(): Chain | undefined;
}
/**
 * Compares two currencies for equality
 */
export declare function tokenEquals(tokenA: Token, tokenB: Token): boolean;
export declare const WETH: {
    5555: Token;
    55555: Token;
    1: Token;
    4: Token;
    42: Token;
    56: Token;
    97: Token;
    137: Token;
    80001: Token;
    43114: Token;
    43113: Token;
    128: Token;
    256: Token;
    66: Token;
    65: Token;
    288: Token;
    28: Token;
    2001: Token;
    200101: Token;
    1313161554: Token;
    1313161555: Token;
    40: Token;
    41: Token;
};
