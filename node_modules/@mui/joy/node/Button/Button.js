"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ButtonRoot = void 0;

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var React = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _utils = require("@mui/utils");

var _ButtonUnstyled = require("@mui/base/ButtonUnstyled");

var _utils2 = require("@mui/base/utils");

var _composeClasses = _interopRequireDefault(require("@mui/base/composeClasses"));

var _styles = require("../styles");

var _buttonClasses = _interopRequireWildcard(require("./buttonClasses"));

var _jsxRuntime = require("react/jsx-runtime");

const _excluded = ["children", "action", "component", "componentsProps", "color", "variant", "size", "fullWidth", "startIcon", "endIcon"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const useUtilityClasses = ownerState => {
  const {
    color,
    disabled,
    focusVisible,
    focusVisibleClassName,
    fullWidth,
    size,
    variant
  } = ownerState;
  const slots = {
    root: ['root', disabled && 'disabled', focusVisible && 'focusVisible', fullWidth && 'fullWidth', variant && `variant${(0, _utils.unstable_capitalize)(variant)}`, color && `color${(0, _utils.unstable_capitalize)(color)}`, size && `size${(0, _utils.unstable_capitalize)(size)}`],
    startIcon: ['startIcon'],
    endIcon: ['endIcon']
  };
  const composedClasses = (0, _composeClasses.default)(slots, _buttonClasses.getButtonUtilityClass, {});

  if (focusVisible && focusVisibleClassName) {
    composedClasses.root += ` ${focusVisibleClassName}`;
  }

  return composedClasses;
};

const ButtonStartIcon = (0, _styles.styled)('span', {
  name: 'JoyButton',
  slot: 'StartIcon',
  overridesResolver: (props, styles) => styles.startIcon
})({
  '--Icon-margin': '0 0 0 calc(var(--Button-gap) / -2)',
  display: 'inherit',
  marginRight: 'var(--Button-gap)'
});
const ButtonEndIcon = (0, _styles.styled)('span', {
  name: 'JoyButton',
  slot: 'EndIcon',
  overridesResolver: (props, styles) => styles.endIcon
})({
  '--Icon-margin': '0 calc(var(--Button-gap) / -2) 0 0',
  display: 'inherit',
  marginLeft: 'var(--Button-gap)'
});
const ButtonRoot = (0, _styles.styled)('button', {
  name: 'JoyButton',
  slot: 'Root',
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => {
  var _theme$variants, _theme$variants2, _theme$variants3, _theme$variants4;

  return [(0, _extends2.default)({
    '--Icon-margin': 'initial'
  }, ownerState.size === 'sm' && {
    '--Icon-fontSize': '1.25rem',
    '--Button-gap': '0.375rem',
    minHeight: 'var(--Button-minHeight, 2rem)',
    fontSize: theme.vars.fontSize.sm,
    paddingBlock: '2px',
    paddingInline: '0.75rem'
  }, ownerState.size === 'md' && {
    '--Icon-fontSize': '1.5rem',
    // control the SvgIcon font-size
    '--Button-gap': '0.5rem',
    minHeight: 'var(--Button-minHeight, 2.5rem)',
    // use min-height instead of height to make the button resilient to its content
    fontSize: theme.vars.fontSize.sm,
    paddingBlock: '0.25rem',
    // the padding-block act as a minimum spacing between content and root element
    paddingInline: '1rem'
  }, ownerState.size === 'lg' && {
    '--Icon-fontSize': '1.75rem',
    '--Button-gap': '0.75rem',
    minHeight: 'var(--Button-minHeight, 3rem)',
    fontSize: theme.vars.fontSize.md,
    paddingBlock: '0.375rem',
    paddingInline: '1.5rem'
  }, {
    borderRadius: `var(--Button-radius, ${theme.vars.radius.sm})`,
    // to be controlled by other components, eg. Input
    margin: `var(--Button-margin)`,
    // to be controlled by other components, eg. Input
    border: 'none',
    backgroundColor: 'transparent',
    cursor: 'pointer',
    display: 'inline-flex',
    alignItems: 'center',
    justifyContent: 'center',
    position: 'relative',
    textDecoration: 'none',
    // prevent user agent underline when used as anchor
    // TODO: discuss the transition approach in a separate PR. This value is copied from mui-material Button.
    transition: 'background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, border-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms',
    fontFamily: theme.vars.fontFamily.body,
    fontWeight: theme.vars.fontWeight.md,
    lineHeight: 1
  }, ownerState.fullWidth && {
    width: '100%'
  }, {
    [theme.focus.selector]: theme.focus.default
  }), (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color], {
    '&:hover': (_theme$variants2 = theme.variants[`${ownerState.variant}Hover`]) == null ? void 0 : _theme$variants2[ownerState.color]
  }, {
    '&:active': (_theme$variants3 = theme.variants[`${ownerState.variant}Active`]) == null ? void 0 : _theme$variants3[ownerState.color]
  }, {
    [`&.${_buttonClasses.default.disabled}`]: (_theme$variants4 = theme.variants[`${ownerState.variant}Disabled`]) == null ? void 0 : _theme$variants4[ownerState.color]
  }];
});
exports.ButtonRoot = ButtonRoot;
const Button = /*#__PURE__*/React.forwardRef(function Button(inProps, ref) {
  const props = (0, _styles.useThemeProps)({
    props: inProps,
    name: 'JoyButton'
  });
  const {
    children,
    action,
    component = 'button',
    componentsProps = {},
    color = 'primary',
    variant = 'solid',
    size = 'md',
    fullWidth = false,
    startIcon,
    endIcon
  } = props,
        other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
  const buttonRef = React.useRef(null);
  const handleRef = (0, _utils.unstable_useForkRef)(buttonRef, ref);
  const {
    focusVisible,
    setFocusVisible,
    getRootProps
  } = (0, _ButtonUnstyled.useButton)((0, _extends2.default)({}, props, {
    ref: handleRef
  }));
  React.useImperativeHandle(action, () => ({
    focusVisible: () => {
      var _buttonRef$current;

      setFocusVisible(true);
      (_buttonRef$current = buttonRef.current) == null ? void 0 : _buttonRef$current.focus();
    }
  }), [setFocusVisible]);
  const ownerState = (0, _extends2.default)({}, props, {
    component,
    color,
    fullWidth,
    variant,
    size,
    focusVisible
  });
  const classes = useUtilityClasses(ownerState);
  const rootProps = (0, _utils2.useSlotProps)({
    elementType: ButtonRoot,
    externalSlotProps: componentsProps.root,
    ownerState,
    getSlotProps: getRootProps,
    externalForwardedProps: other,
    additionalProps: {
      as: component
    },
    className: classes.root
  });
  const startIconProps = (0, _utils2.useSlotProps)({
    elementType: ButtonStartIcon,
    externalSlotProps: componentsProps.startIcon,
    ownerState,
    className: classes.startIcon
  });
  const endIconProps = (0, _utils2.useSlotProps)({
    elementType: ButtonEndIcon,
    externalSlotProps: componentsProps.endIcon,
    ownerState,
    className: classes.endIcon
  });
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(ButtonRoot, (0, _extends2.default)({}, rootProps, {
    children: [startIcon && /*#__PURE__*/(0, _jsxRuntime.jsx)(ButtonStartIcon, (0, _extends2.default)({}, startIconProps, {
      children: startIcon
    })), children, endIcon && /*#__PURE__*/(0, _jsxRuntime.jsx)(ButtonEndIcon, (0, _extends2.default)({}, endIconProps, {
      children: endIcon
    }))]
  }));
});
process.env.NODE_ENV !== "production" ? Button.propTypes
/* remove-proptypes */
= {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------

  /**
   * A ref for imperative actions. It currently only supports `focusVisible()` action.
   */
  action: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.shape({
    current: _propTypes.default.shape({
      focusVisible: _propTypes.default.func.isRequired
    })
  })]),

  /**
   * @ignore
   */
  children: _propTypes.default.node,

  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'primary'
   */
  color: _propTypes.default
  /* @typescript-to-proptypes-ignore */
  .oneOfType([_propTypes.default.oneOf(['danger', 'info', 'neutral', 'primary', 'success', 'warning']), _propTypes.default.string]),

  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: _propTypes.default.elementType,

  /**
   * The props used for each slot inside the AspectRatio.
   * @default {}
   */
  componentsProps: _propTypes.default.shape({
    endIcon: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
    root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
    startIcon: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
  }),

  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: _propTypes.default.bool,

  /**
   * Element placed after the children.
   */
  endIcon: _propTypes.default.node,

  /**
   * @ignore
   */
  focusVisibleClassName: _propTypes.default.string,

  /**
   * If `true`, the button will take up the full width of its container.
   * @default false
   */
  fullWidth: _propTypes.default.bool,

  /**
   * The size of the component.
   */
  size: _propTypes.default
  /* @typescript-to-proptypes-ignore */
  .oneOfType([_propTypes.default.oneOf(['sm', 'md', 'lg']), _propTypes.default.string]),

  /**
   * Element placed before the children.
   */
  startIcon: _propTypes.default.node,

  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),

  /**
   * @default 0
   */
  tabIndex: _propTypes.default.number,

  /**
   * The variant to use.
   * @default 'solid'
   */
  variant: _propTypes.default
  /* @typescript-to-proptypes-ignore */
  .oneOfType([_propTypes.default.oneOf(['outlined', 'plain', 'soft', 'solid']), _propTypes.default.string])
} : void 0;
var _default = Button;
exports.default = _default;