import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import _extends from "@babel/runtime/helpers/esm/extends";
const _excluded = ["component", "className", "children", "inset", "role"];
import * as React from 'react';
import PropTypes from 'prop-types';
import clsx from 'clsx';
import { unstable_capitalize as capitalize } from '@mui/utils';
import composeClasses from '@mui/base/composeClasses';
import { styled, useThemeProps } from '../styles';
import { getListDividerUtilityClass } from './listDividerClasses';
import RowListContext from '../List/RowListContext';
import { jsx as _jsx } from "react/jsx-runtime";

const useUtilityClasses = ownerState => {
  const slots = {
    root: ['root', ownerState.inset && `inset${capitalize(ownerState.inset)}`]
  };
  return composeClasses(slots, getListDividerUtilityClass, {});
};

const ListDividerRoot = styled('li', {
  name: 'JoyListDivider',
  slot: 'Root',
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => _extends({
  border: 'none',
  // reset the border for `hr` tag
  listStyle: 'none',
  backgroundColor: theme.vars.palette.divider
}, ownerState.row && _extends({
  inlineSize: 'var(--ListDivider-thickness, 1px)',
  marginBlock: ownerState.inset === 'gutter' ? 'var(--List-item-paddingY)' : 0,
  marginInline: 'var(--List-divider-gap)'
}, ownerState['data-first-child'] === undefined && {
  // combine --List-gap and --List-divider-gap to replicate flexbox gap behavior
  marginInlineStart: 'calc(var(--List-gap) + var(--List-divider-gap))'
}), !ownerState.row && _extends({}, ownerState['data-first-child'] === undefined && {
  // combine --List-gap and --List-divider-gap to replicate flexbox gap behavior
  marginBlockStart: 'calc(var(--List-gap) + var(--List-divider-gap))'
}, {
  marginBlockEnd: 'var(--List-divider-gap)',
  marginInline: 'calc(-1 * var(--List-padding))'
}, ownerState.inset === 'gutter' && {
  marginInlineStart: 'var(--List-item-paddingLeft)',
  marginInlineEnd: 'var(--List-item-paddingRight)'
}, ownerState.inset === 'startDecorator' && {
  marginInlineStart: 'var(--List-item-paddingLeft)'
}, ownerState.inset === 'startContent' && {
  marginInlineStart: 'calc(var(--List-item-paddingLeft) + var(--List-decorator-size))'
}, {
  blockSize: 'var(--ListDivider-thickness, 1px)'
})));
const ListDivider = /*#__PURE__*/React.forwardRef(function ListDivider(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: 'JoyListDivider'
  });
  const row = React.useContext(RowListContext);

  const {
    component,
    className,
    children,
    inset,
    role = 'separator'
  } = props,
        other = _objectWithoutPropertiesLoose(props, _excluded);

  const ownerState = _extends({
    inset,
    row
  }, props);

  const classes = useUtilityClasses(ownerState);
  return /*#__PURE__*/_jsx(ListDividerRoot, _extends({
    ref: ref,
    as: component,
    className: clsx(classes.root, className),
    ownerState: ownerState,
    role: role
  }, role === 'separator' && row && {
    // The implicit aria-orientation of separator is 'horizontal'
    // https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/separator_role
    'aria-orientation': 'vertical'
  }, other, {
    children: children
  }));
});
process.env.NODE_ENV !== "production" ? ListDivider.propTypes
/* remove-proptypes */
= {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------

  /**
   * The content of the component.
   */
  children: PropTypes.node,

  /**
   * Override or extend the styles applied to the component.
   */
  classes: PropTypes.object,

  /**
   * @ignore
   */
  className: PropTypes.string,

  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: PropTypes.elementType,

  /**
   * The empty space on the side(s) of the divider in a vertical list.
   *
   * For horizontal list (the nearest parent List has `row` prop set to `true`), only `inset="gutter"` affects the list divider.
   */
  inset: PropTypes
  /* @typescript-to-proptypes-ignore */
  .oneOfType([PropTypes.oneOf(['gutter', 'startDecorator', 'startContent']), PropTypes.string]),

  /**
   * @ignore
   */
  role: PropTypes
  /* @typescript-to-proptypes-ignore */
  .string,

  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
} : void 0;
export default ListDivider;