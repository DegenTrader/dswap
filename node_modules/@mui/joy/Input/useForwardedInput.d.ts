/// <reference types="react" />
export default function useForwardedInput<Output>(props: any, classes: {
    disabled: string;
    error: string;
    focused: string;
    formControl: string;
}): {
    propsToForward: Record<string, any>;
    rootStateClasses: Record<string, any>;
    inputStateClasses: Record<string, any>;
} & {
    disabled: boolean;
    error: boolean;
    focused: boolean;
    formControlContext: {
        disabled?: boolean | undefined;
        required?: boolean | undefined;
        value?: unknown;
        onChange?: import("react").ChangeEventHandler<import("@mui/base/FormControlUnstyled/FormControlUnstyled.types").NativeFormControlElement> | undefined;
        error?: boolean | undefined;
        filled: boolean;
        focused: boolean;
        onBlur: () => void;
        onFocus: () => void;
    } | undefined;
    getInputProps: <TOther extends Record<string, any> = {}>(externalProps?: TOther | undefined) => import("@mui/base/InputUnstyled").UseInputInputSlotProps<TOther>;
    getRootProps: <TOther_1 extends Record<string, any> = {}>(externalProps?: TOther_1 | undefined) => import("@mui/base/InputUnstyled").UseInputRootSlotProps<TOther_1>;
    required: boolean;
    value: unknown;
} & Output;
