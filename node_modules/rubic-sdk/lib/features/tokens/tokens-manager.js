"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TokensManager = void 0;
var price_token_1 = require("../../core/blockchain/tokens/price-token");
var price_token_amount_1 = require("../../core/blockchain/tokens/price-token-amount");
var token_1 = require("../../core/blockchain/tokens/token");
/**
 * Contains methods to create Tokens classes.
 */
var TokensManager = /** @class */ (function () {
    function TokensManager() {
    }
    /**
     * Creates {@link Token} instance by full token data struct.
     * @param tokenStruct Full token's structure.
     */
    TokensManager.prototype.createTokenFromStruct = function (tokenStruct) {
        return new token_1.Token(tokenStruct);
    };
    /**
     * Fetches token data and creates {@link Token} by token's address and blockchain.
     *
     * @example
     * ```ts
     * const token = await sdk.tokens.createToken({
     *     blockchain: BLOCKCHAIN_NAME.ETHEREUM,
     *     address:  '0xdac17f958d2ee523a2206206994597c13d831ec7'
     * });
     *
     * console.log(token.symbol); // USDT
     * console.log(token.name); // Tether USD
     * console.log(token.decimals); // 6
     * ```
     *
     * @param tokenBaseStruct Base token's structure.
     */
    TokensManager.prototype.createToken = function (tokenBaseStruct) {
        return token_1.Token.createToken(tokenBaseStruct);
    };
    /**
     * Same as {@link createTokenFromStruct} for multiple tokens structs.
     * @param tokensStructs Full tokens' structures.
     */
    TokensManager.prototype.createTokensFromStructs = function (tokensStructs) {
        var _this = this;
        return tokensStructs.map(function (tokenStruct) { return _this.createTokenFromStruct(tokenStruct); });
    };
    /**
     * Same as {@link createTokensFromStructs}, but uses multicall for data fetching,
     * so makes only one rpc request.
     * @param addresses Tokens' addresses.
     * @param blockchain Tokens' blockchain.
     */
    TokensManager.prototype.createTokens = function (addresses, blockchain) {
        return token_1.Token.createTokens(addresses, blockchain);
    };
    /**
     * Creates {@link PriceToken} from full price token struct including price.
     * @param priceTokenStruct Full price token structure.
     */
    TokensManager.prototype.createPriceTokenFromStruct = function (priceTokenStruct) {
        return new price_token_1.PriceToken(priceTokenStruct);
    };
    /**
     * Creates {@link PriceToken} from full token structure (without price) or from token address and blockchain.
     *
     * @example
     * ```ts
     * const token = await sdk.tokens.createPriceToken({
     *     blockchain: BLOCKCHAIN_NAME.ETHEREUM,
     *     address:  '0xdac17f958d2ee523a2206206994597c13d831ec7'
     * });
     *
     * console.log(token.price.toFormat(2)); // 1.00
     * ```
     *
     * @param token Full or base token's structure.
     */
    TokensManager.prototype.createPriceToken = function (token) {
        if ('name' in token && 'symbol' in token && 'decimals' in token) {
            return price_token_1.PriceToken.createFromToken(token);
        }
        return price_token_1.PriceToken.createToken(token);
    };
    /**
     * Creates {@link PriceTokenAmount} from full price token struct including price.
     * @param priceTokenAmountStruct Full price token amount structure.
     */
    TokensManager.prototype.createPriceTokenAmountFromStruct = function (priceTokenAmountStruct) {
        return new price_token_amount_1.PriceTokenAmount(priceTokenAmountStruct);
    };
    /**
     * Creates {@link PriceTokenAmount} from full token structure (without price) or
     * from token address and blockchain.
     *
     * @example
     * ```ts
     * const token = await sdk.tokens.createPriceTokenAmount({
     *     blockchain: BLOCKCHAIN_NAME.ETHEREUM,
     *     address: '0xdac17f958d2ee523a2206206994597c13d831ec7',
     *     tokenAmount: new BigNumber(1)
     * });
     *
     * console.log(token.tokenAmount.toNumber()); // 1
     * console.log(token.stringWeiAmount); // 1000000
     * ```
     *
     * @param priceTokenAmountStruct Full or base token's structure with amount.
     */
    TokensManager.prototype.createPriceTokenAmount = function (priceTokenAmountStruct) {
        if ('name' in priceTokenAmountStruct &&
            'symbol' in priceTokenAmountStruct &&
            'decimals' in priceTokenAmountStruct) {
            return price_token_amount_1.PriceTokenAmount.createFromToken(priceTokenAmountStruct);
        }
        return price_token_amount_1.PriceTokenAmount.createToken(priceTokenAmountStruct);
    };
    return TokensManager;
}());
exports.TokensManager = TokensManager;
//# sourceMappingURL=tokens-manager.js.map