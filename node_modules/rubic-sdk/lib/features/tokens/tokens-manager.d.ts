import { TokenBaseStruct } from "../../core/blockchain/models/token-base-struct";
import { PriceToken, PriceTokenStruct } from "../../core/blockchain/tokens/price-token";
import { PriceTokenAmount, PriceTokenAmountBaseStruct, PriceTokenAmountStruct } from "../../core/blockchain/tokens/price-token-amount";
import { Token, TokenStruct } from "../../core/blockchain/tokens/token";
import { BlockchainName } from "../../core/blockchain/models/blockchain-name";
import BigNumber from 'bignumber.js';
/**
 * Contains methods to create Tokens classes.
 */
export declare class TokensManager {
    /**
     * Creates {@link Token} instance by full token data struct.
     * @param tokenStruct Full token's structure.
     */
    createTokenFromStruct(tokenStruct: TokenStruct): Token;
    /**
     * Fetches token data and creates {@link Token} by token's address and blockchain.
     *
     * @example
     * ```ts
     * const token = await sdk.tokens.createToken({
     *     blockchain: BLOCKCHAIN_NAME.ETHEREUM,
     *     address:  '0xdac17f958d2ee523a2206206994597c13d831ec7'
     * });
     *
     * console.log(token.symbol); // USDT
     * console.log(token.name); // Tether USD
     * console.log(token.decimals); // 6
     * ```
     *
     * @param tokenBaseStruct Base token's structure.
     */
    createToken(tokenBaseStruct: TokenBaseStruct): Promise<Token>;
    /**
     * Same as {@link createTokenFromStruct} for multiple tokens structs.
     * @param tokensStructs Full tokens' structures.
     */
    createTokensFromStructs(tokensStructs: TokenStruct[]): Token[];
    /**
     * Same as {@link createTokensFromStructs}, but uses multicall for data fetching,
     * so makes only one rpc request.
     * @param addresses Tokens' addresses.
     * @param blockchain Tokens' blockchain.
     */
    createTokens(addresses: string[], blockchain: BlockchainName): Promise<Token[]>;
    /**
     * Creates {@link PriceToken} from full price token struct including price.
     * @param priceTokenStruct Full price token structure.
     */
    createPriceTokenFromStruct(priceTokenStruct: PriceTokenStruct): PriceToken;
    /**
     * Creates {@link PriceToken} from full token structure (without price) or from token address and blockchain.
     *
     * @example
     * ```ts
     * const token = await sdk.tokens.createPriceToken({
     *     blockchain: BLOCKCHAIN_NAME.ETHEREUM,
     *     address:  '0xdac17f958d2ee523a2206206994597c13d831ec7'
     * });
     *
     * console.log(token.price.toFormat(2)); // 1.00
     * ```
     *
     * @param token Full or base token's structure.
     */
    createPriceToken(token: TokenBaseStruct | TokenStruct): Promise<PriceToken>;
    /**
     * Creates {@link PriceTokenAmount} from full price token struct including price.
     * @param priceTokenAmountStruct Full price token amount structure.
     */
    createPriceTokenAmountFromStruct(priceTokenAmountStruct: PriceTokenAmountStruct): PriceTokenAmount;
    /**
     * Creates {@link PriceTokenAmount} from full token structure (without price) or
     * from token address and blockchain.
     *
     * @example
     * ```ts
     * const token = await sdk.tokens.createPriceTokenAmount({
     *     blockchain: BLOCKCHAIN_NAME.ETHEREUM,
     *     address: '0xdac17f958d2ee523a2206206994597c13d831ec7',
     *     tokenAmount: new BigNumber(1)
     * });
     *
     * console.log(token.tokenAmount.toNumber()); // 1
     * console.log(token.stringWeiAmount); // 1000000
     * ```
     *
     * @param priceTokenAmountStruct Full or base token's structure with amount.
     */
    createPriceTokenAmount(priceTokenAmountStruct: PriceTokenAmountBaseStruct | (TokenStruct & ({
        weiAmount: BigNumber;
    } | {
        tokenAmount: BigNumber;
    }))): Promise<PriceTokenAmount>;
}
