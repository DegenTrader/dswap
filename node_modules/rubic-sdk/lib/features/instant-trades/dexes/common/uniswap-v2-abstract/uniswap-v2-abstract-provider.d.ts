import { PriceToken } from "../../../../../core/blockchain/tokens/price-token";
import { PriceTokenAmount } from "../../../../../core/blockchain/tokens/price-token-amount";
import { SwapCalculationOptions } from "../../../models/swap-calculation-options";
import { UniswapV2ProviderConfiguration } from "./models/uniswap-v2-provider-configuration";
import { UniswapV2TradeClass } from "./models/uniswap-v2-trade-class";
import { InstantTradeProvider } from "../../../instant-trade-provider";
import { UniswapV2AbstractTrade } from "./uniswap-v2-abstract-trade";
import BigNumber from 'bignumber.js';
import { TradeType } from "../../../..";
import { Exact } from "../../../models/exact";
export declare abstract class UniswapV2AbstractProvider<T extends UniswapV2AbstractTrade = UniswapV2AbstractTrade> extends InstantTradeProvider {
    /** @internal */
    abstract readonly InstantTradeClass: UniswapV2TradeClass<T>;
    /** @internal */
    abstract readonly providerSettings: UniswapV2ProviderConfiguration;
    get type(): TradeType;
    protected readonly defaultOptions: Required<SwapCalculationOptions>;
    protected readonly gasMargin = 1.2;
    calculate(from: PriceTokenAmount, to: PriceToken, options?: SwapCalculationOptions): Promise<UniswapV2AbstractTrade>;
    /**
     * Calculates trade, based on amount, user wants to get.
     * @param from Token to sell.
     * @param to Token to get with output amount.
     * @param options Additional options.
     */
    calculateExactOutput(from: PriceToken, to: PriceTokenAmount, options?: SwapCalculationOptions): Promise<UniswapV2AbstractTrade>;
    /**
     * Calculates input amount, based on amount, user wants to get.
     * @param from Token to sell.
     * @param to Token to get with output amount.
     * @param options Additional options.
     */
    calculateExactOutputAmount(from: PriceToken, to: PriceTokenAmount, options?: SwapCalculationOptions): Promise<BigNumber>;
    /**
     * Calculates instant trade.
     * @param from Token to sell.
     * @param to Token to get.
     * @param weiAmount Amount to sell or to get in wei.
     * @param exact Defines, whether to call 'exactInput' or 'exactOutput' method.
     * @param options Additional options.
     */
    calculateDifficultTrade(from: PriceToken, to: PriceToken, weiAmount: BigNumber, exact: Exact, options?: SwapCalculationOptions): Promise<UniswapV2AbstractTrade>;
    private getAmountAndPath;
}
