import { EncodeTransactionOptions, GasFeeInfo, SwapTransactionOptions, TradeType } from "../../../..";
import { InstantTrade } from "../../../instant-trade";
import { Token } from "../../../../../core";
import { TransactionReceipt } from 'web3-eth';
import { Route } from '@lifi/sdk';
import { TransactionConfig } from 'web3-core';
import BigNumber from 'bignumber.js';
import { PriceTokenAmount } from "../../../../../core/blockchain/tokens/price-token-amount";
export declare class LifiTrade extends InstantTrade {
    /** @internal */
    static getGasData(from: PriceTokenAmount, to: PriceTokenAmount, route: Route): Promise<{
        gasLimit: BigNumber;
        gasPrice: BigNumber;
    } | null>;
    private readonly httpClient;
    readonly from: PriceTokenAmount;
    readonly to: PriceTokenAmount;
    readonly gasFeeInfo: GasFeeInfo | null;
    readonly slippageTolerance: number;
    protected readonly contractAddress: string;
    readonly type: TradeType;
    readonly path: ReadonlyArray<Token>;
    private readonly route;
    private readonly _toTokenAmountMin;
    get toTokenAmountMin(): PriceTokenAmount;
    constructor(tradeStruct: {
        from: PriceTokenAmount;
        to: PriceTokenAmount;
        gasFeeInfo: GasFeeInfo | null;
        slippageTolerance: number;
        contractAddress: string;
        type: TradeType;
        path: ReadonlyArray<Token>;
        route: Route;
        toTokenWeiAmountMin: BigNumber;
    });
    swap(options?: SwapTransactionOptions): Promise<TransactionReceipt>;
    encode(options: EncodeTransactionOptions): Promise<TransactionConfig>;
    private getTransactionData;
}
