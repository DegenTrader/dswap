"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LifiProvider = void 0;
var core_1 = require("../../../../../core");
var sdk_1 = __importDefault(require("@lifi/sdk"));
var price_token_amount_1 = require("../../../../../core/blockchain/tokens/price-token-amount");
var options_1 = require("../../../../../common/utils/options");
var lifi_providers_1 = require("./constants/lifi-providers");
var common_1 = require("../../../../../common");
var lifi_trade_1 = require("./lifi-trade");
var bignumber_js_1 = __importDefault(require("bignumber.js"));
var injector_1 = require("../../../../../core/sdk/injector");
var token_1 = require("../../../../../core/blockchain/tokens/token");
var LifiProvider = /** @class */ (function () {
    function LifiProvider() {
        this.lifi = new sdk_1.default();
        this.defaultOptions = {
            gasCalculation: 'calculate',
            slippageTolerance: 0.02
        };
    }
    LifiProvider.prototype.calculate = function (from, toToken, disabledProviders, options) {
        return __awaiter(this, void 0, void 0, function () {
            var fullOptions, fromChainId, toChainId, lifiDisabledProviders, routeOptions, routesRequest, result, routes;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        fullOptions = (0, options_1.combineOptions)(options, this.defaultOptions);
                        fromChainId = core_1.BlockchainsInfo.getBlockchainByName(from.blockchain).id;
                        toChainId = core_1.BlockchainsInfo.getBlockchainByName(toToken.blockchain).id;
                        lifiDisabledProviders = Object.entries(lifi_providers_1.lifiProviders)
                            .filter(function (_a) {
                            var _lifiProviderKey = _a[0], tradeType = _a[1];
                            return disabledProviders.includes(tradeType);
                        })
                            .map(function (_a) {
                            var lifiProviderKey = _a[0];
                            return lifiProviderKey;
                        });
                        routeOptions = {
                            order: 'RECOMMENDED',
                            slippage: fullOptions.slippageTolerance,
                            exchanges: {
                                deny: lifiDisabledProviders
                            }
                        };
                        routesRequest = {
                            fromChainId: fromChainId,
                            fromAmount: from.stringWeiAmount,
                            fromTokenAddress: from.address,
                            toChainId: toChainId,
                            toTokenAddress: toToken.address,
                            options: routeOptions
                        };
                        return [4 /*yield*/, this.lifi.getRoutes(routesRequest)];
                    case 1:
                        result = _a.sent();
                        routes = result.routes;
                        return [4 /*yield*/, Promise.all(routes.map(function (route) { return __awaiter(_this, void 0, void 0, function () {
                                var step, to, contractAddress, type, _a, gasFeeInfo, path;
                                return __generator(this, function (_b) {
                                    switch (_b.label) {
                                        case 0:
                                            step = route.steps[0];
                                            if (!step) {
                                                return [2 /*return*/, null];
                                            }
                                            to = new price_token_amount_1.PriceTokenAmount(__assign(__assign({}, toToken.asStruct), { weiAmount: new bignumber_js_1.default(route.toAmount) }));
                                            contractAddress = step.estimate.approvalAddress;
                                            type = lifi_providers_1.lifiProviders[step.toolDetails.name.toLowerCase()];
                                            if (!type) {
                                                return [2 /*return*/, null];
                                            }
                                            return [4 /*yield*/, Promise.all([
                                                    fullOptions.gasCalculation === 'disabled'
                                                        ? null
                                                        : this.getGasFeeInfo(from, to, route),
                                                    this.getPath(step, from, to)
                                                ])];
                                        case 1:
                                            _a = _b.sent(), gasFeeInfo = _a[0], path = _a[1];
                                            return [2 /*return*/, new lifi_trade_1.LifiTrade({
                                                    from: from,
                                                    to: to,
                                                    gasFeeInfo: gasFeeInfo,
                                                    slippageTolerance: fullOptions.slippageTolerance,
                                                    contractAddress: contractAddress,
                                                    type: type,
                                                    path: path,
                                                    route: route,
                                                    toTokenWeiAmountMin: new bignumber_js_1.default(route.toAmountMin)
                                                })];
                                    }
                                });
                            }); }))];
                    case 2: return [2 /*return*/, (_a.sent()).filter(common_1.notNull)];
                }
            });
        });
    };
    LifiProvider.prototype.getGasFeeInfo = function (from, to, route) {
        return __awaiter(this, void 0, void 0, function () {
            var gasData, gasLimit, gasPrice, nativeCoinPrice, gasPriceInEth, gasPriceInUsd, gasFeeInEth, gasFeeInUsd, _err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 4]);
                        return [4 /*yield*/, lifi_trade_1.LifiTrade.getGasData(from, to, route)];
                    case 1:
                        gasData = _a.sent();
                        if (!gasData) {
                            return [2 /*return*/, null];
                        }
                        gasLimit = gasData.gasLimit, gasPrice = gasData.gasPrice;
                        return [4 /*yield*/, injector_1.Injector.coingeckoApi.getNativeCoinPrice(from.blockchain)];
                    case 2:
                        nativeCoinPrice = _a.sent();
                        gasPriceInEth = core_1.Web3Pure.fromWei(gasPrice);
                        gasPriceInUsd = gasPriceInEth.multipliedBy(nativeCoinPrice);
                        gasFeeInEth = gasPriceInEth.multipliedBy(gasLimit);
                        gasFeeInUsd = gasPriceInUsd.multipliedBy(gasLimit);
                        return [2 /*return*/, {
                                gasLimit: new bignumber_js_1.default(gasLimit),
                                gasPrice: new bignumber_js_1.default(gasPrice),
                                gasFeeInEth: gasFeeInEth,
                                gasFeeInUsd: gasFeeInUsd
                            }];
                    case 3:
                        _err_1 = _a.sent();
                        return [2 /*return*/, null];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    LifiProvider.prototype.getPath = function (step, from, to) {
        return __awaiter(this, void 0, void 0, function () {
            var estimatedPath, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        estimatedPath = step.estimate.data.path;
                        if (!estimatedPath) return [3 /*break*/, 2];
                        return [4 /*yield*/, token_1.Token.createTokens(estimatedPath, from.blockchain)];
                    case 1:
                        _a = _b.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        _a = [from, to];
                        _b.label = 3;
                    case 3: return [2 /*return*/, _a];
                }
            });
        });
    };
    return LifiProvider;
}());
exports.LifiProvider = LifiProvider;
//# sourceMappingURL=lifi-provider.js.map