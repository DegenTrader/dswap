"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LifiTrade = void 0;
var features_1 = require("../../../..");
var instant_trade_1 = require("../../../instant-trade");
var injector_1 = require("../../../../../core/sdk/injector");
var bignumber_js_1 = __importDefault(require("bignumber.js"));
var price_token_amount_1 = require("../../../../../core/blockchain/tokens/price-token-amount");
var swap_request_error_1 = require("../../../../../common/errors/swap/swap-request.error");
var lifi_pair_is_unavailable_1 = require("../../../../../common/errors/swap/lifi-pair-is-unavailable");
var common_1 = require("../../../../../common");
var LifiTrade = /** @class */ (function (_super) {
    __extends(LifiTrade, _super);
    function LifiTrade(tradeStruct) {
        var _this = _super.call(this, tradeStruct.from.blockchain) || this;
        _this.httpClient = injector_1.Injector.httpClient;
        _this.from = tradeStruct.from;
        _this.to = tradeStruct.to;
        _this._toTokenAmountMin = new price_token_amount_1.PriceTokenAmount(__assign(__assign({}, _this.to.asStruct), { weiAmount: tradeStruct.toTokenWeiAmountMin }));
        _this.gasFeeInfo = tradeStruct.gasFeeInfo;
        _this.slippageTolerance = tradeStruct.slippageTolerance;
        _this.contractAddress = tradeStruct.contractAddress;
        _this.type = tradeStruct.type;
        _this.path = tradeStruct.path;
        _this.route = tradeStruct.route;
        return _this;
    }
    /** @internal */
    LifiTrade.getGasData = function (from, to, route) {
        return __awaiter(this, void 0, void 0, function () {
            var transactionData, _err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, new LifiTrade({
                                from: from,
                                to: to,
                                gasFeeInfo: null,
                                slippageTolerance: NaN,
                                contractAddress: '',
                                type: features_1.TRADE_TYPE.ONE_INCH,
                                path: [],
                                route: route,
                                toTokenWeiAmountMin: new bignumber_js_1.default(NaN)
                            }).getTransactionData()];
                    case 1:
                        transactionData = _a.sent();
                        if (!transactionData.gasLimit || !transactionData.gasPrice) {
                            return [2 /*return*/, null];
                        }
                        return [2 /*return*/, {
                                gasLimit: new bignumber_js_1.default(transactionData.gasLimit),
                                gasPrice: new bignumber_js_1.default(transactionData.gasPrice)
                            }];
                    case 2:
                        _err_1 = _a.sent();
                        return [2 /*return*/, null];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    Object.defineProperty(LifiTrade.prototype, "toTokenAmountMin", {
        get: function () {
            return this._toTokenAmountMin;
        },
        enumerable: false,
        configurable: true
    });
    LifiTrade.prototype.swap = function (options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var _a, data, gasLimit, gasPrice, err_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.checkWalletState()];
                    case 1:
                        _b.sent();
                        return [4 /*yield*/, this.checkAllowanceAndApprove(options)];
                    case 2:
                        _b.sent();
                        _b.label = 3;
                    case 3:
                        _b.trys.push([3, 6, , 7]);
                        return [4 /*yield*/, this.getTransactionData()];
                    case 4:
                        _a = _b.sent(), data = _a.data, gasLimit = _a.gasLimit, gasPrice = _a.gasPrice;
                        return [4 /*yield*/, injector_1.Injector.web3Private.trySendTransaction(this.contractAddress, this.from.isNative ? this.from.stringWeiAmount : '0', {
                                data: data,
                                gas: options.gasLimit || gasLimit,
                                gasPrice: options.gasPrice || gasPrice,
                                onTransactionHash: options.onConfirm
                            })];
                    case 5: return [2 /*return*/, _b.sent()];
                    case 6:
                        err_1 = _b.sent();
                        if ([400, 500, 503].includes(err_1.code)) {
                            throw new swap_request_error_1.SwapRequestError();
                        }
                        if (err_1 instanceof common_1.RubicSdkError) {
                            throw err_1;
                        }
                        throw new lifi_pair_is_unavailable_1.LifiPairIsUnavailable();
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    LifiTrade.prototype.encode = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, data, gasLimit, gasPrice, err_2;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.getTransactionData()];
                    case 1:
                        _a = _b.sent(), data = _a.data, gasLimit = _a.gasLimit, gasPrice = _a.gasPrice;
                        return [2 /*return*/, {
                                data: data,
                                gas: options.gasLimit || gasLimit,
                                gasPrice: options.gasPrice || gasPrice
                            }];
                    case 2:
                        err_2 = _b.sent();
                        throw this.parseError(err_2);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    LifiTrade.prototype.getTransactionData = function () {
        return __awaiter(this, void 0, void 0, function () {
            var firstStep, step, swapResponse, transactionRequest, gasLimit, gasPrice;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        firstStep = this.route.steps[0];
                        step = __assign(__assign({}, firstStep), { action: __assign(__assign({}, firstStep.action), { fromAddress: this.walletAddress, toAddress: this.walletAddress }), execution: {
                                status: 'NOT_STARTED',
                                process: [
                                    {
                                        message: 'Preparing swap.',
                                        startedAt: Date.now(),
                                        status: 'STARTED',
                                        type: 'SWAP'
                                    }
                                ]
                            } });
                        return [4 /*yield*/, this.httpClient.post('https://li.quest/v1/advanced/stepTransaction', __assign({}, step))];
                    case 1:
                        swapResponse = _a.sent();
                        transactionRequest = swapResponse.transactionRequest;
                        gasLimit = transactionRequest.gasLimit && parseInt(transactionRequest.gasLimit, 16).toString();
                        gasPrice = transactionRequest.gasPrice && parseInt(transactionRequest.gasPrice, 16).toString();
                        return [2 /*return*/, {
                                data: transactionRequest.data,
                                gasLimit: gasLimit,
                                gasPrice: gasPrice
                            }];
                }
            });
        });
    };
    return LifiTrade;
}(instant_trade_1.InstantTrade));
exports.LifiTrade = LifiTrade;
//# sourceMappingURL=lifi-trade.js.map