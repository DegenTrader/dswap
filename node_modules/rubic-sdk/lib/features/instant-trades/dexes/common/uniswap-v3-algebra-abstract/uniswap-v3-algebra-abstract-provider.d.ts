import { InstantTradeProvider } from "../../../instant-trade-provider";
import { PriceToken } from "../../../../../core";
import { SwapCalculationOptions } from "../../../..";
import BigNumber from 'bignumber.js';
import { UniswapV3AlgebraQuoterController } from "./models/uniswap-v3-algebra-quoter-controller";
import { UniswapV3AlgebraProviderConfiguration } from "./models/uniswap-v3-algebra-provider-configuration";
import { PriceTokenAmount } from "../../../../../core/blockchain/tokens/price-token-amount";
import { UniswapV3AlgebraAbstractTrade, UniswapV3AlgebraTradeStruct } from "./uniswap-v3-algebra-abstract-trade";
import { AlgebraTrade } from "../../polygon/algebra/algebra-trade";
import { UniswapV3TradeClass } from "../uniswap-v3-abstract/models/uniswap-v3-trade-class";
import { UniswapV3AlgebraRoute } from "./models/uniswap-v3-algebra-route";
import { AbiItem } from 'web3-utils';
export declare abstract class UniswapV3AlgebraAbstractProvider<T extends UniswapV3AlgebraAbstractTrade = UniswapV3AlgebraAbstractTrade> extends InstantTradeProvider {
    protected abstract readonly contractAbi: AbiItem[];
    protected abstract readonly contractAddress: string;
    protected abstract readonly InstantTradeClass: UniswapV3TradeClass<T> | typeof AlgebraTrade;
    protected abstract readonly quoterController: UniswapV3AlgebraQuoterController;
    protected abstract readonly providerConfiguration: UniswapV3AlgebraProviderConfiguration;
    protected readonly isRubicOptimisationEnabled: boolean;
    protected readonly gasMargin = 1.2;
    protected readonly defaultOptions: Required<SwapCalculationOptions>;
    protected abstract createTradeInstance(tradeStruct: UniswapV3AlgebraTradeStruct, route: UniswapV3AlgebraRoute): T;
    calculate(from: PriceTokenAmount, toToken: PriceToken, options?: SwapCalculationOptions): Promise<T>;
    /**
     * Calculates trade, based on amount, user wants to get.
     * @param fromToken Token to sell.
     * @param to Token to get with output amount.
     * @param options Additional options.
     */
    calculateExactOutput(fromToken: PriceToken, to: PriceTokenAmount, options?: SwapCalculationOptions): Promise<T>;
    /**
     * Calculates input amount, based on amount, user wants to get.
     * @param fromToken Token to sell.
     * @param to Token to get with output amount.
     * @param options Additional options.
     */
    calculateExactOutputAmount(fromToken: PriceToken, to: PriceTokenAmount, options?: SwapCalculationOptions): Promise<BigNumber>;
    private calculateDifficultTrade;
    private getRoute;
}
