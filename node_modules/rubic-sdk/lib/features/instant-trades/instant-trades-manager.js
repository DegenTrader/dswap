"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InstantTradesManager = void 0;
var rubic_sdk_error_1 = require("../../common/errors/rubic-sdk.error");
var options_1 = require("../../common/utils/options");
var p_timeout_1 = __importDefault(require("../../common/utils/p-timeout"));
var token_1 = require("../../core/blockchain/tokens/token");
var trade_type_1 = require("./models/trade-type");
var features_1 = require("..");
var tokens_1 = require("../../common/utils/tokens");
var uniswap_v2_trade_providers_1 = require("./constants/uniswap-v2-trade-providers");
var uniswap_v3_trade_providers_1 = require("./constants/uniswap-v3-trade-providers");
var one_inch_trade_providers_1 = require("./constants/one-inch-trade-providers");
var zrx_trade_providers_1 = require("./constants/zrx-trade-providers");
var algebra_trade_providers_1 = require("./constants/algebra-trade-providers");
var constants_1 = require("./dexes/common/oneinch-common/constants");
var lifi_provider_1 = require("./dexes/common/lifi/lifi-provider");
var blockchains_1 = require("../../core/blockchain/constants/blockchains");
/**
 * Contains methods to calculate instant trades.
 */
var InstantTradesManager = /** @class */ (function () {
    function InstantTradesManager() {
        /**
         * List of all instant trade providers, combined by blockchains.
         */
        this.tradeProviders = __spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray([], uniswap_v2_trade_providers_1.UniswapV2TradeProviders, true), uniswap_v3_trade_providers_1.UniswapV3TradeProviders, true), one_inch_trade_providers_1.OneInchTradeProviders, true), zrx_trade_providers_1.ZrxTradeProviders, true), algebra_trade_providers_1.AlgebraTradeProviders, true).reduce(function (acc, ProviderClass) {
            var provider = new ProviderClass();
            acc[provider.blockchain][provider.type] = provider;
            return acc;
        }, blockchains_1.blockchains.reduce(function (acc, blockchain) {
            var _a;
            return (__assign(__assign({}, acc), (_a = {}, _a[blockchain.name] = {}, _a)));
        }, {}));
        this.lifiProvider = new lifi_provider_1.LifiProvider();
    }
    InstantTradesManager.getFullOptions = function (options) {
        return (0, options_1.combineOptions)(options, {
            timeout: InstantTradesManager.defaultCalculationTimeout,
            disabledProviders: [],
            gasCalculation: 'calculate',
            disableMultihops: false,
            slippageTolerance: 0.02,
            deadlineMinutes: 20
        });
    };
    /**
     * Calculates instant trades, sorted by output amount.
     *
     * @example
     * ```ts
     * const blockchain = BLOCKCHAIN_NAME.ETHEREUM;
     * // ETH
     * const fromTokenAddress = '0x0000000000000000000000000000000000000000';
     * const fromAmount = 1;
     * // USDT
     * const toTokenAddress = '0xdac17f958d2ee523a2206206994597c13d831ec7';
     *
     * const trades = await sdk.instantTrades.calculateTrade(
     *     { blockchain, address: fromTokenAddress },
     *     fromAmount,
     *     toTokenAddress
     * );
     * const bestTrade = trades[0];
     *
     * Object.entries(trades).forEach(([tradeType, trade]) =>
     *     console.log(tradeType, `to amount: ${trade.to.tokenAmount.toFormat(3)}`)
     * )
     * ```
     *
     * @param fromToken Token to sell.
     * @param fromAmount Amount to sell.
     * @param toToken Token to get.
     * @param options Additional options.
     * @returns List of calculated instant trades.
     */
    InstantTradesManager.prototype.calculateTrade = function (fromToken, fromAmount, toToken, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, from, to;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (toToken instanceof token_1.Token && fromToken.blockchain !== toToken.blockchain) {
                            throw new rubic_sdk_error_1.RubicSdkError('Blockchains of from and to tokens must be same');
                        }
                        return [4 /*yield*/, (0, tokens_1.getPriceTokensFromInputTokens)(fromToken, fromAmount.toString(), toToken)];
                    case 1:
                        _a = _b.sent(), from = _a.from, to = _a.to;
                        return [2 /*return*/, this.calculateTradeFromTokens(from, to, InstantTradesManager.getFullOptions(options))];
                }
            });
        });
    };
    InstantTradesManager.prototype.calculateTradeFromTokens = function (from, to, options) {
        return __awaiter(this, void 0, void 0, function () {
            var timeout, disabledProviders, providersOptions, providers, instantTradesPromise, lifiTradesPromise, _a, instantTrades, lifiTrades, trades;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        timeout = options.timeout, disabledProviders = options.disabledProviders, providersOptions = __rest(options, ["timeout", "disabledProviders"]);
                        providers = Object.entries(this.tradeProviders[from.blockchain]).filter(function (_a) {
                            var type = _a[0];
                            return !disabledProviders.includes(type);
                        });
                        instantTradesPromise = Promise.all(providers.map(function (_a) {
                            var type = _a[0], provider = _a[1];
                            return __awaiter(_this, void 0, void 0, function () {
                                var providerSpecificOptions, e_1;
                                return __generator(this, function (_b) {
                                    switch (_b.label) {
                                        case 0:
                                            _b.trys.push([0, 2, , 3]);
                                            providerSpecificOptions = __assign(__assign({}, providersOptions), { wrappedAddress: type === trade_type_1.TRADE_TYPE.ONE_INCH
                                                    ? constants_1.oneinchApiParams.nativeAddress
                                                    : providersOptions.wrappedAddress });
                                            return [4 /*yield*/, (0, p_timeout_1.default)(provider.calculate(from, to, providerSpecificOptions), timeout)];
                                        case 1: return [2 /*return*/, _b.sent()];
                                        case 2:
                                            e_1 = _b.sent();
                                            console.debug("[RUBIC_SDK] Trade calculation error occurred for ".concat(type, " trade provider."), e_1);
                                            return [2 /*return*/, { type: type, error: e_1 }];
                                        case 3: return [2 /*return*/];
                                    }
                                });
                            });
                        }));
                        lifiTradesPromise = (function () { return __awaiter(_this, void 0, void 0, function () {
                            var e_2;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        _a.trys.push([0, 2, , 3]);
                                        return [4 /*yield*/, this.calculateLifiTrades(from, to, providers.map(function (provider) { return provider[0]; }), options)];
                                    case 1: return [2 /*return*/, _a.sent()];
                                    case 2:
                                        e_2 = _a.sent();
                                        console.debug("[RUBIC_SDK] Trade calculation error occurred for lifi.", e_2);
                                        return [2 /*return*/, null];
                                    case 3: return [2 /*return*/];
                                }
                            });
                        }); })();
                        return [4 /*yield*/, Promise.all([
                                instantTradesPromise,
                                lifiTradesPromise
                            ])];
                    case 1:
                        _a = _b.sent(), instantTrades = _a[0], lifiTrades = _a[1];
                        trades = lifiTrades ? instantTrades.concat(lifiTrades) : instantTrades;
                        return [2 /*return*/, trades.sort(function (tradeA, tradeB) {
                                if (tradeA instanceof features_1.InstantTrade || tradeB instanceof features_1.InstantTrade) {
                                    if (tradeA instanceof features_1.InstantTrade && tradeB instanceof features_1.InstantTrade) {
                                        return tradeA.to.tokenAmount.comparedTo(tradeB.to.tokenAmount);
                                    }
                                    if (tradeA instanceof features_1.InstantTrade) {
                                        return 1;
                                    }
                                    return -1;
                                }
                                return 0;
                            })];
                }
            });
        });
    };
    InstantTradesManager.prototype.calculateLifiTrades = function (from, to, providers, options) {
        return __awaiter(this, void 0, void 0, function () {
            var disabledProviders;
            return __generator(this, function (_a) {
                disabledProviders = providers.concat(options.disabledProviders);
                return [2 /*return*/, this.lifiProvider.calculate(from, to, disabledProviders, {
                        slippageTolerance: options.slippageTolerance,
                        gasCalculation: options.gasCalculation === 'disabled' ? 'disabled' : 'calculate'
                    })];
            });
        });
    };
    InstantTradesManager.defaultCalculationTimeout = 3000;
    return InstantTradesManager;
}());
exports.InstantTradesManager = InstantTradesManager;
//# sourceMappingURL=instant-trades-manager.js.map