import { BlockchainName } from "../../core/blockchain/models/blockchain-name";
import { Token } from "../../core/blockchain/tokens/token";
import { SwapManagerCalculationOptions } from "./models/swap-manager-calculation-options";
import { TypedTradeProviders } from "./models/typed-trade-provider";
import { InstantTrade } from "..";
import { MarkRequired } from 'ts-essentials';
import { InstantTradeError } from "./models/instant-trade-error";
import { LifiProvider } from "./dexes/common/lifi/lifi-provider";
export declare type RequiredSwapManagerCalculationOptions = MarkRequired<SwapManagerCalculationOptions, 'timeout' | 'disabledProviders'>;
/**
 * Contains methods to calculate instant trades.
 */
export declare class InstantTradesManager {
    static readonly defaultCalculationTimeout = 3000;
    private static getFullOptions;
    /**
     * List of all instant trade providers, combined by blockchains.
     */
    readonly tradeProviders: TypedTradeProviders;
    readonly lifiProvider: LifiProvider;
    /**
     * Calculates instant trades, sorted by output amount.
     *
     * @example
     * ```ts
     * const blockchain = BLOCKCHAIN_NAME.ETHEREUM;
     * // ETH
     * const fromTokenAddress = '0x0000000000000000000000000000000000000000';
     * const fromAmount = 1;
     * // USDT
     * const toTokenAddress = '0xdac17f958d2ee523a2206206994597c13d831ec7';
     *
     * const trades = await sdk.instantTrades.calculateTrade(
     *     { blockchain, address: fromTokenAddress },
     *     fromAmount,
     *     toTokenAddress
     * );
     * const bestTrade = trades[0];
     *
     * Object.entries(trades).forEach(([tradeType, trade]) =>
     *     console.log(tradeType, `to amount: ${trade.to.tokenAmount.toFormat(3)}`)
     * )
     * ```
     *
     * @param fromToken Token to sell.
     * @param fromAmount Amount to sell.
     * @param toToken Token to get.
     * @param options Additional options.
     * @returns List of calculated instant trades.
     */
    calculateTrade(fromToken: Token | {
        address: string;
        blockchain: BlockchainName;
    }, fromAmount: string | number, toToken: Token | string, options?: SwapManagerCalculationOptions): Promise<Array<InstantTrade | InstantTradeError>>;
    private calculateTradeFromTokens;
    private calculateLifiTrades;
}
