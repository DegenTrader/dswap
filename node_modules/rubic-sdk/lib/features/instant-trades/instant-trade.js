"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InstantTrade = void 0;
var wallet_not_connected_error_1 = require("../../common/errors/swap/wallet-not-connected.error");
var wrong_network_error_1 = require("../../common/errors/swap/wrong-network.error");
var price_token_amount_1 = require("../../core/blockchain/tokens/price-token-amount");
var injector_1 = require("../../core/sdk/injector");
var blockchain_name_1 = require("../../core/blockchain/models/blockchain-name");
var common_1 = require("../../common");
var errors_1 = require("../../common/utils/errors");
/**
 * Abstract class for all instant trade providers' trades.
 */
var InstantTrade = /** @class */ (function () {
    function InstantTrade(blockchain) {
        this.web3Public = injector_1.Injector.web3PublicService.getWeb3Public(blockchain);
    }
    Object.defineProperty(InstantTrade.prototype, "toTokenAmountMin", {
        /**
         * Minimum amount of output token user can get.
         */
        get: function () {
            var weiAmountOutMin = this.to.weiAmountMinusSlippage(this.slippageTolerance);
            return new price_token_amount_1.PriceTokenAmount(__assign(__assign({}, this.to.asStruct), { weiAmount: weiAmountOutMin }));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(InstantTrade.prototype, "walletAddress", {
        get: function () {
            return injector_1.Injector.web3Private.address;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(InstantTrade.prototype, "priceImpact", {
        /**
         * Price impact, based on tokens' usd prices.
         */
        get: function () {
            return this.from.calculatePriceImpactPercent(this.to);
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Returns true, if allowance is not enough.
     */
    InstantTrade.prototype.needApprove = function (fromAddress) {
        return __awaiter(this, void 0, void 0, function () {
            var allowance;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!fromAddress) {
                            this.checkWalletConnected();
                        }
                        if (this.from.isNative) {
                            return [2 /*return*/, false];
                        }
                        return [4 /*yield*/, this.web3Public.getAllowance(this.from.address, fromAddress || this.walletAddress, this.contractAddress)];
                    case 1:
                        allowance = _a.sent();
                        return [2 /*return*/, allowance.lt(this.from.weiAmount)];
                }
            });
        });
    };
    /**
     * Sends approve transaction with connected wallet.
     * @param options Transaction options.
     * @param checkNeedApprove If true, first allowance is checked.
     */
    InstantTrade.prototype.approve = function (options, checkNeedApprove) {
        if (checkNeedApprove === void 0) { checkNeedApprove = true; }
        return __awaiter(this, void 0, void 0, function () {
            var needApprove, approveAmount;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!checkNeedApprove) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.needApprove()];
                    case 1:
                        needApprove = _a.sent();
                        if (!needApprove) {
                            throw new common_1.UnnecessaryApproveError();
                        }
                        _a.label = 2;
                    case 2:
                        this.checkWalletConnected();
                        this.checkBlockchainCorrect();
                        approveAmount = this.from.blockchain === blockchain_name_1.BLOCKCHAIN_NAME.GNOSIS ||
                            this.from.blockchain === blockchain_name_1.BLOCKCHAIN_NAME.CRONOS
                            ? this.from.weiAmount
                            : 'infinity';
                        return [2 /*return*/, injector_1.Injector.web3Private.approveTokens(this.from.address, this.contractAddress, approveAmount, options)];
                }
            });
        });
    };
    /**
     * Build encoded approve transaction config.
     * @param tokenAddress Address of the smart-contract corresponding to the token.
     * @param spenderAddress Wallet or contract address to approve.
     * @param value Token amount to approve in wei.
     * @param [options] Additional options.
     * @returns Encoded approve transaction config.
     */
    InstantTrade.prototype.encodeApprove = function (tokenAddress, spenderAddress, value, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, injector_1.Injector.web3Private.encodeApprove(tokenAddress, spenderAddress, value, options)];
            });
        });
    };
    InstantTrade.prototype.checkAllowanceAndApprove = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var needApprove, approveOptions;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.needApprove()];
                    case 1:
                        needApprove = _a.sent();
                        if (!needApprove) {
                            return [2 /*return*/];
                        }
                        approveOptions = {
                            onTransactionHash: options === null || options === void 0 ? void 0 : options.onApprove,
                            gas: (options === null || options === void 0 ? void 0 : options.approveGasLimit) || undefined,
                            gasPrice: (options === null || options === void 0 ? void 0 : options.gasPrice) || undefined
                        };
                        return [4 /*yield*/, this.approve(approveOptions, false)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    InstantTrade.prototype.checkWalletState = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.checkWalletConnected();
                        this.checkBlockchainCorrect();
                        return [4 /*yield*/, this.web3Public.checkBalance(this.from, this.from.tokenAmount, this.walletAddress)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    InstantTrade.prototype.checkWalletConnected = function () {
        if (!this.walletAddress) {
            throw new wallet_not_connected_error_1.WalletNotConnectedError();
        }
    };
    InstantTrade.prototype.checkBlockchainCorrect = function () {
        if (injector_1.Injector.web3Private.blockchainName !== this.from.blockchain) {
            throw new wrong_network_error_1.WrongNetworkError();
        }
    };
    InstantTrade.prototype.getGasParams = function (options) {
        var _a, _b, _c, _d;
        return {
            gas: options.gasLimit || ((_b = (_a = this.gasFeeInfo) === null || _a === void 0 ? void 0 : _a.gasLimit) === null || _b === void 0 ? void 0 : _b.toFixed()),
            gasPrice: options.gasPrice || ((_d = (_c = this.gasFeeInfo) === null || _c === void 0 ? void 0 : _c.gasPrice) === null || _d === void 0 ? void 0 : _d.toFixed())
        };
    };
    InstantTrade.prototype.parseError = function (err) {
        return (0, errors_1.parseError)(err, 'Cannot calculate instant trade');
    };
    __decorate([
        common_1.Cache
    ], InstantTrade.prototype, "priceImpact", null);
    return InstantTrade;
}());
exports.InstantTrade = InstantTrade;
//# sourceMappingURL=instant-trade.js.map