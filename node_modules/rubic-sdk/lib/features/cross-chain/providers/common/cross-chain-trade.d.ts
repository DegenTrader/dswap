import { BasicTransactionOptions, BlockchainName, PriceTokenAmount, TransactionOptions, Web3Public } from "../../../../core";
import { GasData } from "../../models/gas-data";
import BigNumber from 'bignumber.js';
import { CrossChainTradeType, EncodeTransactionOptions, SwapTransactionOptions } from "../../..";
import { TransactionReceipt } from 'web3-eth';
import { ContractParams } from "../../models/contract-params";
import { TransactionConfig } from 'web3-core';
import { FeeInfo } from "./models/fee";
import { ItType } from "../../models/it-type";
/**
 * Abstract class for all cross chain providers' trades.
 */
export declare abstract class CrossChainTrade {
    protected readonly providerAddress: string;
    /**
     * Checks receiver address for correctness.
     * @param receiverAddress Receiver address.
     * @param toBlockchain Target blockchain.
     */
    static checkReceiverAddress(receiverAddress: string | undefined, toBlockchain?: BlockchainName): void;
    /**
     * Type of calculated cross chain trade.
     */
    abstract readonly type: CrossChainTradeType;
    /**
     * Token to sell with input amount.
     */
    abstract readonly from: PriceTokenAmount;
    /**
     * Token to get with output amount.
     */
    abstract readonly to: PriceTokenAmount;
    /**
     * Minimum amount of output token user will get.
     */
    abstract readonly toTokenAmountMin: BigNumber;
    /**
     * Gas fee info in source blockchain.
     */
    abstract readonly gasData: GasData;
    protected abstract readonly fromWeb3Public: Web3Public;
    protected abstract get fromContractAddress(): string;
    abstract readonly itType: ItType;
    /**
     * Swap fee information.
     */
    abstract readonly feeInfo: FeeInfo;
    protected get walletAddress(): string;
    protected get networkFee(): BigNumber;
    protected get methodName(): string;
    /**
     * Gets gas fee in source blockchain.
     */
    get estimatedGas(): BigNumber | null;
    protected constructor(providerAddress: string);
    /**
     * Sends swap transaction with connected wallet.
     * If user has not enough allowance, then approve transaction will be called first.
     *
     * @example
     * ```ts
     * const onConfirm = (hash: string) => console.log(hash);
     * const receipt = await trade.swap({ onConfirm });
     * ```
     *
     * @param options Transaction options.
     */
    abstract swap(options?: SwapTransactionOptions): Promise<string | never>;
    abstract getContractParams(options: {
        fromAddress?: string;
        receiverAddress?: string;
    }): Promise<ContractParams>;
    /**
     * Returns true, if allowance is not enough.
     */
    needApprove(): Promise<boolean>;
    /**
     * Sends approve transaction with connected wallet.
     * @param options Transaction options.
     * @param checkNeedApprove If true, first allowance is checked.
     */
    approve(options: BasicTransactionOptions, checkNeedApprove?: boolean): Promise<TransactionReceipt>;
    /**
     * Build encoded approve transaction config.
     * @param tokenAddress Address of the smart-contract corresponding to the token.
     * @param spenderAddress Wallet or contract address to approve.
     * @param value Token amount to approve in wei.
     * @param [options] Additional options.
     * @returns Encoded approve transaction config.
     */
    encodeApprove(tokenAddress: string, spenderAddress: string, value: BigNumber | 'infinity', options?: TransactionOptions): Promise<TransactionConfig>;
    protected checkAllowanceAndApprove(options?: Omit<SwapTransactionOptions, 'onConfirm'>): Promise<void>;
    /**
     * Builds transaction config, with encoded data.
     * @param options Encode transaction options.
     */
    encode(options: EncodeTransactionOptions): Promise<TransactionConfig>;
    protected checkWalletConnected(): never | void;
    protected checkBlockchainCorrect(): never | void;
    protected checkUserBalance(): Promise<void | never>;
    /**
     * @internal
     * Gets ratio between transit usd amount and to token amount.
     */
    abstract getTradeAmountRatio(fromUsd: BigNumber): BigNumber;
}
