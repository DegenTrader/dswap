"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CelerRubicCrossChainTradeProvider = void 0;
var core_1 = require("../../../../../core");
var common_1 = require("../../../../../common");
var rubic_it_cross_chain_contract_trade_1 = require("../../rubic-trade-provider/rubic-cross-chain-contract-trade/rubic-it-cross-chain-contract-trade/rubic-it-cross-chain-contract-trade");
var bignumber_js_1 = __importDefault(require("bignumber.js"));
var price_token_amount_1 = require("../../../../../core/blockchain/tokens/price-token-amount");
var price_token_1 = require("../../../../../core/blockchain/tokens/price-token");
var cross_chain_trade_provider_1 = require("../cross-chain-trade-provider");
var cross_chain_min_amount_error_1 = require("../../../../../common/errors/cross-chain/cross-chain-min-amount.error");
var cross_chain_max_amount_error_1 = require("../../../../../common/errors/cross-chain/cross-chain-max-amount.error");
var CelerRubicCrossChainTradeProvider = /** @class */ (function (_super) {
    __extends(CelerRubicCrossChainTradeProvider, _super);
    function CelerRubicCrossChainTradeProvider() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CelerRubicCrossChainTradeProvider.prototype.getItCalculatedTrade = function (contract, providerIndex, from, toToken, slippageTolerance) {
        return __awaiter(this, void 0, void 0, function () {
            var provider, instantTrade;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        provider = contract.getProvider(providerIndex);
                        return [4 /*yield*/, provider.calculate(from, toToken, {
                                gasCalculation: 'disabled',
                                slippageTolerance: slippageTolerance
                            })];
                    case 1:
                        instantTrade = _a.sent();
                        return [2 /*return*/, {
                                toAmount: instantTrade.to.tokenAmount,
                                providerIndex: providerIndex,
                                instantTrade: instantTrade
                            }];
                }
            });
        });
    };
    CelerRubicCrossChainTradeProvider.prototype.getToTransitTokenAmount = function (toBlockchain, transitToken, transitTokenMinAmount, contract) {
        return __awaiter(this, void 0, void 0, function () {
            var feeInPercents, transitFeeToken, toTransitTokenAmount;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.contracts(toBlockchain).getFeeInPercents(contract)];
                    case 1:
                        feeInPercents = _a.sent();
                        transitFeeToken = new price_token_amount_1.PriceTokenAmount(__assign(__assign({}, transitToken.asStruct), { tokenAmount: transitTokenMinAmount.multipliedBy(feeInPercents).dividedBy(100) }));
                        toTransitTokenAmount = transitTokenMinAmount.minus(transitFeeToken.tokenAmount);
                        return [2 /*return*/, {
                                toTransitTokenAmount: toTransitTokenAmount,
                                transitFeeToken: transitFeeToken,
                                feeInPercents: feeInPercents
                            }];
                }
            });
        });
    };
    CelerRubicCrossChainTradeProvider.prototype.checkMinMaxAmountsErrors = function (fromTrade) {
        return __awaiter(this, void 0, void 0, function () {
            var slippageTolerance, _a, minAmount, maxAmount, minTransitTokenAmount, maxTransitTokenAmount, fromTransitTokenAmount, minAmount_1, maxAmount_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        slippageTolerance = fromTrade instanceof rubic_it_cross_chain_contract_trade_1.RubicItCrossChainContractTrade ? fromTrade.slippage : undefined;
                        return [4 /*yield*/, this.getMinMaxTransitTokenAmounts(fromTrade.blockchain, slippageTolerance, fromTrade.fromToken)];
                    case 1:
                        _a = _b.sent(), minAmount = _a.minAmount, maxAmount = _a.maxAmount;
                        minTransitTokenAmount = (minAmount === null || minAmount === void 0 ? void 0 : minAmount.eq(0)) ? new bignumber_js_1.default(0) : minAmount;
                        maxTransitTokenAmount = (maxAmount === null || maxAmount === void 0 ? void 0 : maxAmount.eq(0))
                            ? new bignumber_js_1.default(Number.MAX_VALUE)
                            : maxAmount;
                        fromTransitTokenAmount = fromTrade.toToken.tokenAmount;
                        if (!fromTransitTokenAmount.lt(minTransitTokenAmount)) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.getTokenAmountForExactTransitTokenAmount(fromTrade, minTransitTokenAmount)];
                    case 2:
                        minAmount_1 = _b.sent();
                        if (!(minAmount_1 === null || minAmount_1 === void 0 ? void 0 : minAmount_1.isFinite())) {
                            throw new common_1.InsufficientLiquidityError();
                        }
                        throw new cross_chain_min_amount_error_1.CrossChainMinAmountError(minAmount_1, fromTrade.fromToken.symbol);
                    case 3:
                        if (!fromTransitTokenAmount.gt(maxTransitTokenAmount)) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.getTokenAmountForExactTransitTokenAmount(fromTrade, maxTransitTokenAmount)];
                    case 4:
                        maxAmount_1 = _b.sent();
                        throw new cross_chain_max_amount_error_1.CrossChainMaxAmountError(maxAmount_1, fromTrade.fromToken.symbol);
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    CelerRubicCrossChainTradeProvider.prototype.getMinMaxTransitTokenAmounts = function (fromBlockchain, slippageTolerance, fromToken) {
        return __awaiter(this, void 0, void 0, function () {
            var fromContract, fromTransitToken, _a, minTransitAmountAbsolute, maxTransitAmountAbsolute, getAmount;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        fromContract = this.contracts(fromBlockchain);
                        return [4 /*yield*/, fromContract.getTransitToken(fromToken)];
                    case 1:
                        fromTransitToken = _b.sent();
                        return [4 /*yield*/, fromContract.getMinMaxTransitTokenAmounts(fromTransitToken.address)];
                    case 2:
                        _a = _b.sent(), minTransitAmountAbsolute = _a[0], maxTransitAmountAbsolute = _a[1];
                        getAmount = function (type) {
                            var fromTransitAmount = core_1.Web3Pure.fromWei(type === 'min' ? minTransitAmountAbsolute : maxTransitAmountAbsolute, fromTransitToken.decimals);
                            if (type === 'min') {
                                if (slippageTolerance) {
                                    return fromTransitAmount.dividedBy(1 - slippageTolerance);
                                }
                            }
                            return fromTransitAmount;
                        };
                        return [2 /*return*/, {
                                minAmount: getAmount('min'),
                                maxAmount: getAmount('max')
                            }];
                }
            });
        });
    };
    CelerRubicCrossChainTradeProvider.prototype.getTokenAmountForExactTransitTokenAmount = function (fromTrade, transitTokenAmount) {
        return __awaiter(this, void 0, void 0, function () {
            var transitToken;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, fromTrade.contract.getTransitToken(fromTrade.fromToken)];
                    case 1:
                        transitToken = _a.sent();
                        if ((0, common_1.compareAddresses)(fromTrade.fromToken.address, transitToken.address) ||
                            transitTokenAmount.eq(0)) {
                            return [2 /*return*/, transitTokenAmount];
                        }
                        return [2 /*return*/, this.getTokenAmountForExactTransitTokenAmountByProvider(fromTrade.fromToken, transitToken, transitTokenAmount, fromTrade.provider)];
                }
            });
        });
    };
    CelerRubicCrossChainTradeProvider.prototype.getTokenAmountForExactTransitTokenAmountByProvider = function (fromToken, transitToken, transitTokenAmount, provider) {
        return provider.calculateExactOutputAmount(new price_token_1.PriceToken(__assign(__assign({}, fromToken), { price: new bignumber_js_1.default(NaN) })), new price_token_amount_1.PriceTokenAmount(__assign(__assign({}, transitToken), { tokenAmount: transitTokenAmount, price: new bignumber_js_1.default(NaN) })), {
            gasCalculation: 'disabled'
        });
    };
    CelerRubicCrossChainTradeProvider.prototype.checkContractsState = function (fromContract, toContract) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, sourceContractPaused, targetContractPaused;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, Promise.all([
                            fromContract.isPaused(),
                            toContract.isPaused()
                        ])];
                    case 1:
                        _a = _b.sent(), sourceContractPaused = _a[0], targetContractPaused = _a[1];
                        if (sourceContractPaused || targetContractPaused) {
                            throw new common_1.CrossChainIsUnavailableError();
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    return CelerRubicCrossChainTradeProvider;
}(cross_chain_trade_provider_1.CrossChainTradeProvider));
exports.CelerRubicCrossChainTradeProvider = CelerRubicCrossChainTradeProvider;
//# sourceMappingURL=celer-rubic-cross-chain-trade-provider.js.map