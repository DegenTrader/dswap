import { PriceTokenAmount, Web3Public } from "../../../../../core";
import { CrossChainContractTrade } from "./cross-chain-contract-trade";
import { CrossChainTrade } from "../cross-chain-trade";
import BigNumber from 'bignumber.js';
/**
 * Contains common for Celer and Rubic trades methods and fields.
 */
export declare abstract class CelerRubicCrossChainTrade extends CrossChainTrade {
    protected readonly providerAddress: string;
    /**
     * Gets price impact in source and target blockchains, based on tokens usd prices.
     */
    get priceImpactData(): {
        priceImpactFrom: number | null;
        priceImpactTo: number | null;
    };
    /**
     * Wrapped instant trade in source blockchain.
     */
    abstract readonly fromTrade: CrossChainContractTrade;
    /**
     * Wrapped instant trade in target blockchain.
     */
    abstract readonly toTrade: CrossChainContractTrade;
    /**
     * Native token in source blockchain, taken as fee.
     */
    abstract readonly cryptoFeeToken: PriceTokenAmount;
    /**
     * Transit token in source blockchain, taken as fee.
     */
    abstract readonly transitFeeToken: PriceTokenAmount;
    abstract readonly feeInPercents: number;
    protected abstract readonly toWeb3Public: Web3Public;
    protected get fromContractAddress(): string;
    protected constructor(providerAddress: string);
    protected abstract checkTradeErrors(): Promise<void | never>;
    protected checkContractsState(): Promise<void>;
    protected checkToBlockchainGasPrice(): Promise<void | never>;
    protected checkToContractBalance(): Promise<void | never>;
    getTradeAmountRatio(fromUsd: BigNumber): BigNumber;
}
