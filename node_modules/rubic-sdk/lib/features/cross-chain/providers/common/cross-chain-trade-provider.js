"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CrossChainTradeProvider = void 0;
var errors_1 = require("../../../../common/utils/errors");
var core_1 = require("../../../../core");
var injector_1 = require("../../../../core/sdk/injector");
var empty_address_1 = require("../../../../core/blockchain/constants/empty-address");
var CrossChainTradeProvider = /** @class */ (function () {
    function CrossChainTradeProvider() {
    }
    CrossChainTradeProvider.parseError = function (err) {
        return (0, errors_1.parseError)(err, 'Cannot calculate cross chain trade');
    };
    /**
     * Gets fee information.
     * @param _fromBlockchain Source network blockchain.
     * @param _providerAddress Integrator address.
     * @param _percentFeeToken Protocol fee token.
     * @protected
     * @internal
     */
    CrossChainTradeProvider.prototype.getFeeInfo = function (_fromBlockchain, _providerAddress, _percentFeeToken) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, {
                        fixedFee: null,
                        platformFee: null,
                        cryptoFee: null
                    }];
            });
        });
    };
    /**
     * Gets fixed fee information.
     * @param fromBlockchain Source network blockchain.
     * @param providerAddress Integrator address.
     * @param contractAddress Contract address.
     * @param contractAbi Contract ABI.
     * @protected
     * @internal
     */
    CrossChainTradeProvider.prototype.getFixedFee = function (fromBlockchain, providerAddress, contractAddress, contractAbi) {
        return __awaiter(this, void 0, void 0, function () {
            var web3PublicService, integratorInfo, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        web3PublicService = injector_1.Injector.web3PublicService.getWeb3Public(fromBlockchain);
                        if (!(providerAddress !== empty_address_1.EMPTY_ADDRESS)) return [3 /*break*/, 2];
                        return [4 /*yield*/, web3PublicService.callContractMethod(contractAddress, contractAbi, 'integratorToFeeInfo', {
                                methodArguments: [providerAddress]
                            })];
                    case 1:
                        integratorInfo = _c.sent();
                        if (integratorInfo[0]) {
                            return [2 /*return*/, core_1.Web3Pure.fromWei(integratorInfo[4])];
                        }
                        _c.label = 2;
                    case 2:
                        _b = (_a = core_1.Web3Pure).fromWei;
                        return [4 /*yield*/, web3PublicService.callContractMethod(contractAddress, contractAbi, 'fixedCryptoFee')];
                    case 3: return [2 /*return*/, _b.apply(_a, [_c.sent()])];
                }
            });
        });
    };
    /**
     * Gets percent fee.
     * @param fromBlockchain Source network blockchain.
     * @param providerAddress Integrator address.
     * @param contractAddress Contract address.
     * @param contractAbi Contract ABI.
     * @protected
     * @internal
     */
    CrossChainTradeProvider.prototype.getFeePercent = function (fromBlockchain, providerAddress, contractAddress, contractAbi) {
        return __awaiter(this, void 0, void 0, function () {
            var web3PublicService, integratorInfo;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        web3PublicService = injector_1.Injector.web3PublicService.getWeb3Public(fromBlockchain);
                        if (!(providerAddress !== empty_address_1.EMPTY_ADDRESS)) return [3 /*break*/, 2];
                        return [4 /*yield*/, web3PublicService.callContractMethod(contractAddress, contractAbi, 'integratorToFeeInfo', {
                                methodArguments: [providerAddress]
                            })];
                    case 1:
                        integratorInfo = _a.sent();
                        if (integratorInfo[0]) {
                            return [2 /*return*/, integratorInfo[1] / 10000];
                        }
                        _a.label = 2;
                    case 2: return [4 /*yield*/, web3PublicService.callContractMethod(contractAddress, contractAbi, 'RubicPlatformFee')];
                    case 3: return [2 /*return*/, ((_a.sent()) / 10000)];
                }
            });
        });
    };
    return CrossChainTradeProvider;
}());
exports.CrossChainTradeProvider = CrossChainTradeProvider;
//# sourceMappingURL=cross-chain-trade-provider.js.map