"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CrossChainTrade = void 0;
var core_1 = require("../../../../core");
var injector_1 = require("../../../../core/sdk/injector");
var bignumber_js_1 = __importDefault(require("bignumber.js"));
var common_1 = require("../../../../common");
var wrong_receiver_address_error_1 = require("../../../../common/errors/blockchain/wrong-receiver-address.error");
var bitcoin_address_validation_1 = require("bitcoin-address-validation");
/**
 * Abstract class for all cross chain providers' trades.
 */
var CrossChainTrade = /** @class */ (function () {
    function CrossChainTrade(providerAddress) {
        this.providerAddress = providerAddress;
    }
    /**
     * Checks receiver address for correctness.
     * @param receiverAddress Receiver address.
     * @param toBlockchain Target blockchain.
     */
    CrossChainTrade.checkReceiverAddress = function (receiverAddress, toBlockchain) {
        if (!receiverAddress) {
            return;
        }
        if (toBlockchain === core_1.BLOCKCHAIN_NAME.BITCOIN) {
            var isAddressValid = (0, bitcoin_address_validation_1.validate)(receiverAddress, bitcoin_address_validation_1.Network.mainnet);
            if (isAddressValid) {
                return;
            }
        }
        if (core_1.Web3Pure.isAddressCorrect(receiverAddress)) {
            return;
        }
        throw new wrong_receiver_address_error_1.WrongReceiverAddressError();
    };
    Object.defineProperty(CrossChainTrade.prototype, "walletAddress", {
        get: function () {
            return injector_1.Injector.web3Private.address;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CrossChainTrade.prototype, "networkFee", {
        get: function () {
            var _a, _b;
            return new bignumber_js_1.default(((_a = this.feeInfo.fixedFee) === null || _a === void 0 ? void 0 : _a.amount) || 0).plus(((_b = this.feeInfo.cryptoFee) === null || _b === void 0 ? void 0 : _b.amount) || 0);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CrossChainTrade.prototype, "methodName", {
        get: function () {
            return this.from.isNative ? 'routerCallNative' : 'routerCall';
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CrossChainTrade.prototype, "estimatedGas", {
        /**
         * Gets gas fee in source blockchain.
         */
        get: function () {
            if (!this.gasData) {
                return null;
            }
            return core_1.Web3Pure.fromWei(this.gasData.gasPrice).multipliedBy(this.gasData.gasLimit);
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Returns true, if allowance is not enough.
     */
    CrossChainTrade.prototype.needApprove = function () {
        return __awaiter(this, void 0, void 0, function () {
            var allowance;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.checkWalletConnected();
                        if (this.from.isNative) {
                            return [2 /*return*/, false];
                        }
                        return [4 /*yield*/, this.fromWeb3Public.getAllowance(this.from.address, this.walletAddress, this.fromContractAddress)];
                    case 1:
                        allowance = _a.sent();
                        return [2 /*return*/, this.from.weiAmount.gt(allowance)];
                }
            });
        });
    };
    /**
     * Sends approve transaction with connected wallet.
     * @param options Transaction options.
     * @param checkNeedApprove If true, first allowance is checked.
     */
    CrossChainTrade.prototype.approve = function (options, checkNeedApprove) {
        if (checkNeedApprove === void 0) { checkNeedApprove = true; }
        return __awaiter(this, void 0, void 0, function () {
            var needApprove, approveAmount;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!checkNeedApprove) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.needApprove()];
                    case 1:
                        needApprove = _a.sent();
                        if (!needApprove) {
                            throw new common_1.UnnecessaryApproveError();
                        }
                        _a.label = 2;
                    case 2:
                        this.checkWalletConnected();
                        this.checkBlockchainCorrect();
                        approveAmount = this.from.blockchain === core_1.BLOCKCHAIN_NAME.GNOSIS ||
                            this.from.blockchain === core_1.BLOCKCHAIN_NAME.CRONOS
                            ? this.from.weiAmount
                            : 'infinity';
                        return [2 /*return*/, injector_1.Injector.web3Private.approveTokens(this.from.address, this.fromContractAddress, approveAmount, options)];
                }
            });
        });
    };
    /**
     * Build encoded approve transaction config.
     * @param tokenAddress Address of the smart-contract corresponding to the token.
     * @param spenderAddress Wallet or contract address to approve.
     * @param value Token amount to approve in wei.
     * @param [options] Additional options.
     * @returns Encoded approve transaction config.
     */
    CrossChainTrade.prototype.encodeApprove = function (tokenAddress, spenderAddress, value, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, injector_1.Injector.web3Private.encodeApprove(tokenAddress, spenderAddress, value, options)];
            });
        });
    };
    CrossChainTrade.prototype.checkAllowanceAndApprove = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var needApprove, approveOptions;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.needApprove()];
                    case 1:
                        needApprove = _a.sent();
                        if (!needApprove) {
                            return [2 /*return*/];
                        }
                        approveOptions = {
                            onTransactionHash: options === null || options === void 0 ? void 0 : options.onApprove,
                            gas: options === null || options === void 0 ? void 0 : options.approveGasLimit,
                            gasPrice: options === null || options === void 0 ? void 0 : options.gasPrice
                        };
                        return [4 /*yield*/, this.approve(approveOptions, false)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Builds transaction config, with encoded data.
     * @param options Encode transaction options.
     */
    CrossChainTrade.prototype.encode = function (options) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            var gasLimit, gasPrice, _c, contractAddress, contractAbi, methodName, methodArguments, value;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        gasLimit = options.gasLimit, gasPrice = options.gasPrice;
                        return [4 /*yield*/, this.getContractParams({ fromAddress: options === null || options === void 0 ? void 0 : options.fromAddress })];
                    case 1:
                        _c = _d.sent(), contractAddress = _c.contractAddress, contractAbi = _c.contractAbi, methodName = _c.methodName, methodArguments = _c.methodArguments, value = _c.value;
                        return [2 /*return*/, core_1.Web3Pure.encodeMethodCall(contractAddress, contractAbi, methodName, methodArguments, value, {
                                gas: gasLimit || ((_a = this.gasData) === null || _a === void 0 ? void 0 : _a.gasLimit.toFixed(0)),
                                gasPrice: gasPrice || ((_b = this.gasData) === null || _b === void 0 ? void 0 : _b.gasPrice.toFixed())
                            })];
                }
            });
        });
    };
    CrossChainTrade.prototype.checkWalletConnected = function () {
        if (!this.walletAddress) {
            throw new common_1.WalletNotConnectedError();
        }
    };
    CrossChainTrade.prototype.checkBlockchainCorrect = function () {
        if (injector_1.Injector.web3Private.blockchainName !== this.from.blockchain) {
            throw new common_1.WrongNetworkError();
        }
    };
    CrossChainTrade.prototype.checkUserBalance = function () {
        return this.fromWeb3Public.checkBalance(this.from, this.from.tokenAmount, this.walletAddress);
    };
    return CrossChainTrade;
}());
exports.CrossChainTrade = CrossChainTrade;
//# sourceMappingURL=cross-chain-trade.js.map