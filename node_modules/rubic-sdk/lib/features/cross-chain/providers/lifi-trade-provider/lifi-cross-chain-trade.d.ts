import BigNumber from 'bignumber.js';
import { PriceTokenAmount, Web3Public } from "../../../../core";
import { SwapTransactionOptions, TradeType } from "../../..";
import { Route } from '@lifi/sdk';
import { GasData } from "../../models/gas-data";
import { CrossChainTrade } from "../common/cross-chain-trade";
import { ContractParams } from "../../models/contract-params";
import { BridgeType } from "../../constants/bridge-type";
import { FeeInfo } from '../common/models/fee';
/**
 * Calculated Celer cross chain trade.
 */
export declare class LifiCrossChainTrade extends CrossChainTrade {
    readonly feeInfo: FeeInfo;
    /** @internal */
    static getGasData(from: PriceTokenAmount, to: PriceTokenAmount, route: Route): Promise<GasData | null>;
    readonly type: "LIFI";
    private readonly httpClient;
    readonly from: PriceTokenAmount;
    readonly to: PriceTokenAmount;
    readonly toTokenAmountMin: BigNumber;
    readonly gasData: GasData | null;
    protected readonly fromWeb3Public: Web3Public;
    private readonly route;
    readonly itType: {
        from: TradeType | undefined;
        to: TradeType | undefined;
    };
    readonly priceImpact: number;
    get fromContractAddress(): string;
    readonly bridgeType: BridgeType | undefined;
    constructor(crossChainTrade: {
        from: PriceTokenAmount;
        to: PriceTokenAmount;
        route: Route;
        gasData: GasData | null;
        toTokenAmountMin: BigNumber;
        feeInfo: FeeInfo;
        priceImpact: number;
        itType: {
            from: TradeType | undefined;
            to: TradeType | undefined;
        };
        bridgeType: BridgeType | undefined;
    }, providerAddress: string);
    protected checkTradeErrors(): Promise<void | never>;
    swap(options?: SwapTransactionOptions): Promise<string | never>;
    getContractParams(options: SwapTransactionOptions): Promise<ContractParams>;
    private getSwapData;
    getTradeAmountRatio(fromUsd: BigNumber): BigNumber;
}
