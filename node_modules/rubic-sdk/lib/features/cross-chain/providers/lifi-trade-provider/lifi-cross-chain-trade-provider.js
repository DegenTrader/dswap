"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LifiCrossChainTradeProvider = void 0;
var features_1 = require("../../..");
var core_1 = require("../../../../core");
var bignumber_js_1 = __importDefault(require("bignumber.js"));
var lifi_cross_chain_supported_blockchain_1 = require("./constants/lifi-cross-chain-supported-blockchain");
var sdk_1 = __importDefault(require("@lifi/sdk"));
var lifi_cross_chain_trade_1 = require("./lifi-cross-chain-trade");
var injector_1 = require("../../../../core/sdk/injector");
var cross_chain_trade_provider_1 = require("../common/cross-chain-trade-provider");
var lifi_contract_data_1 = require("./constants/lifi-contract-data");
var price_token_amount_1 = require("../../../../core/blockchain/tokens/price-token-amount");
var lifi_config_1 = require("./constants/lifi-config");
var common_1 = require("../../../../common");
var cross_chain_min_amount_error_1 = require("../../../../common/errors/cross-chain/cross-chain-min-amount.error");
var native_tokens_1 = require("../../../../core/blockchain/constants/native-tokens");
var lifi_providers_1 = require("../../../instant-trades/dexes/common/lifi/constants/lifi-providers");
var common_cross_chain_abi_1 = require("../common/constants/common-cross-chain-abi");
var bridge_type_1 = require("../../constants/bridge-type");
var LifiCrossChainTradeProvider = /** @class */ (function (_super) {
    __extends(LifiCrossChainTradeProvider, _super);
    function LifiCrossChainTradeProvider() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = features_1.CROSS_CHAIN_TRADE_TYPE.LIFI;
        _this.lifi = new sdk_1.default((0, lifi_config_1.getLifiConfig)());
        _this.MIN_AMOUNT_USD = new bignumber_js_1.default(30);
        return _this;
    }
    LifiCrossChainTradeProvider.isSupportedBlockchain = function (blockchain) {
        return lifi_cross_chain_supported_blockchain_1.lifiCrossChainSupportedBlockchains.some(function (supportedBlockchain) { return supportedBlockchain === blockchain; });
    };
    LifiCrossChainTradeProvider.prototype.isSupportedBlockchains = function (fromBlockchain, toBlockchain) {
        return (LifiCrossChainTradeProvider.isSupportedBlockchain(fromBlockchain) &&
            LifiCrossChainTradeProvider.isSupportedBlockchain(toBlockchain));
    };
    LifiCrossChainTradeProvider.prototype.calculate = function (from, toToken, options) {
        return __awaiter(this, void 0, void 0, function () {
            var fromBlockchain, toBlockchain, feeInfo, feeAmount, tokenAmountIn, routeOptions, fromChainId, toChainId, routesRequest, result, routes, bestRoute, fromAmountUSD, toAmountUSD, priceImpact, to, gasData, _a, _b, itType, bridgeType, trade;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        fromBlockchain = from.blockchain;
                        toBlockchain = toToken.blockchain;
                        if (!LifiCrossChainTradeProvider.isSupportedBlockchain(fromBlockchain) ||
                            !LifiCrossChainTradeProvider.isSupportedBlockchain(toBlockchain)) {
                            return [2 /*return*/, null];
                        }
                        return [4 /*yield*/, this.checkContractState(fromBlockchain)];
                    case 1:
                        _c.sent();
                        return [4 /*yield*/, this.getFeeInfo(fromBlockchain, options.providerAddress, from)];
                    case 2:
                        feeInfo = _c.sent();
                        feeAmount = core_1.Web3Pure.toWei(from.tokenAmount.multipliedBy(feeInfo.platformFee.percent).dividedBy(100), from.decimals, 1);
                        tokenAmountIn = from.weiAmount.minus(feeAmount).toFixed(0);
                        routeOptions = {
                            slippage: options.slippageTolerance,
                            order: 'RECOMMENDED',
                            allowSwitchChain: false
                        };
                        fromChainId = core_1.BlockchainsInfo.getBlockchainByName(fromBlockchain).id;
                        toChainId = core_1.BlockchainsInfo.getBlockchainByName(toBlockchain).id;
                        routesRequest = {
                            fromChainId: fromChainId,
                            fromAmount: tokenAmountIn,
                            fromTokenAddress: from.address,
                            toChainId: toChainId,
                            toTokenAddress: toToken.address,
                            options: routeOptions
                        };
                        return [4 /*yield*/, this.lifi.getRoutes(routesRequest)];
                    case 3:
                        result = _c.sent();
                        routes = result.routes;
                        bestRoute = routes.find(function (route) { return !route.containsSwitchChain; });
                        if (!bestRoute) {
                            return [2 /*return*/, null];
                        }
                        fromAmountUSD = bestRoute.fromAmountUSD, toAmountUSD = bestRoute.toAmountUSD;
                        priceImpact = new bignumber_js_1.default(fromAmountUSD)
                            .minus(toAmountUSD)
                            .dividedBy(fromAmountUSD)
                            .dp(2)
                            .toNumber();
                        from = new price_token_amount_1.PriceTokenAmount(__assign(__assign({}, from.asStructWithAmount), { price: new bignumber_js_1.default(bestRoute.fromAmountUSD).dividedBy(from.tokenAmount) }));
                        to = new price_token_amount_1.PriceTokenAmount(__assign(__assign({}, toToken.asStruct), { weiAmount: new bignumber_js_1.default(bestRoute.toAmount) }));
                        if (!(options.gasCalculation === 'enabled')) return [3 /*break*/, 5];
                        return [4 /*yield*/, lifi_cross_chain_trade_1.LifiCrossChainTrade.getGasData(from, to, bestRoute)];
                    case 4:
                        _a = _c.sent();
                        return [3 /*break*/, 6];
                    case 5:
                        _a = null;
                        _c.label = 6;
                    case 6:
                        gasData = _a;
                        _b = this.parseTradeTypes(bestRoute), itType = _b.itType, bridgeType = _b.bridgeType;
                        trade = new lifi_cross_chain_trade_1.LifiCrossChainTrade({
                            from: from,
                            to: to,
                            route: bestRoute,
                            gasData: gasData,
                            toTokenAmountMin: core_1.Web3Pure.fromWei(bestRoute.toAmountMin, to.decimals),
                            feeInfo: feeInfo,
                            priceImpact: priceImpact,
                            itType: itType,
                            bridgeType: bridgeType
                        }, options.providerAddress);
                        try {
                            this.checkMinError(from);
                        }
                        catch (err) {
                            return [2 /*return*/, {
                                    trade: trade,
                                    error: err
                                }];
                        }
                        return [2 /*return*/, {
                                trade: trade
                            }];
                }
            });
        });
    };
    LifiCrossChainTradeProvider.prototype.checkContractState = function (fromBlockchain) {
        return __awaiter(this, void 0, void 0, function () {
            var web3PublicService, isPaused;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        web3PublicService = injector_1.Injector.web3PublicService.getWeb3Public(fromBlockchain);
                        return [4 /*yield*/, web3PublicService.callContractMethod(lifi_contract_data_1.lifiContractAddress[fromBlockchain].rubicRouter, common_cross_chain_abi_1.commonCrossChainAbi, 'paused')];
                    case 1:
                        isPaused = _a.sent();
                        if (isPaused) {
                            throw new common_1.CrossChainIsUnavailableError();
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    LifiCrossChainTradeProvider.prototype.checkMinError = function (from) {
        if (from.price.multipliedBy(from.tokenAmount).lt(this.MIN_AMOUNT_USD)) {
            throw new cross_chain_min_amount_error_1.CrossChainMinAmountError(this.MIN_AMOUNT_USD, 'USDC');
        }
    };
    LifiCrossChainTradeProvider.prototype.getFeeInfo = function (fromBlockchain, providerAddress, percentFeeToken) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _a = {};
                        _b = {};
                        return [4 /*yield*/, this.getFixedFee(fromBlockchain, providerAddress, lifi_contract_data_1.lifiContractAddress[fromBlockchain].rubicRouter, common_cross_chain_abi_1.commonCrossChainAbi)];
                    case 1:
                        _a.fixedFee = (_b.amount = _d.sent(),
                            _b.tokenSymbol = native_tokens_1.nativeTokensList[fromBlockchain].symbol,
                            _b);
                        _c = {};
                        return [4 /*yield*/, this.getFeePercent(fromBlockchain, providerAddress, lifi_contract_data_1.lifiContractAddress[fromBlockchain].rubicRouter, common_cross_chain_abi_1.commonCrossChainAbi)];
                    case 2: return [2 /*return*/, (_a.platformFee = (_c.percent = _d.sent(),
                            _c.tokenSymbol = percentFeeToken.symbol,
                            _c),
                            _a.cryptoFee = null,
                            _a)];
                }
            });
        });
    };
    LifiCrossChainTradeProvider.prototype.parseTradeTypes = function (route) {
        var _a, _b, _c;
        var steps = route.steps.length === 1 && route.steps[0].includedSteps
            ? route.steps[0].includedSteps
            : route.steps;
        var sourceDex = (steps === null || steps === void 0 ? void 0 : steps[0]) && steps[0].action.fromChainId === steps[0].action.toChainId
            ? steps === null || steps === void 0 ? void 0 : steps[0].toolDetails.name.toLowerCase()
            : undefined;
        var targetDex = (_b = (_a = steps === null || steps === void 0 ? void 0 : steps.slice(1)) === null || _a === void 0 ? void 0 : _a.find(function (provider) { return provider.action.fromChainId === provider.action.toChainId; })) === null || _b === void 0 ? void 0 : _b.toolDetails.name.toLowerCase();
        var subType = (_c = steps === null || steps === void 0 ? void 0 : steps.find(function (provider) { return provider.action.fromChainId !== provider.action.toChainId; })) === null || _c === void 0 ? void 0 : _c.tool.toLowerCase();
        var itType = {
            from: sourceDex ? lifi_providers_1.lifiProviders[sourceDex] : undefined,
            to: targetDex ? lifi_providers_1.lifiProviders[targetDex] : undefined
        };
        var bridgeType = bridge_type_1.bridges.find(function (bridge) { return bridge === subType; });
        return {
            itType: itType,
            bridgeType: bridgeType
        };
    };
    return LifiCrossChainTradeProvider;
}(cross_chain_trade_provider_1.CrossChainTradeProvider));
exports.LifiCrossChainTradeProvider = LifiCrossChainTradeProvider;
//# sourceMappingURL=lifi-cross-chain-trade-provider.js.map