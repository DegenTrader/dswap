import { BlockchainName, PriceToken } from "../../../../core";
import { LifiCrossChainSupportedBlockchain } from "./constants/lifi-cross-chain-supported-blockchain";
import { WrappedCrossChainTrade } from "../common/models/wrapped-cross-chain-trade";
import { CrossChainTradeProvider } from "../common/cross-chain-trade-provider";
import { RequiredCrossChainOptions } from "../../models/cross-chain-options";
import { PriceTokenAmount } from "../../../../core/blockchain/tokens/price-token-amount";
import { FeeInfo } from "../common/models/fee";
export declare class LifiCrossChainTradeProvider extends CrossChainTradeProvider {
    static isSupportedBlockchain(blockchain: BlockchainName): blockchain is LifiCrossChainSupportedBlockchain;
    readonly type: "LIFI";
    private readonly lifi;
    private readonly MIN_AMOUNT_USD;
    isSupportedBlockchains(fromBlockchain: BlockchainName, toBlockchain: BlockchainName): boolean;
    calculate(from: PriceTokenAmount, toToken: PriceToken, options: RequiredCrossChainOptions): Promise<Omit<WrappedCrossChainTrade, 'tradeType'> | null>;
    private checkContractState;
    private checkMinError;
    protected getFeeInfo(fromBlockchain: LifiCrossChainSupportedBlockchain, providerAddress: string, percentFeeToken: PriceTokenAmount): Promise<FeeInfo>;
    private parseTradeTypes;
}
