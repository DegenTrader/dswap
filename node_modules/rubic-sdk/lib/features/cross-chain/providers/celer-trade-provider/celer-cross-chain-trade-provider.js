"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CelerCrossChainTradeProvider = void 0;
var features_1 = require("../../..");
var core_1 = require("../../../../core");
var price_token_1 = require("../../../../core/blockchain/tokens/price-token");
var price_token_amount_1 = require("../../../../core/blockchain/tokens/price-token-amount");
var celer_cross_chain_supported_blockchain_1 = require("./constants/celer-cross-chain-supported-blockchain");
var celer_cross_chain_contracts_1 = require("./constants/celer-cross-chain-contracts");
var celer_cross_chain_trade_1 = require("./celer-cross-chain-trade");
var bignumber_js_1 = __importDefault(require("bignumber.js"));
var common_1 = require("../../../../common");
var injector_1 = require("../../../../core/sdk/injector");
var celer_it_cross_chain_contract_trade_1 = require("./celer-cross-chain-contract-trade/celer-it-cross-chain-contract-trade/celer-it-cross-chain-contract-trade");
var celer_direct_cross_chain_contract_trade_1 = require("./celer-cross-chain-contract-trade/celer-direct-cross-chain-trade/celer-direct-cross-chain-contract-trade");
var wrapped_native_1 = require("./constants/wrapped-native");
var celer_rubic_cross_chain_trade_provider_1 = require("../common/celer-rubic/celer-rubic-cross-chain-trade-provider");
var low_to_slippage_error_1 = require("../../../../common/errors/cross-chain/low-to-slippage.error");
var cross_chain_trade_provider_1 = require("../common/cross-chain-trade-provider");
var celer_cross_chain_contract_abi_1 = require("./constants/celer-cross-chain-contract-abi");
var CelerCrossChainTradeProvider = /** @class */ (function (_super) {
    __extends(CelerCrossChainTradeProvider, _super);
    function CelerCrossChainTradeProvider() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = features_1.CROSS_CHAIN_TRADE_TYPE.CELER;
        _this.contracts = celer_cross_chain_contracts_1.getCelerCrossChainContract;
        return _this;
    }
    CelerCrossChainTradeProvider.isSupportedBlockchain = function (blockchain) {
        return celer_cross_chain_supported_blockchain_1.celerCrossChainSupportedBlockchains.some(function (supportedBlockchain) { return supportedBlockchain === blockchain; });
    };
    CelerCrossChainTradeProvider.prototype.isSupportedBlockchains = function (fromBlockchain, toBlockchain) {
        return (CelerCrossChainTradeProvider.isSupportedBlockchain(fromBlockchain) &&
            CelerCrossChainTradeProvider.isSupportedBlockchain(toBlockchain));
    };
    CelerCrossChainTradeProvider.prototype.calculate = function (from, to, options) {
        return __awaiter(this, void 0, void 0, function () {
            var fromBlockchain, toBlockchain, _a, fromTransitToken, toTransitToken, _b, _c, _d, _e, _f, _g, _h, gasCalculation, providerAddress, slippages, fromTrade, celerSlippage, fromSlippageTolerance, toSlippage, toSlippageTolerance, estimateTransitAmountWithSlippage, _j, toTransitTokenAmount, transitFeeToken, feeInPercents, toTransit, toTrade, cryptoFeeToken, nativeTokenPrice, gasData, _k, trade, _l, err_1;
            var _m;
            return __generator(this, function (_o) {
                switch (_o.label) {
                    case 0:
                        fromBlockchain = from.blockchain;
                        toBlockchain = to.blockchain;
                        if (!CelerCrossChainTradeProvider.isSupportedBlockchain(fromBlockchain) ||
                            !CelerCrossChainTradeProvider.isSupportedBlockchain(toBlockchain)) {
                            return [2 /*return*/, null];
                        }
                        _c = (_b = Promise).all;
                        _d = price_token_1.PriceToken.bind;
                        _e = [{}];
                        return [4 /*yield*/, this.contracts(fromBlockchain).getTransitToken(from)];
                    case 1:
                        _f = [
                            new (_d.apply(price_token_1.PriceToken, [void 0, __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_o.sent())])), { price: new bignumber_js_1.default(1) }])]))()
                        ];
                        _g = price_token_1.PriceToken.bind;
                        _h = [{}];
                        return [4 /*yield*/, this.contracts(toBlockchain).getTransitToken(to)];
                    case 2: return [4 /*yield*/, _c.apply(_b, [_f.concat([
                                new (_g.apply(price_token_1.PriceToken, [void 0, __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_o.sent())])), { price: new bignumber_js_1.default(1) }])]))()
                            ])])];
                    case 3:
                        _a = _o.sent(), fromTransitToken = _a[0], toTransitToken = _a[1];
                        gasCalculation = options.gasCalculation, providerAddress = options.providerAddress, slippages = __rest(options, ["gasCalculation", "providerAddress"]);
                        return [4 /*yield*/, this.checkContractsState(this.contracts(fromBlockchain), this.contracts(toBlockchain))];
                    case 4:
                        _o.sent();
                        return [4 /*yield*/, this.calculateBestTrade(fromBlockchain, from, fromTransitToken, slippages.fromSlippageTolerance, options.isUniV2)];
                    case 5:
                        fromTrade = _o.sent();
                        return [4 /*yield*/, this.fetchCelerSlippage(fromBlockchain, toBlockchain, fromTrade.toTokenAmountMin, fromTransitToken)];
                    case 6:
                        celerSlippage = _o.sent();
                        fromSlippageTolerance = slippages.fromSlippageTolerance, toSlippage = slippages.toSlippageTolerance;
                        toSlippageTolerance = toSlippage - celerSlippage;
                        if (toSlippageTolerance < 0) {
                            throw new low_to_slippage_error_1.LowToSlippageError();
                        }
                        return [4 /*yield*/, this.fetchCelerAmount(fromBlockchain, toBlockchain, fromTrade.toTokenAmountMin, fromTransitToken, toTransitToken, celerSlippage)];
                    case 7:
                        estimateTransitAmountWithSlippage = _o.sent();
                        if (!estimateTransitAmountWithSlippage.lte(0)) return [3 /*break*/, 9];
                        return [4 /*yield*/, this.checkMinMaxAmountsErrors(fromTrade)];
                    case 8:
                        _o.sent();
                        _o.label = 9;
                    case 9: return [4 /*yield*/, this.getToTransitTokenAmount(toBlockchain, fromTrade.fromToken, estimateTransitAmountWithSlippage, fromTrade.contract)];
                    case 10:
                        _j = _o.sent(), toTransitTokenAmount = _j.toTransitTokenAmount, transitFeeToken = _j.transitFeeToken, feeInPercents = _j.feeInPercents;
                        toTransit = new price_token_amount_1.PriceTokenAmount(__assign(__assign({}, toTransitToken.asStruct), { tokenAmount: toTransitTokenAmount }));
                        return [4 /*yield*/, this.calculateBestTrade(toBlockchain, toTransit, to, toSlippageTolerance, options.isUniV2, [features_1.TRADE_TYPE.ONE_INCH])];
                    case 11:
                        toTrade = _o.sent();
                        return [4 /*yield*/, fromTrade.contract.getCryptoFeeToken(toTrade.contract)];
                    case 12:
                        cryptoFeeToken = _o.sent();
                        nativeTokenPrice = new bignumber_js_1.default(0);
                        if (!cryptoFeeToken.tokenAmount.gt(0)) return [3 /*break*/, 14];
                        return [4 /*yield*/, this.getBestItContractTrade(fromBlockchain, new price_token_amount_1.PriceTokenAmount(__assign(__assign({}, cryptoFeeToken.asStructWithAmount), { price: new bignumber_js_1.default(0) })), fromTransitToken, fromSlippageTolerance)];
                    case 13:
                        nativeTokenPrice = (_o.sent()).toToken.tokenAmount;
                        _o.label = 14;
                    case 14:
                        cryptoFeeToken = new price_token_amount_1.PriceTokenAmount(__assign(__assign({}, cryptoFeeToken.asStructWithAmount), { price: nativeTokenPrice.dividedBy(cryptoFeeToken.tokenAmount) }));
                        if (!(gasCalculation === 'enabled')) return [3 /*break*/, 16];
                        return [4 /*yield*/, celer_cross_chain_trade_1.CelerCrossChainTrade.getGasData(fromTrade, toTrade, cryptoFeeToken, Number.parseInt((celerSlippage * Math.pow(10, 6) * 100).toFixed()))];
                    case 15:
                        _k = _o.sent();
                        return [3 /*break*/, 17];
                    case 16:
                        _k = null;
                        _o.label = 17;
                    case 17:
                        gasData = _k;
                        _l = celer_cross_chain_trade_1.CelerCrossChainTrade.bind;
                        _m = {
                            fromTrade: fromTrade,
                            toTrade: toTrade,
                            cryptoFeeToken: cryptoFeeToken,
                            transitFeeToken: transitFeeToken,
                            gasData: gasData,
                            feeInPercents: feeInPercents
                        };
                        return [4 /*yield*/, this.getCelerFeeInfo(feeInPercents, transitFeeToken, cryptoFeeToken, from, providerAddress)];
                    case 18:
                        trade = new (_l.apply(celer_cross_chain_trade_1.CelerCrossChainTrade, [void 0, (_m.feeInfo = _o.sent(),
                                _m), providerAddress,
                            Number.parseInt((celerSlippage * Math.pow(10, 6) * 100).toFixed())]))();
                        _o.label = 19;
                    case 19:
                        _o.trys.push([19, 21, , 22]);
                        return [4 /*yield*/, this.checkMinMaxAmountsErrors(fromTrade)];
                    case 20:
                        _o.sent();
                        return [3 /*break*/, 22];
                    case 21:
                        err_1 = _o.sent();
                        return [2 /*return*/, {
                                trade: trade,
                                error: cross_chain_trade_provider_1.CrossChainTradeProvider.parseError(err_1)
                            }];
                    case 22: return [2 /*return*/, {
                            trade: trade
                        }];
                }
            });
        });
    };
    /**
     * Calculates celer bridge slippage.
     * @param fromBlockchain Source blockchain.
     * @param toBlockchain Target blockchain.
     * @param amount Trade amount.
     * @param transitToken Swap transit token.
     * @returns Celer bridge slippage.
     */
    CelerCrossChainTradeProvider.prototype.fetchCelerSlippage = function (fromBlockchain, toBlockchain, amount, transitToken) {
        return __awaiter(this, void 0, void 0, function () {
            var estimate;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.fetchCelerEstimate(fromBlockchain, toBlockchain, amount, transitToken, 0)];
                    case 1:
                        estimate = _a.sent();
                        return [2 /*return*/, estimate.max_slippage / Math.pow(10, 6) / 100];
                }
            });
        });
    };
    CelerCrossChainTradeProvider.prototype.fetchCelerAmount = function (fromBlockchain, toBlockchain, amount, fromTransitToken, toTransitToken, slippage) {
        return __awaiter(this, void 0, void 0, function () {
            var estimate, finalAmount;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.fetchCelerEstimate(fromBlockchain, toBlockchain, amount, fromTransitToken, slippage)];
                    case 1:
                        estimate = _a.sent();
                        finalAmount = core_1.Web3Pure.fromWei(estimate.estimated_receive_amt, toTransitToken.decimals);
                        return [2 /*return*/, finalAmount.gt(0) ? finalAmount : new bignumber_js_1.default(0)];
                }
            });
        });
    };
    CelerCrossChainTradeProvider.prototype.fetchCelerEstimate = function (fromBlockchain, toBlockchain, amount, transitToken, slippageTolerance) {
        return __awaiter(this, void 0, void 0, function () {
            var sourceChainId, destinationChainId, tokenSymbol, params;
            return __generator(this, function (_a) {
                sourceChainId = core_1.BlockchainsInfo.getBlockchainByName(fromBlockchain).id;
                destinationChainId = core_1.BlockchainsInfo.getBlockchainByName(toBlockchain).id;
                tokenSymbol = transitToken.symbol.toLowerCase().includes('usdc')
                    ? 'USDC'
                    : transitToken.symbol;
                params = {
                    src_chain_id: sourceChainId,
                    dst_chain_id: destinationChainId,
                    token_symbol: tokenSymbol,
                    slippage_tolerance: new bignumber_js_1.default(slippageTolerance)
                        .multipliedBy(Math.pow(10, 6))
                        .multipliedBy(100)
                        .toFixed(0),
                    amt: core_1.Web3Pure.toWei(amount, transitToken === null || transitToken === void 0 ? void 0 : transitToken.decimals)
                };
                return [2 /*return*/, injector_1.Injector.httpClient.get("https://cbridge-prod2.celer.network/v2/estimateAmt", { params: params })];
            });
        });
    };
    CelerCrossChainTradeProvider.prototype.calculateBestTrade = function (blockchain, from, toToken, slippageTolerance, isUniV2, disabledProviders) {
        return __awaiter(this, void 0, void 0, function () {
            var contract;
            return __generator(this, function (_a) {
                if ((0, common_1.compareAddresses)(from.address, toToken.address)) {
                    contract = this.contracts(blockchain);
                    if (!from.price.isFinite()) {
                        from = new price_token_amount_1.PriceTokenAmount(__assign(__assign({}, from.asStructWithAmount), { price: toToken.price }));
                    }
                    return [2 /*return*/, new celer_direct_cross_chain_contract_trade_1.CelerDirectCrossChainContractTrade(blockchain, contract, from)];
                }
                return [2 /*return*/, this.getBestItContractTrade(blockchain, from, toToken, slippageTolerance, isUniV2, disabledProviders)];
            });
        });
    };
    CelerCrossChainTradeProvider.prototype.getItCalculatedTrade = function (contract, providerIndex, from, toToken, slippageTolerance) {
        return __awaiter(this, void 0, void 0, function () {
            var provider, blockchain, instantTrade;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        provider = contract.getProvider(providerIndex);
                        blockchain = from.blockchain;
                        return [4 /*yield*/, provider.calculate(from, toToken, {
                                gasCalculation: 'disabled',
                                slippageTolerance: slippageTolerance,
                                wrappedAddress: wrapped_native_1.wrappedNative[blockchain],
                                fromAddress: contract.address
                            })];
                    case 1:
                        instantTrade = _a.sent();
                        return [2 /*return*/, {
                                toAmount: instantTrade.to.tokenAmount,
                                providerIndex: providerIndex,
                                instantTrade: instantTrade
                            }];
                }
            });
        });
    };
    CelerCrossChainTradeProvider.prototype.getBestItContractTrade = function (blockchain, from, toToken, slippageTolerance, isUniV2, disabledProviders) {
        return __awaiter(this, void 0, void 0, function () {
            var contract, promises, bestTrade;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        contract = this.contracts(blockchain);
                        promises = contract.providersData
                            .filter(function (data) { return !(disabledProviders === null || disabledProviders === void 0 ? void 0 : disabledProviders.some(function (provider) { return provider === data.provider.type; })); })
                            .filter(function (data) { return !isUniV2 || data.provider instanceof features_1.UniswapV2AbstractProvider; })
                            .map(function (_, providerIndex) { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                return [2 /*return*/, this.getItCalculatedTrade(contract, providerIndex, from, toToken, slippageTolerance)];
                            });
                        }); });
                        return [4 /*yield*/, Promise.allSettled(promises).then(function (results) { return __awaiter(_this, void 0, void 0, function () {
                                var sortedResults;
                                return __generator(this, function (_a) {
                                    sortedResults = results
                                        .map(function (result) {
                                        if (result.status === 'fulfilled') {
                                            return result.value;
                                        }
                                        return null;
                                    })
                                        .filter(common_1.notNull)
                                        .sort(function (a, b) { return b.toAmount.comparedTo(a.toAmount); });
                                    if (!sortedResults.length) {
                                        throw results[0].reason;
                                    }
                                    return [2 /*return*/, sortedResults[0]];
                                });
                            }); })];
                    case 1:
                        bestTrade = _a.sent();
                        if (!bestTrade) {
                            throw new common_1.RubicSdkError("[RUBIC SDK] Can't calculate best trade for with current params.");
                        }
                        return [2 /*return*/, new celer_it_cross_chain_contract_trade_1.CelerItCrossChainContractTrade(blockchain, contract, bestTrade.providerIndex, slippageTolerance, bestTrade.instantTrade)];
                }
            });
        });
    };
    CelerCrossChainTradeProvider.prototype.getCelerFeeInfo = function (feeInPercents, transitFeeToken, cryptoFeeToken, from, providerAddress) {
        return __awaiter(this, void 0, void 0, function () {
            var fromBlockchain, contractAddress, fixedFee;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        fromBlockchain = from.blockchain;
                        contractAddress = this.contracts(fromBlockchain).address;
                        _a = {};
                        return [4 /*yield*/, this.getFixedFee(fromBlockchain, providerAddress, contractAddress, celer_cross_chain_contract_abi_1.celerCrossChainContractAbi)];
                    case 1:
                        fixedFee = (_a.amount = _b.sent(),
                            _a.tokenSymbol = cryptoFeeToken.symbol,
                            _a);
                        return [2 /*return*/, {
                                fixedFee: fixedFee,
                                platformFee: { percent: feeInPercents, tokenSymbol: transitFeeToken.symbol },
                                cryptoFee: {
                                    amount: cryptoFeeToken.tokenAmount,
                                    tokenSymbol: cryptoFeeToken.symbol
                                }
                            }];
                }
            });
        });
    };
    return CelerCrossChainTradeProvider;
}(celer_rubic_cross_chain_trade_provider_1.CelerRubicCrossChainTradeProvider));
exports.CelerCrossChainTradeProvider = CelerCrossChainTradeProvider;
//# sourceMappingURL=celer-cross-chain-trade-provider.js.map