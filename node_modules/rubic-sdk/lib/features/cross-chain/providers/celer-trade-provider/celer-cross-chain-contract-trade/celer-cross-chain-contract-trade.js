"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CelerCrossChainContractTrade = void 0;
var celer_swap_methods_1 = require("../constants/celer-swap-methods");
var type_guards_1 = require("../../../../instant-trades/utils/type-guards");
var celer_cross_chain_contract_abi_1 = require("../constants/celer-cross-chain-contract-abi");
var cross_chain_contract_trade_1 = require("../../common/celer-rubic/cross-chain-contract-trade");
var common_1 = require("../../../../../common");
var CelerCrossChainContractTrade = /** @class */ (function (_super) {
    __extends(CelerCrossChainContractTrade, _super);
    function CelerCrossChainContractTrade(blockchain, contract, providerIndex) {
        var _this = _super.call(this, blockchain, providerIndex) || this;
        _this.contract = contract;
        return _this;
    }
    /**
     * Returns method's name and contract abi to call in source network.
     */
    CelerCrossChainContractTrade.prototype.getMethodNameAndContractAbi = function () {
        var methodName = this.getSwapMethod();
        var contractAbiMethod = this.getAbiMethodByProvider(methodName);
        contractAbiMethod.name = methodName;
        return {
            methodName: methodName,
            contractAbi: [contractAbiMethod]
        };
    };
    CelerCrossChainContractTrade.prototype.getAbiMethodByProvider = function (methodName) {
        return __assign({}, celer_cross_chain_contract_abi_1.celerCrossChainContractAbi.find(function (method) { var _a; return (_a = method === null || method === void 0 ? void 0 : method.name) === null || _a === void 0 ? void 0 : _a.startsWith(methodName); }));
    };
    /**
     * Returns swap method name in target network.
     * Must be called on target contract.
     */
    CelerCrossChainContractTrade.prototype.getSwapToUserMethodSignature = function () {
        return '';
    };
    CelerCrossChainContractTrade.prototype.getSwapMethod = function () {
        var nativeIn = this.fromToken.isNative;
        if (this.fromToken.isEqualTo(this.toToken)) {
            return nativeIn ? celer_swap_methods_1.CelerSwapMethod.SWAP_BRIDGE_NATIVE : celer_swap_methods_1.CelerSwapMethod.SWAP_BRIDGE;
        }
        if ((0, type_guards_1.isOneInchLikeProvider)(this.provider)) {
            return nativeIn ? celer_swap_methods_1.CelerSwapMethod.SWAP_INCH_NATIVE : celer_swap_methods_1.CelerSwapMethod.SWAP_INCH;
        }
        if ((0, type_guards_1.isUniswapV2LikeProvider)(this.provider)) {
            return nativeIn ? celer_swap_methods_1.CelerSwapMethod.SWAP_V2_NATIVE : celer_swap_methods_1.CelerSwapMethod.SWAP_V2;
        }
        if ((0, type_guards_1.isUniswapV3LikeProvider)(this.provider) || (0, type_guards_1.isAlgebraProvider)(this.provider)) {
            return nativeIn ? celer_swap_methods_1.CelerSwapMethod.SWAP_V3_NATIVE : celer_swap_methods_1.CelerSwapMethod.SWAP_V3;
        }
        throw new common_1.RubicSdkError('Unknown swap method');
    };
    return CelerCrossChainContractTrade;
}(cross_chain_contract_trade_1.CrossChainContractTrade));
exports.CelerCrossChainContractTrade = CelerCrossChainContractTrade;
//# sourceMappingURL=celer-cross-chain-contract-trade.js.map