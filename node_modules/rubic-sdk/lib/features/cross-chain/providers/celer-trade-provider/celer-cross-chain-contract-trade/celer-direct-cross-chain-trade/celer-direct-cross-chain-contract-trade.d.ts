import { PriceTokenAmount } from "../../../../../../core/blockchain/tokens/price-token-amount";
import BigNumber from 'bignumber.js';
import { CelerCrossChainContractTrade } from "../celer-cross-chain-contract-trade";
import { CelerCrossChainContractData } from "../../celer-cross-chain-contract-data";
import { CelerCrossChainSupportedBlockchain } from "../../constants/celer-cross-chain-supported-blockchain";
export declare class CelerDirectCrossChainContractTrade extends CelerCrossChainContractTrade {
    private readonly token;
    readonly fromToken: PriceTokenAmount;
    readonly toToken: PriceTokenAmount;
    readonly toTokenAmountMin: BigNumber;
    constructor(blockchain: CelerCrossChainSupportedBlockchain, contract: CelerCrossChainContractData, token: PriceTokenAmount);
    protected getFirstPath(): string[];
    getSecondPath(): string[];
    protected modifyArgumentsForProvider(methodArguments: unknown[][]): Promise<void>;
    getCelerSourceTrade(): string;
    getCelerDestinationTrade(integratorAddress: string, receiverAddress: string): unknown[];
    /**
     * Returns method's arguments to use in source network.
     */
    getMethodArguments(toContractTrade: CelerCrossChainContractTrade, walletAddress: string, providerAddress: string, options: {
        maxSlippage: number;
        receiverAddress: string;
    }): Promise<unknown[]>;
}
