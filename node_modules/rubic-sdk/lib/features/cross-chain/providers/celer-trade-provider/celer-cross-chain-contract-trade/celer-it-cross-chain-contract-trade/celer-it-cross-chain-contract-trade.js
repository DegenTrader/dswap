"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CelerItCrossChainContractTrade = void 0;
var core_1 = require("../../../../../../core");
var uniswap_v2_abstract_trade_1 = require("../../../../../instant-trades/dexes/common/uniswap-v2-abstract/uniswap-v2-abstract-trade");
var cross_chain_uniswap_v2_trade_1 = require("../../../rubic-trade-provider/rubic-cross-chain-contract-trade/rubic-it-cross-chain-contract-trade/rubic-cross-chain-instant-trade/cross-chain-uniswap-v2-trade");
var celer_cross_chain_contract_trade_1 = require("../celer-cross-chain-contract-trade");
var uniswap_v3_abstract_trade_1 = require("../../../../../instant-trades/dexes/common/uniswap-v3-abstract/uniswap-v3-abstract-trade");
var cross_chain_oneinch_trade_1 = require("../../../rubic-trade-provider/rubic-cross-chain-contract-trade/rubic-it-cross-chain-contract-trade/rubic-cross-chain-instant-trade/cross-chain-oneinch-trade");
var cross_chain_algebra_trade_1 = require("../../../rubic-trade-provider/rubic-cross-chain-contract-trade/rubic-it-cross-chain-contract-trade/rubic-cross-chain-instant-trade/cross-chain-algebra-trade");
var features_1 = require("../../../../..");
var cross_chain_uniswap_v3_trade_1 = require("../../../rubic-trade-provider/rubic-cross-chain-contract-trade/rubic-it-cross-chain-contract-trade/rubic-cross-chain-instant-trade/cross-chain-uniswap-v3-trade");
var CelerItCrossChainContractTrade = /** @class */ (function (_super) {
    __extends(CelerItCrossChainContractTrade, _super);
    function CelerItCrossChainContractTrade(blockchain, contract, providerIndex, slippage, instantTrade) {
        var _this = _super.call(this, blockchain, contract, providerIndex) || this;
        _this.slippage = slippage;
        _this.instantTrade = instantTrade;
        _this.fromToken = _this.instantTrade.from;
        _this.toToken = _this.instantTrade.to;
        _this.toTokenAmountMin = _this.toToken.tokenAmount.multipliedBy(1 - _this.slippage);
        _this.crossChainInstantTrade = _this.getTrade();
        return _this;
    }
    CelerItCrossChainContractTrade.prototype.getFirstPath = function () {
        return this.crossChainInstantTrade.getFirstPath();
    };
    CelerItCrossChainContractTrade.prototype.getSecondPath = function () {
        return this.crossChainInstantTrade.getSecondPath();
    };
    CelerItCrossChainContractTrade.prototype.modifyArgumentsForProvider = function (methodArguments, walletAddress) {
        return this.crossChainInstantTrade.modifyArgumentsForProvider(methodArguments, walletAddress);
    };
    CelerItCrossChainContractTrade.prototype.getCelerSourceTrade = function () {
        return Object.values(this.crossChainInstantTrade.getCelerSourceObject());
    };
    CelerItCrossChainContractTrade.prototype.getCelerDestinationTrade = function (integratorAddress, receiverAddress) {
        return Object.values(this.crossChainInstantTrade.getCelerDestinationObject(integratorAddress, receiverAddress));
    };
    CelerItCrossChainContractTrade.prototype.getTrade = function () {
        if (this.instantTrade instanceof uniswap_v2_abstract_trade_1.UniswapV2AbstractTrade) {
            return new cross_chain_uniswap_v2_trade_1.CrossChainUniswapV2Trade(this.instantTrade);
        }
        if (this.instantTrade instanceof features_1.OneinchTrade) {
            return new cross_chain_oneinch_trade_1.CrossChainOneinchTrade(this.instantTrade);
        }
        if (this.instantTrade instanceof uniswap_v3_abstract_trade_1.UniswapV3AbstractTrade) {
            return new cross_chain_uniswap_v3_trade_1.CrossChainUniswapV3Trade(this.instantTrade);
        }
        return new cross_chain_algebra_trade_1.CrossChainAlgebraTrade(this.instantTrade);
    };
    /**
     * Returns method's arguments to use in source network.
     */
    CelerItCrossChainContractTrade.prototype.getMethodArguments = function (toContractTrade, walletAddress, providerAddress, options) {
        return __awaiter(this, void 0, void 0, function () {
            var receiver, tokenInAmountAbsolute, targetChainId, source, destination;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        receiver = toContractTrade.contract.address || walletAddress;
                        tokenInAmountAbsolute = this.fromToken.stringWeiAmount;
                        targetChainId = core_1.BlockchainsInfo.getBlockchainByName(toContractTrade.toToken.blockchain).id;
                        return [4 /*yield*/, this.getCelerSourceTrade()];
                    case 1:
                        source = _a.sent();
                        destination = toContractTrade.getCelerDestinationTrade(providerAddress, options.receiverAddress);
                        return [2 /*return*/, [
                                receiver,
                                tokenInAmountAbsolute,
                                targetChainId,
                                source,
                                destination,
                                options.maxSlippage
                            ]];
                }
            });
        });
    };
    return CelerItCrossChainContractTrade;
}(celer_cross_chain_contract_trade_1.CelerCrossChainContractTrade));
exports.CelerItCrossChainContractTrade = CelerItCrossChainContractTrade;
//# sourceMappingURL=celer-it-cross-chain-contract-trade.js.map