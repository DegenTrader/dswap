import { BlockchainName } from "../../../../../core";
import { AbiItem } from 'web3-utils';
import { CelerCrossChainContractData } from "../celer-cross-chain-contract-data";
import { CrossChainContractTrade } from "../../common/celer-rubic/cross-chain-contract-trade";
export declare abstract class CelerCrossChainContractTrade extends CrossChainContractTrade {
    readonly contract: CelerCrossChainContractData;
    protected constructor(blockchain: BlockchainName, contract: CelerCrossChainContractData, providerIndex: number);
    /**
     * Returns method's name and contract abi to call in source network.
     */
    getMethodNameAndContractAbi(): {
        methodName: string;
        contractAbi: AbiItem[];
    };
    private getAbiMethodByProvider;
    /**
     * Returns swap method name in target network.
     * Must be called on target contract.
     */
    getSwapToUserMethodSignature(): string;
    private getSwapMethod;
    abstract getCelerSourceTrade(): unknown[] | unknown;
    abstract getCelerDestinationTrade(integratorAddress: string, receiverAddress: string): unknown[];
}
