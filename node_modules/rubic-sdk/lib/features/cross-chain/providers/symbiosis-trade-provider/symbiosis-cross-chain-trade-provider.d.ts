import { CrossChainTradeProvider } from "../common/cross-chain-trade-provider";
import { BlockchainName, PriceToken } from "../../../../core";
import { RequiredCrossChainOptions } from "../../models/cross-chain-options";
import { SymbiosisCrossChainSupportedBlockchain } from "./constants/symbiosis-cross-chain-supported-blockchain";
import { PriceTokenAmount } from "../../../../core/blockchain/tokens/price-token-amount";
import { WrappedCrossChainTrade } from "../common/models/wrapped-cross-chain-trade";
import { FeeInfo } from "../common/models/fee";
export declare class SymbiosisCrossChainTradeProvider extends CrossChainTradeProvider {
    static isSupportedBlockchain(blockchain: BlockchainName): blockchain is SymbiosisCrossChainSupportedBlockchain;
    readonly type: "SYMBIOSIS";
    private readonly symbiosis;
    private readonly onChainProviders;
    protected get walletAddress(): string;
    isSupportedBlockchains(fromBlockchain: BlockchainName, toBlockchain: BlockchainName): boolean;
    calculate(from: PriceTokenAmount, toToken: PriceToken, options: RequiredCrossChainOptions): Promise<Omit<WrappedCrossChainTrade, 'tradeType'> | null>;
    private checkMinMaxErrors;
    private getFromTokenAmount;
    private checkContractState;
    protected getFeeInfo(fromBlockchain: SymbiosisCrossChainSupportedBlockchain, providerAddress: string, percentFeeToken: PriceTokenAmount): Promise<FeeInfo>;
    private getTrade;
}
