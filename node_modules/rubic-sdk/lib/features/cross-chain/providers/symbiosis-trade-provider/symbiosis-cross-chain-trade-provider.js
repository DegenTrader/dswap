"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SymbiosisCrossChainTradeProvider = void 0;
var cross_chain_trade_provider_1 = require("../common/cross-chain-trade-provider");
var features_1 = require("../../..");
var core_1 = require("../../../../core");
var symbiosis_cross_chain_supported_blockchain_1 = require("./constants/symbiosis-cross-chain-supported-blockchain");
var common_1 = require("../../../../common");
var injector_1 = require("../../../../core/sdk/injector");
var symbiosis_js_sdk_1 = require("symbiosis-js-sdk");
var bignumber_js_1 = __importDefault(require("bignumber.js"));
var symbiosis_cross_chain_trade_1 = require("./symbiosis-cross-chain-trade");
var price_token_amount_1 = require("../../../../core/blockchain/tokens/price-token-amount");
var contract_address_1 = require("./constants/contract-address");
var oneinch_ethereum_provider_1 = require("../../../instant-trades/dexes/ethereum/oneinch-ethereum/oneinch-ethereum-provider");
var oneinch_bsc_provider_1 = require("../../../instant-trades/dexes/bsc/oneinch-bsc/oneinch-bsc-provider");
var oneinch_polygon_provider_1 = require("../../../instant-trades/dexes/polygon/oneinch-polygon/oneinch-polygon-provider");
var oneinch_avalanche_provider_1 = require("../../../instant-trades/dexes/avalanche/oneinch-avalanche/oneinch-avalanche-provider");
var symbiosis_config_1 = require("./constants/symbiosis-config");
var cross_chain_min_amount_error_1 = require("../../../../common/errors/cross-chain/cross-chain-min-amount.error");
var cross_chain_max_amount_error_1 = require("../../../../common/errors/cross-chain/cross-chain-max-amount.error");
var native_tokens_1 = require("../../../../core/blockchain/constants/native-tokens");
var common_cross_chain_abi_1 = require("../common/constants/common-cross-chain-abi");
var oolong_swap_provider_1 = require("../../../instant-trades/dexes/boba/oolong-swap/oolong-swap-provider");
var symbiosis_transit_tokens_1 = require("./constants/symbiosis-transit-tokens");
var constants_1 = require("../../../instant-trades/dexes/common/oneinch-common/constants");
var trisolaris_aurora_provider_1 = require("../../../instant-trades/dexes/telos/zappy/trisolaris-aurora-provider");
var SymbiosisCrossChainTradeProvider = /** @class */ (function (_super) {
    __extends(SymbiosisCrossChainTradeProvider, _super);
    function SymbiosisCrossChainTradeProvider() {
        var _a;
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = features_1.CROSS_CHAIN_TRADE_TYPE.SYMBIOSIS;
        _this.symbiosis = new symbiosis_js_sdk_1.Symbiosis((0, symbiosis_config_1.getSymbiosisConfig)(), 'rubic');
        _this.onChainProviders = (_a = {},
            _a[core_1.BLOCKCHAIN_NAME.ETHEREUM] = new oneinch_ethereum_provider_1.OneinchEthereumProvider(),
            _a[core_1.BLOCKCHAIN_NAME.BINANCE_SMART_CHAIN] = new oneinch_bsc_provider_1.OneinchBscProvider(),
            _a[core_1.BLOCKCHAIN_NAME.POLYGON] = new oneinch_polygon_provider_1.OneinchPolygonProvider(),
            _a[core_1.BLOCKCHAIN_NAME.AVALANCHE] = new oneinch_avalanche_provider_1.OneinchAvalancheProvider(),
            _a[core_1.BLOCKCHAIN_NAME.BOBA] = new oolong_swap_provider_1.OolongSwapProvider(),
            _a[core_1.BLOCKCHAIN_NAME.TELOS] = new trisolaris_aurora_provider_1.ZappyProvider(),
            // [BLOCKCHAIN_NAME.AURORA]: new OneinchAuroraProvider()
            _a[core_1.BLOCKCHAIN_NAME.BITCOIN] = new oneinch_ethereum_provider_1.OneinchEthereumProvider(),
            _a);
        return _this;
    }
    SymbiosisCrossChainTradeProvider.isSupportedBlockchain = function (blockchain) {
        return symbiosis_cross_chain_supported_blockchain_1.symbiosisCrossChainSupportedBlockchains.some(function (supportedBlockchain) { return supportedBlockchain === blockchain; });
    };
    Object.defineProperty(SymbiosisCrossChainTradeProvider.prototype, "walletAddress", {
        get: function () {
            return injector_1.Injector.web3Private.address;
        },
        enumerable: false,
        configurable: true
    });
    SymbiosisCrossChainTradeProvider.prototype.isSupportedBlockchains = function (fromBlockchain, toBlockchain) {
        if (fromBlockchain === core_1.BLOCKCHAIN_NAME.BITCOIN) {
            return false;
        }
        return (SymbiosisCrossChainTradeProvider.isSupportedBlockchain(fromBlockchain) &&
            SymbiosisCrossChainTradeProvider.isSupportedBlockchain(toBlockchain));
    };
    SymbiosisCrossChainTradeProvider.prototype.calculate = function (from, toToken, options) {
        return __awaiter(this, void 0, void 0, function () {
            var fromBlockchain, toBlockchain, isBitcoinSwap, fromAddress_1, tokenIn, feeInfo, feeAmount, tokenInWithFee, tokenAmountIn_1, tokenOut_1, deadline_1, slippageTolerance_1, bitcoinNullAddress, receiverAddress, _a, tokenAmountOut, priceImpact, transitTokenFee, swapFunction, to, gasData, _b, transitToken, transitAmount, _c, err_1, rubicSdkError;
            var _this = this;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        fromBlockchain = from.blockchain;
                        toBlockchain = toToken.blockchain;
                        if (!this.isSupportedBlockchains(fromBlockchain, toBlockchain)) {
                            return [2 /*return*/, null];
                        }
                        isBitcoinSwap = toBlockchain === core_1.BLOCKCHAIN_NAME.BITCOIN;
                        _d.label = 1;
                    case 1:
                        _d.trys.push([1, 11, , 14]);
                        fromAddress_1 = options.fromAddress || this.walletAddress || constants_1.oneinchApiParams.nativeAddress;
                        return [4 /*yield*/, this.checkContractState(fromBlockchain)];
                    case 2:
                        _d.sent();
                        tokenIn = new symbiosis_js_sdk_1.Token({
                            chainId: core_1.BlockchainsInfo.getBlockchainByName(fromBlockchain).id,
                            address: from.isNative ? '' : from.address,
                            decimals: from.decimals,
                            isNative: from.isNative
                        });
                        return [4 /*yield*/, this.getFeeInfo(fromBlockchain, options.providerAddress, from)];
                    case 3:
                        feeInfo = _d.sent();
                        feeAmount = core_1.Web3Pure.toWei(from.tokenAmount.multipliedBy(feeInfo.platformFee.percent).dividedBy(100), from.decimals, 1);
                        tokenInWithFee = from.weiAmount.minus(feeAmount).toFixed(0);
                        tokenAmountIn_1 = new symbiosis_js_sdk_1.TokenAmount(tokenIn, tokenInWithFee);
                        tokenOut_1 = isBitcoinSwap
                            ? null
                            : new symbiosis_js_sdk_1.Token({
                                chainId: core_1.BlockchainsInfo.getBlockchainByName(toBlockchain).id,
                                address: toToken.isNative ? '' : toToken.address,
                                decimals: toToken.decimals,
                                isNative: toToken.isNative
                            });
                        deadline_1 = Math.floor(Date.now() / 1000) + 60 * options.deadline;
                        slippageTolerance_1 = options.slippageTolerance * 10000;
                        bitcoinNullAddress = 'bc1qgkzct5j55x8vtf9vakdu6dzy3t8j8u93l043e9';
                        receiverAddress = isBitcoinSwap ? bitcoinNullAddress : fromAddress_1;
                        return [4 /*yield*/, this.getTrade(fromBlockchain, toBlockchain, {
                                tokenAmountIn: tokenAmountIn_1,
                                tokenOut: tokenOut_1,
                                fromAddress: fromAddress_1,
                                receiverAddress: receiverAddress,
                                refundAddress: fromAddress_1,
                                slippage: slippageTolerance_1,
                                deadline: deadline_1
                            })];
                    case 4:
                        _a = _d.sent(), tokenAmountOut = _a.tokenAmountOut, priceImpact = _a.priceImpact, transitTokenFee = _a.transitTokenFee;
                        swapFunction = function (fromUserAddress, receiver) {
                            if (isBitcoinSwap && !receiver) {
                                throw new common_1.RubicSdkError('No receiver address provider for bitcoin swap.');
                            }
                            var refundAddress = isBitcoinSwap ? fromUserAddress : receiver || fromAddress_1;
                            var receiverAddress = isBitcoinSwap ? receiver : receiver || fromUserAddress;
                            return _this.getTrade(fromBlockchain, toBlockchain, {
                                tokenAmountIn: tokenAmountIn_1,
                                tokenOut: tokenOut_1,
                                fromAddress: fromUserAddress,
                                receiverAddress: receiverAddress,
                                refundAddress: refundAddress,
                                slippage: slippageTolerance_1,
                                deadline: deadline_1
                            });
                        };
                        to = new price_token_amount_1.PriceTokenAmount(__assign(__assign({}, toToken.asStruct), { tokenAmount: new bignumber_js_1.default(tokenAmountOut.toFixed()) }));
                        if (!(options.gasCalculation === 'enabled')) return [3 /*break*/, 6];
                        return [4 /*yield*/, symbiosis_cross_chain_trade_1.SymbiosisCrossChainTrade.getGasData(from, to)];
                    case 5:
                        _b = _d.sent();
                        return [3 /*break*/, 7];
                    case 6:
                        _b = null;
                        _d.label = 7;
                    case 7:
                        gasData = _b;
                        transitToken = symbiosis_transit_tokens_1.symbiosisTransitTokens[fromBlockchain];
                        if (!(0, common_1.compareAddresses)(from.address, transitToken.address)) return [3 /*break*/, 8];
                        _c = from.tokenAmount;
                        return [3 /*break*/, 10];
                    case 8: return [4 /*yield*/, this.onChainProviders[fromBlockchain].calculate(from, new price_token_amount_1.PriceTokenAmount(__assign(__assign({}, transitToken), { price: new bignumber_js_1.default(1), tokenAmount: new bignumber_js_1.default(1) })))];
                    case 9:
                        _c = (_d.sent()).to.tokenAmount;
                        _d.label = 10;
                    case 10:
                        transitAmount = _c;
                        return [2 /*return*/, {
                                trade: new symbiosis_cross_chain_trade_1.SymbiosisCrossChainTrade({
                                    from: from,
                                    to: to,
                                    swapFunction: swapFunction,
                                    gasData: gasData,
                                    priceImpact: parseFloat(priceImpact.toFixed()),
                                    slippage: options.slippageTolerance,
                                    feeInfo: __assign(__assign({}, feeInfo), { cryptoFee: {
                                            amount: new bignumber_js_1.default(transitTokenFee.toFixed()),
                                            tokenSymbol: transitTokenFee.token.symbol || ''
                                        } }),
                                    transitAmount: transitAmount
                                }, options.providerAddress)
                            }];
                    case 11:
                        err_1 = _d.sent();
                        rubicSdkError = cross_chain_trade_provider_1.CrossChainTradeProvider.parseError(err_1);
                        if (!(err_1 instanceof symbiosis_js_sdk_1.Error && err_1.message)) return [3 /*break*/, 13];
                        return [4 /*yield*/, this.checkMinMaxErrors(err_1, from, options.slippageTolerance)];
                    case 12:
                        rubicSdkError = _d.sent();
                        _d.label = 13;
                    case 13: return [2 /*return*/, {
                            trade: null,
                            error: rubicSdkError
                        }];
                    case 14: return [2 /*return*/];
                }
            });
        });
    };
    SymbiosisCrossChainTradeProvider.prototype.checkMinMaxErrors = function (err, from, slippage) {
        return __awaiter(this, void 0, void 0, function () {
            var index, transitTokenAmount, minAmount, minAmountWithSlippage, index, transitTokenAmount, maxAmount;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(err.code === symbiosis_js_sdk_1.ErrorCode.AMOUNT_TOO_LOW || err.code === symbiosis_js_sdk_1.ErrorCode.AMOUNT_LESS_THAN_FEE)) return [3 /*break*/, 2];
                        index = err.message.lastIndexOf('$');
                        transitTokenAmount = new bignumber_js_1.default(err.message.substring(index + 1));
                        return [4 /*yield*/, this.getFromTokenAmount(from, transitTokenAmount, 'min')];
                    case 1:
                        minAmount = _a.sent();
                        minAmountWithSlippage = minAmount.dividedBy(1 - slippage);
                        return [2 /*return*/, new cross_chain_min_amount_error_1.CrossChainMinAmountError(minAmountWithSlippage, from.symbol)];
                    case 2:
                        if (!((err === null || err === void 0 ? void 0 : err.code) === symbiosis_js_sdk_1.ErrorCode.AMOUNT_TOO_HIGH)) return [3 /*break*/, 4];
                        index = err.message.lastIndexOf('$');
                        transitTokenAmount = new bignumber_js_1.default(err.message.substring(index + 1));
                        return [4 /*yield*/, this.getFromTokenAmount(from, transitTokenAmount, 'max')];
                    case 3:
                        maxAmount = _a.sent();
                        return [2 /*return*/, new cross_chain_max_amount_error_1.CrossChainMaxAmountError(maxAmount, from.symbol)];
                    case 4: return [2 /*return*/, new common_1.RubicSdkError(err.message)];
                }
            });
        });
    };
    SymbiosisCrossChainTradeProvider.prototype.getFromTokenAmount = function (from, transitTokenAmount, type) {
        return __awaiter(this, void 0, void 0, function () {
            var blockchain, transitToken, amount, approximatePercentDifference;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        blockchain = from.blockchain;
                        transitToken = symbiosis_transit_tokens_1.symbiosisTransitTokens[blockchain];
                        if ((0, common_1.compareAddresses)(from.address, transitToken.address)) {
                            return [2 /*return*/, transitTokenAmount];
                        }
                        return [4 /*yield*/, this.onChainProviders[blockchain].calculate(new price_token_amount_1.PriceTokenAmount(__assign(__assign({}, transitToken), { price: new bignumber_js_1.default(1), tokenAmount: transitTokenAmount })), from, {
                                gasCalculation: 'disabled'
                            })];
                    case 1:
                        amount = (_a.sent()).to.tokenAmount;
                        approximatePercentDifference = 0.1;
                        if (type === 'min') {
                            return [2 /*return*/, amount.multipliedBy(1 + approximatePercentDifference)];
                        }
                        return [2 /*return*/, amount.multipliedBy(1 - approximatePercentDifference)];
                }
            });
        });
    };
    SymbiosisCrossChainTradeProvider.prototype.checkContractState = function (fromBlockchain) {
        return __awaiter(this, void 0, void 0, function () {
            var web3PublicService, isPaused;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        web3PublicService = injector_1.Injector.web3PublicService.getWeb3Public(fromBlockchain);
                        return [4 /*yield*/, web3PublicService.callContractMethod(contract_address_1.SYMBIOSIS_CONTRACT_ADDRESS[fromBlockchain].rubicRouter, common_cross_chain_abi_1.commonCrossChainAbi, 'paused')];
                    case 1:
                        isPaused = _a.sent();
                        if (isPaused) {
                            throw new common_1.CrossChainIsUnavailableError();
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    SymbiosisCrossChainTradeProvider.prototype.getFeeInfo = function (fromBlockchain, providerAddress, percentFeeToken) {
        return __awaiter(this, void 0, void 0, function () {
            var fixedFeeAmount, feePercent;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getFixedFee(fromBlockchain, providerAddress, contract_address_1.SYMBIOSIS_CONTRACT_ADDRESS[fromBlockchain].rubicRouter, common_cross_chain_abi_1.commonCrossChainAbi)];
                    case 1:
                        fixedFeeAmount = _a.sent();
                        return [4 /*yield*/, this.getFeePercent(fromBlockchain, providerAddress, contract_address_1.SYMBIOSIS_CONTRACT_ADDRESS[fromBlockchain].rubicRouter, common_cross_chain_abi_1.commonCrossChainAbi)];
                    case 2:
                        feePercent = _a.sent();
                        return [2 /*return*/, {
                                fixedFee: {
                                    amount: fixedFeeAmount,
                                    tokenSymbol: native_tokens_1.nativeTokensList[fromBlockchain].symbol
                                },
                                platformFee: {
                                    percent: feePercent,
                                    tokenSymbol: percentFeeToken.symbol
                                },
                                cryptoFee: null
                            }];
                }
            });
        });
    };
    SymbiosisCrossChainTradeProvider.prototype.getTrade = function (fromBlockchain, toBlockchain, swapParams) {
        return __awaiter(this, void 0, void 0, function () {
            var swapResult, swapping, zapping, poolId, err_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(toBlockchain !== core_1.BLOCKCHAIN_NAME.BITCOIN && swapParams.tokenOut)) return [3 /*break*/, 2];
                        swapping = this.symbiosis.newSwapping();
                        return [4 /*yield*/, swapping.exactIn(swapParams.tokenAmountIn, swapParams.tokenOut, swapParams.fromAddress, swapParams.fromAddress, swapParams.fromAddress, swapParams.slippage, swapParams.deadline, true)];
                    case 1:
                        swapResult = _a.sent();
                        return [3 /*break*/, 7];
                    case 2:
                        zapping = this.symbiosis.newZappingRenBTC();
                        poolId = fromBlockchain === core_1.BLOCKCHAIN_NAME.BINANCE_SMART_CHAIN
                            ? core_1.BlockchainsInfo.getBlockchainByName(core_1.BLOCKCHAIN_NAME.POLYGON).id
                            : core_1.BlockchainsInfo.getBlockchainByName(core_1.BLOCKCHAIN_NAME.BINANCE_SMART_CHAIN).id;
                        _a.label = 3;
                    case 3:
                        _a.trys.push([3, 5, , 7]);
                        return [4 /*yield*/, zapping.exactIn(swapParams.tokenAmountIn, poolId, swapParams.fromAddress, swapParams.receiverAddress, swapParams.fromAddress, swapParams.slippage, swapParams.deadline, true)];
                    case 4:
                        swapResult = _a.sent();
                        return [3 /*break*/, 7];
                    case 5:
                        err_2 = _a.sent();
                        if (err_2.code === symbiosis_js_sdk_1.ErrorCode.AMOUNT_TOO_LOW ||
                            err_2.code === symbiosis_js_sdk_1.ErrorCode.AMOUNT_LESS_THAN_FEE) {
                            throw err_2;
                        }
                        return [4 /*yield*/, zapping.exactIn(swapParams.tokenAmountIn, poolId, swapParams.fromAddress, swapParams.receiverAddress, swapParams.fromAddress, swapParams.slippage, swapParams.deadline, true)];
                    case 6:
                        swapResult = _a.sent();
                        return [3 /*break*/, 7];
                    case 7: return [2 /*return*/, {
                            tokenAmountOut: swapResult.tokenAmountOut,
                            priceImpact: swapResult.priceImpact,
                            transitTokenFee: swapResult.fee,
                            transactionRequest: swapResult.transactionRequest
                        }];
                }
            });
        });
    };
    return SymbiosisCrossChainTradeProvider;
}(cross_chain_trade_provider_1.CrossChainTradeProvider));
exports.SymbiosisCrossChainTradeProvider = SymbiosisCrossChainTradeProvider;
//# sourceMappingURL=symbiosis-cross-chain-trade-provider.js.map