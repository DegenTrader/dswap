import { ViaCrossChainSupportedBlockchain } from "./constants/via-cross-chain-supported-blockchain";
import { BlockchainName, PriceToken, PriceTokenAmount } from "../../../../core";
import { WrappedCrossChainTrade } from "../common/models/wrapped-cross-chain-trade";
import { CrossChainTradeProvider } from "../common/cross-chain-trade-provider";
import { RequiredCrossChainOptions } from "../../models/cross-chain-options";
import { FeeInfo } from "../common/models/fee";
export declare class ViaCrossChainTradeProvider extends CrossChainTradeProvider {
    static isSupportedBlockchain(blockchain: BlockchainName): blockchain is ViaCrossChainSupportedBlockchain;
    readonly type: "VIA";
    protected get walletAddress(): string;
    isSupportedBlockchains(fromBlockchain: BlockchainName, toBlockchain: BlockchainName): boolean;
    calculate(from: PriceTokenAmount, toToken: PriceToken, options: RequiredCrossChainOptions): Promise<Omit<WrappedCrossChainTrade, 'tradeType'> | null>;
    private getBestRoute;
    private getTokensPrice;
    private parseItProviders;
    private parseTradeType;
    private parseBridge;
    protected getFeeInfo(fromBlockchain: ViaCrossChainSupportedBlockchain, providerAddress: string, percentFeeToken: PriceTokenAmount): Promise<FeeInfo>;
}
