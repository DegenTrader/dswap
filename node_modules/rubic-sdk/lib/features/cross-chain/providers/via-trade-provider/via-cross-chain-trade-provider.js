"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ViaCrossChainTradeProvider = void 0;
var via_cross_chain_supported_blockchain_1 = require("./constants/via-cross-chain-supported-blockchain");
var router_sdk_1 = require("@viaprotocol/router-sdk");
var via_default_api_key_1 = require("./constants/via-default-api-key");
var via_cross_chain_trade_1 = require("./via-cross-chain-trade");
var core_1 = require("../../../../core");
var injector_1 = require("../../../../core/sdk/injector");
var features_1 = require("../../..");
var cross_chain_trade_provider_1 = require("../common/cross-chain-trade-provider");
var bignumber_js_1 = __importDefault(require("bignumber.js"));
var bridge_type_1 = require("../../constants/bridge-type");
var native_token_address_1 = require("../../../../core/blockchain/constants/native-token-address");
var common_cross_chain_abi_1 = require("../common/constants/common-cross-chain-abi");
var native_tokens_1 = require("../../../../core/blockchain/constants/native-tokens");
var contract_data_1 = require("./constants/contract-data");
var ViaCrossChainTradeProvider = /** @class */ (function (_super) {
    __extends(ViaCrossChainTradeProvider, _super);
    function ViaCrossChainTradeProvider() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = features_1.CROSS_CHAIN_TRADE_TYPE.VIA;
        return _this;
    }
    ViaCrossChainTradeProvider.isSupportedBlockchain = function (blockchain) {
        return via_cross_chain_supported_blockchain_1.viaCrossChainSupportedBlockchains.some(function (supportedBlockchain) { return supportedBlockchain === blockchain; });
    };
    Object.defineProperty(ViaCrossChainTradeProvider.prototype, "walletAddress", {
        get: function () {
            return injector_1.Injector.web3Private.address;
        },
        enumerable: false,
        configurable: true
    });
    ViaCrossChainTradeProvider.prototype.isSupportedBlockchains = function (fromBlockchain, toBlockchain) {
        return (ViaCrossChainTradeProvider.isSupportedBlockchain(fromBlockchain) &&
            ViaCrossChainTradeProvider.isSupportedBlockchain(toBlockchain));
    };
    ViaCrossChainTradeProvider.prototype.calculate = function (from, toToken, options) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var fromBlockchain, toBlockchain, fromChainId, toChainId, via_1, pages, toAddress, params_1, wrappedRoutes, routes, _b, fromTokenPrice, nativeTokenPrice, bestRoute, to, toTokenAmountMin, gasData, _c, additionalFee, cryptoFeeAmount, cryptoFeeSymbol, feeInfo, _d, nativeToken, cryptoFeeToken, itType, bridgeType, err_1;
            var _this = this;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        fromBlockchain = from.blockchain;
                        toBlockchain = toToken.blockchain;
                        if (!ViaCrossChainTradeProvider.isSupportedBlockchain(fromBlockchain) ||
                            !ViaCrossChainTradeProvider.isSupportedBlockchain(toBlockchain)) {
                            return [2 /*return*/, null];
                        }
                        _e.label = 1;
                    case 1:
                        _e.trys.push([1, 10, , 11]);
                        fromChainId = core_1.BlockchainsInfo.getBlockchainByName(fromBlockchain).id;
                        toChainId = core_1.BlockchainsInfo.getBlockchainByName(toBlockchain).id;
                        via_1 = new router_sdk_1.Via(__assign(__assign({}, via_default_api_key_1.VIA_DEFAULT_CONFIG), { timeout: options.timeout }));
                        return [4 /*yield*/, via_1.routesPages()];
                    case 2:
                        pages = _e.sent();
                        toAddress = options.receiverAddress || this.walletAddress;
                        params_1 = __assign(__assign({ fromChainId: fromChainId, fromTokenAddress: from.address, 
                            // `number` max value is less, than from wei amount
                            fromAmount: from.stringWeiAmount, toChainId: toChainId, toTokenAddress: toToken.address, fromAddress: contract_data_1.viaContractAddress[fromBlockchain] }, (toAddress && { toAddress: options.receiverAddress || this.walletAddress })), { multiTx: false, limit: 1 });
                        return [4 /*yield*/, Promise.allSettled(__spreadArray([], Array(pages), true).map(function (_, i) {
                                return via_1.getRoutes(__assign(__assign({}, params_1), { offset: i + 1 }));
                            }))];
                    case 3:
                        wrappedRoutes = _e.sent();
                        routes = wrappedRoutes.filter(function (wrappedRoute) {
                            return wrappedRoute.status === 'fulfilled' && wrappedRoute.value.routes.length;
                        })
                            .map(function (wrappedRoute) { return wrappedRoute.value.routes; })
                            .flat()
                            .filter(function (route) { return _this.parseBridge(route); });
                        if (!routes.length) {
                            return [2 /*return*/, null];
                        }
                        return [4 /*yield*/, this.getTokensPrice(fromBlockchain, [
                                {
                                    address: from.address,
                                    price: from.price
                                },
                                { address: native_token_address_1.NATIVE_TOKEN_ADDRESS }
                            ])];
                    case 4:
                        _b = _e.sent(), fromTokenPrice = _b[0], nativeTokenPrice = _b[1];
                        return [4 /*yield*/, this.getBestRoute(toToken, nativeTokenPrice, routes)];
                    case 5:
                        bestRoute = _e.sent();
                        from = new core_1.PriceTokenAmount(__assign(__assign({}, from.asStructWithAmount), { price: fromTokenPrice }));
                        to = new core_1.PriceTokenAmount(__assign(__assign({}, toToken.asStruct), { weiAmount: new bignumber_js_1.default(bestRoute.toTokenAmount) }));
                        toTokenAmountMin = core_1.Web3Pure.fromWei(to.weiAmountMinusSlippage((bestRoute.slippage || 0) / 100), to.decimals);
                        if (!(options.gasCalculation === 'enabled')) return [3 /*break*/, 7];
                        return [4 /*yield*/, via_cross_chain_trade_1.ViaCrossChainTrade.getGasData(from, to, bestRoute)];
                    case 6:
                        _c = _e.sent();
                        return [3 /*break*/, 8];
                    case 7:
                        _c = null;
                        _e.label = 8;
                    case 8:
                        gasData = _c;
                        additionalFee = (_a = bestRoute.actions[0]) === null || _a === void 0 ? void 0 : _a.additionalProviderFee;
                        cryptoFeeAmount = core_1.Web3Pure.fromWei((additionalFee === null || additionalFee === void 0 ? void 0 : additionalFee.amount.toString()) || 0);
                        cryptoFeeSymbol = additionalFee === null || additionalFee === void 0 ? void 0 : additionalFee.token.symbol;
                        _d = [{}];
                        return [4 /*yield*/, this.getFeeInfo(fromBlockchain, options.providerAddress, from)];
                    case 9:
                        feeInfo = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_e.sent())])), { cryptoFee: additionalFee
                                    ? {
                                        amount: cryptoFeeAmount,
                                        tokenSymbol: cryptoFeeSymbol
                                    }
                                    : null }]);
                        nativeToken = core_1.BlockchainsInfo.getBlockchainByName(from.blockchain).nativeCoin;
                        cryptoFeeToken = new core_1.PriceTokenAmount(__assign(__assign({}, nativeToken), { price: nativeTokenPrice || new bignumber_js_1.default(0), tokenAmount: cryptoFeeAmount }));
                        itType = this.parseItProviders(bestRoute);
                        bridgeType = this.parseBridge(bestRoute);
                        return [2 /*return*/, {
                                trade: new via_cross_chain_trade_1.ViaCrossChainTrade({
                                    from: from,
                                    to: to,
                                    route: bestRoute,
                                    gasData: gasData,
                                    priceImpact: 0,
                                    toTokenAmountMin: toTokenAmountMin,
                                    feeInfo: feeInfo,
                                    cryptoFeeToken: cryptoFeeToken,
                                    itType: itType,
                                    bridgeType: bridgeType
                                }, options.providerAddress)
                            }];
                    case 10:
                        err_1 = _e.sent();
                        return [2 /*return*/, {
                                trade: null,
                                error: cross_chain_trade_provider_1.CrossChainTradeProvider.parseError(err_1)
                            }];
                    case 11: return [2 /*return*/];
                }
            });
        });
    };
    ViaCrossChainTradeProvider.prototype.getBestRoute = function (toToken, nativeTokenPrice, routes) {
        return __awaiter(this, void 0, void 0, function () {
            var toTokenPrice, sortedRoutes;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getTokensPrice(toToken.blockchain, [toToken])];
                    case 1:
                        toTokenPrice = (_a.sent())[0];
                        sortedRoutes = routes.sort(function (routeA, routeB) {
                            var _a, _b, _c, _d;
                            if (!toTokenPrice) {
                                return new bignumber_js_1.default(routeB.toTokenAmount).comparedTo(routeA.toTokenAmount);
                            }
                            var nativeTokenAmountA = (_b = (_a = routeA.actions[0]) === null || _a === void 0 ? void 0 : _a.additionalProviderFee) === null || _b === void 0 ? void 0 : _b.amount;
                            var nativeTokenAmountB = (_d = (_c = routeB.actions[0]) === null || _c === void 0 ? void 0 : _c.additionalProviderFee) === null || _d === void 0 ? void 0 : _d.amount;
                            var routeProfitA = toTokenPrice
                                .multipliedBy(routeA.toTokenAmount)
                                .minus((nativeTokenPrice === null || nativeTokenPrice === void 0 ? void 0 : nativeTokenPrice.multipliedBy((nativeTokenAmountA === null || nativeTokenAmountA === void 0 ? void 0 : nativeTokenAmountA.toString()) || 0)) || 0);
                            var routeProfitB = toTokenPrice
                                .multipliedBy(routeB.toTokenAmount)
                                .minus((nativeTokenPrice === null || nativeTokenPrice === void 0 ? void 0 : nativeTokenPrice.multipliedBy((nativeTokenAmountB === null || nativeTokenAmountB === void 0 ? void 0 : nativeTokenAmountB.toString()) || 0)) || 0);
                            return routeProfitB.comparedTo(routeProfitA);
                        });
                        return [2 /*return*/, sortedRoutes[0]];
                }
            });
        });
    };
    ViaCrossChainTradeProvider.prototype.getTokensPrice = function (blockchain, tokens) {
        return __awaiter(this, void 0, void 0, function () {
            var chainId, response_1, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        chainId = core_1.BlockchainsInfo.getBlockchainByName(blockchain).id;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, injector_1.Injector.httpClient.get('https://explorer-api.via.exchange/v1/token_price', {
                                params: {
                                    chain: chainId,
                                    tokens_addresses: tokens.map(function (token) { return token.address; }).join(',')
                                }
                            })];
                    case 2:
                        response_1 = _b.sent();
                        return [2 /*return*/, tokens.map(function (token) { return new bignumber_js_1.default(response_1[chainId][token.address].USD); })];
                    case 3:
                        _a = _b.sent();
                        return [2 /*return*/, tokens.map(function (token) { return token.price || null; })];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    ViaCrossChainTradeProvider.prototype.parseItProviders = function (route) {
        var _a;
        var steps = (_a = route.actions[0]) === null || _a === void 0 ? void 0 : _a.steps;
        var firstStep = steps === null || steps === void 0 ? void 0 : steps[0];
        var firstItProvider = (firstStep === null || firstStep === void 0 ? void 0 : firstStep.tool).type === 'swap' ? firstStep === null || firstStep === void 0 ? void 0 : firstStep.tool.name : undefined;
        var lastStep = steps === null || steps === void 0 ? void 0 : steps.reverse()[0];
        var secondItProvider = (steps === null || steps === void 0 ? void 0 : steps.length) && steps.length > 1 && (lastStep === null || lastStep === void 0 ? void 0 : lastStep.tool).type === 'swap'
            ? lastStep === null || lastStep === void 0 ? void 0 : lastStep.tool.name
            : undefined;
        return {
            from: this.parseTradeType(firstItProvider),
            to: this.parseTradeType(secondItProvider)
        };
    };
    ViaCrossChainTradeProvider.prototype.parseTradeType = function (type) {
        if (!type) {
            return undefined;
        }
        type = type.toUpperCase();
        var foundType = Object.values(features_1.TRADE_TYPE).find(function (tradeType) { return tradeType.split('_').join('') === type; });
        if (foundType) {
            return foundType;
        }
        switch (type) {
            case '0x':
                return features_1.TRADE_TYPE.ZRX;
            case '1INCH':
                return features_1.TRADE_TYPE.ONE_INCH;
            case '1SOL':
                return features_1.TRADE_TYPE.ONE_SOL;
            case 'DODOEX':
                return features_1.TRADE_TYPE.DODO;
            case 'TRADERJOE':
                return features_1.TRADE_TYPE.JOE;
            case 'UNISWAP':
                return features_1.TRADE_TYPE.UNISWAP_V2;
            default:
                return undefined;
        }
    };
    ViaCrossChainTradeProvider.prototype.parseBridge = function (route) {
        var _a, _b;
        var bridgeApi = (_b = (_a = route.actions[0]) === null || _a === void 0 ? void 0 : _a.steps.find(function (step) { return step.tool.type === 'cross'; })) === null || _b === void 0 ? void 0 : _b.tool.name;
        if (!bridgeApi) {
            return undefined;
        }
        return bridge_type_1.bridges.find(function (bridge) { var _a; return bridge === ((_a = bridgeApi.split(' ')[0]) === null || _a === void 0 ? void 0 : _a.toLowerCase()); });
    };
    ViaCrossChainTradeProvider.prototype.getFeeInfo = function (fromBlockchain, providerAddress, percentFeeToken) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _a = {};
                        _b = {};
                        return [4 /*yield*/, this.getFixedFee(fromBlockchain, providerAddress, contract_data_1.viaContractAddress[fromBlockchain], common_cross_chain_abi_1.commonCrossChainAbi)];
                    case 1:
                        _a.fixedFee = (_b.amount = _d.sent(),
                            _b.tokenSymbol = native_tokens_1.nativeTokensList[fromBlockchain].symbol,
                            _b);
                        _c = {};
                        return [4 /*yield*/, this.getFeePercent(fromBlockchain, providerAddress, contract_data_1.viaContractAddress[fromBlockchain], common_cross_chain_abi_1.commonCrossChainAbi)];
                    case 2: return [2 /*return*/, (_a.platformFee = (_c.percent = _d.sent(),
                            _c.tokenSymbol = percentFeeToken.symbol,
                            _c),
                            _a.cryptoFee = null,
                            _a)];
                }
            });
        });
    };
    return ViaCrossChainTradeProvider;
}(cross_chain_trade_provider_1.CrossChainTradeProvider));
exports.ViaCrossChainTradeProvider = ViaCrossChainTradeProvider;
//# sourceMappingURL=via-cross-chain-trade-provider.js.map