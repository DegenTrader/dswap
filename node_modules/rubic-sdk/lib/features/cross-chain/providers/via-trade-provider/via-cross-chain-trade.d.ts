import { PriceTokenAmount, Web3Public } from "../../../../core";
import { IRoute } from '@viaprotocol/router-sdk/dist/types';
import { GasData } from "../../models/gas-data";
import { BridgeType, CrossChainTrade, SwapTransactionOptions } from "../../..";
import BigNumber from 'bignumber.js';
import { FeeInfo } from "../common/models/fee";
import { ContractParams } from "../../models/contract-params";
import { ItType } from "../../models/it-type";
export declare class ViaCrossChainTrade extends CrossChainTrade {
    /** @internal */
    static getGasData(from: PriceTokenAmount, to: PriceTokenAmount, route: IRoute): Promise<GasData | null>;
    readonly type: "VIA";
    private readonly via;
    readonly from: PriceTokenAmount;
    readonly to: PriceTokenAmount;
    private readonly route;
    readonly priceImpact: number;
    readonly toTokenAmountMin: BigNumber;
    readonly gasData: GasData;
    readonly feeInfo: FeeInfo;
    readonly cryptoFeeToken: PriceTokenAmount;
    readonly itType: ItType;
    readonly bridgeType: BridgeType;
    protected readonly fromWeb3Public: Web3Public;
    protected get fromContractAddress(): string;
    get uuid(): string;
    constructor(crossChainTrade: {
        from: PriceTokenAmount;
        to: PriceTokenAmount;
        route: IRoute;
        gasData: GasData;
        priceImpact: number;
        toTokenAmountMin: BigNumber;
        feeInfo: FeeInfo;
        cryptoFeeToken: PriceTokenAmount;
        itType: ItType;
        bridgeType: BridgeType;
    }, providerAddress: string);
    protected checkTradeErrors(): Promise<void | never>;
    swap(options?: SwapTransactionOptions): Promise<string | never>;
    getContractParams(options: SwapTransactionOptions): Promise<ContractParams>;
    private checkProviderIsWhitelisted;
    getTradeAmountRatio(fromUsd: BigNumber): BigNumber;
}
