"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CrossChainAlgebraTrade = void 0;
var core_1 = require("../../../../../../../core");
var algebra_quoter_controller_1 = require("../../../../../../instant-trades/dexes/polygon/algebra/utils/quoter-controller/algebra-quoter-controller");
var empty_address_1 = require("../../../../../../../core/blockchain/constants/empty-address");
var provider_type_enum_1 = require("../../../../common/celer-rubic/models/provider-type.enum");
var swap_router_contract_data_1 = require("../../../../../../instant-trades/dexes/polygon/algebra/constants/swap-router-contract-data");
var common_1 = require("../../../../../../../common");
var CrossChainAlgebraTrade = /** @class */ (function () {
    function CrossChainAlgebraTrade(instantTrade) {
        this.instantTrade = instantTrade;
        this.defaultDeadline = 999999999999999;
    }
    CrossChainAlgebraTrade.prototype.getFirstPath = function () {
        return algebra_quoter_controller_1.AlgebraQuoterController.getEncodedPath(Array.from(this.instantTrade.path));
    };
    CrossChainAlgebraTrade.prototype.getSecondPath = function () {
        return this.instantTrade.wrappedPath.map(function (token) { return core_1.Web3Pure.addressToBytes32(token.address); });
    };
    CrossChainAlgebraTrade.prototype.modifyArgumentsForProvider = function (methodArguments) {
        return __awaiter(this, void 0, void 0, function () {
            var exactTokensForTokens;
            return __generator(this, function (_a) {
                exactTokensForTokens = true;
                if (!(methodArguments === null || methodArguments === void 0 ? void 0 : methodArguments[0])) {
                    throw new common_1.RubicSdkError('Method arguments array must not be empty');
                }
                methodArguments[0].push(exactTokensForTokens);
                return [2 /*return*/];
            });
        });
    };
    CrossChainAlgebraTrade.prototype.getCelerSourceObject = function () {
        var dex = swap_router_contract_data_1.ALGEBRA_SWAP_ROUTER_CONTRACT_ADDRESS;
        var path = this.getFirstPath();
        var amountOutMinimum = this.instantTrade.toTokenAmountMin.stringWeiAmount;
        return { dex: dex, path: path, deadline: this.defaultDeadline, amountOutMinimum: amountOutMinimum };
    };
    CrossChainAlgebraTrade.prototype.getCelerDestinationObject = function (integratorAddress, receiverAddress) {
        var dex = swap_router_contract_data_1.ALGEBRA_SWAP_ROUTER_CONTRACT_ADDRESS;
        var pathV3 = this.getFirstPath();
        var deadline = this.defaultDeadline;
        var amountOutMinimum = this.instantTrade.toTokenAmountMin.stringWeiAmount;
        return {
            dex: dex,
            nativeOut: this.instantTrade.to.isNative,
            receiverEOA: receiverAddress,
            integrator: integratorAddress,
            version: provider_type_enum_1.SwapVersion.V3,
            path: [empty_address_1.EMPTY_ADDRESS],
            pathV3: pathV3,
            deadline: deadline,
            amountOutMinimum: amountOutMinimum
        };
    };
    return CrossChainAlgebraTrade;
}());
exports.CrossChainAlgebraTrade = CrossChainAlgebraTrade;
//# sourceMappingURL=cross-chain-algebra-trade.js.map