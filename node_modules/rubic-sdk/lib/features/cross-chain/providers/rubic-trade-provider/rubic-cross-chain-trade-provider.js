"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RubicCrossChainTradeProvider = void 0;
var bignumber_js_1 = __importDefault(require("bignumber.js"));
var rubic_cross_chain_contracts_1 = require("./constants/rubic-cross-chain-contracts");
var rubic_cross_chain_supported_blockchains_1 = require("./constants/rubic-cross-chain-supported-blockchains");
var common_1 = require("../../../../common");
var features_1 = require("../../..");
var price_token_1 = require("../../../../core/blockchain/tokens/price-token");
var price_token_amount_1 = require("../../../../core/blockchain/tokens/price-token-amount");
var rubic_cross_chain_trade_1 = require("./rubic-cross-chain-trade");
var rubic_direct_cross_chain_contract_trade_1 = require("./rubic-cross-chain-contract-trade/rubic-direct-cross-chain-contract-trade/rubic-direct-cross-chain-contract-trade");
var rubic_it_cross_chain_contract_trade_1 = require("./rubic-cross-chain-contract-trade/rubic-it-cross-chain-contract-trade/rubic-it-cross-chain-contract-trade");
var celer_rubic_cross_chain_trade_provider_1 = require("../common/celer-rubic/celer-rubic-cross-chain-trade-provider");
var cross_chain_trade_provider_1 = require("../common/cross-chain-trade-provider");
var RubicCrossChainTradeProvider = /** @class */ (function (_super) {
    __extends(RubicCrossChainTradeProvider, _super);
    function RubicCrossChainTradeProvider() {
        var _this = _super.call(this) || this;
        _this.type = features_1.CROSS_CHAIN_TRADE_TYPE.RUBIC;
        _this.contracts = rubic_cross_chain_contracts_1.getRubicCrossChainContract;
        return _this;
    }
    RubicCrossChainTradeProvider.isSupportedBlockchain = function (blockchain) {
        return rubic_cross_chain_supported_blockchains_1.rubicCrossChainSupportedBlockchains.some(function (supportedBlockchain) { return supportedBlockchain === blockchain; });
    };
    RubicCrossChainTradeProvider.prototype.isSupportedBlockchains = function (fromBlockchain, toBlockchain) {
        return (RubicCrossChainTradeProvider.isSupportedBlockchain(fromBlockchain) &&
            RubicCrossChainTradeProvider.isSupportedBlockchain(toBlockchain));
    };
    RubicCrossChainTradeProvider.prototype.calculate = function (from, to, options) {
        return __awaiter(this, void 0, void 0, function () {
            var fromBlockchain, toBlockchain, _a, fromTransitToken, toTransitToken, _b, _c, _d, _e, _f, _g, _h, fromSlippageTolerance, toSlippageTolerance, gasCalculation, providerAddress, fromTrade, _j, toTransitTokenAmount, transitFeeToken, feeInPercents, toTrade, cryptoFeeToken, gasData, _k, trade, err_1;
            return __generator(this, function (_l) {
                switch (_l.label) {
                    case 0:
                        fromBlockchain = from.blockchain;
                        toBlockchain = to.blockchain;
                        if (!RubicCrossChainTradeProvider.isSupportedBlockchain(fromBlockchain) ||
                            !RubicCrossChainTradeProvider.isSupportedBlockchain(toBlockchain)) {
                            return [2 /*return*/, null];
                        }
                        _c = (_b = Promise).all;
                        _d = price_token_1.PriceToken.bind;
                        _e = [{}];
                        return [4 /*yield*/, this.contracts(fromBlockchain).getTransitToken()];
                    case 1:
                        _f = [
                            new (_d.apply(price_token_1.PriceToken, [void 0, __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_l.sent())])), { price: new bignumber_js_1.default(1) }])]))()
                        ];
                        _g = price_token_1.PriceToken.bind;
                        _h = [{}];
                        return [4 /*yield*/, this.contracts(toBlockchain).getTransitToken()];
                    case 2: return [4 /*yield*/, _c.apply(_b, [_f.concat([
                                new (_g.apply(price_token_1.PriceToken, [void 0, __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_l.sent())])), { price: new bignumber_js_1.default(1) }])]))()
                            ])])];
                    case 3:
                        _a = _l.sent(), fromTransitToken = _a[0], toTransitToken = _a[1];
                        fromSlippageTolerance = options.fromSlippageTolerance, toSlippageTolerance = options.toSlippageTolerance, gasCalculation = options.gasCalculation, providerAddress = options.providerAddress;
                        return [4 /*yield*/, this.checkContractsState(this.contracts(fromBlockchain), this.contracts(toBlockchain))];
                    case 4:
                        _l.sent();
                        return [4 /*yield*/, this.calculateBestTrade(fromBlockchain, from, fromTransitToken, fromSlippageTolerance)];
                    case 5:
                        fromTrade = _l.sent();
                        return [4 /*yield*/, this.getToTransitTokenAmount(toBlockchain, fromTrade.fromToken, fromTrade.toTokenAmountMin, fromTrade.contract)];
                    case 6:
                        _j = _l.sent(), toTransitTokenAmount = _j.toTransitTokenAmount, transitFeeToken = _j.transitFeeToken, feeInPercents = _j.feeInPercents;
                        return [4 /*yield*/, this.calculateBestTrade(toBlockchain, new price_token_amount_1.PriceTokenAmount(__assign(__assign({}, toTransitToken.asStruct), { tokenAmount: toTransitTokenAmount })), to, toSlippageTolerance)];
                    case 7:
                        toTrade = _l.sent();
                        return [4 /*yield*/, fromTrade.contract.getCryptoFeeToken(toTrade.contract)];
                    case 8:
                        cryptoFeeToken = _l.sent();
                        if (!(gasCalculation === 'enabled')) return [3 /*break*/, 10];
                        return [4 /*yield*/, rubic_cross_chain_trade_1.RubicCrossChainTrade.getGasData(fromTrade, toTrade, cryptoFeeToken)];
                    case 9:
                        _k = _l.sent();
                        return [3 /*break*/, 11];
                    case 10:
                        _k = null;
                        _l.label = 11;
                    case 11:
                        gasData = _k;
                        trade = new rubic_cross_chain_trade_1.RubicCrossChainTrade({
                            fromTrade: fromTrade,
                            toTrade: toTrade,
                            cryptoFeeToken: cryptoFeeToken,
                            transitFeeToken: transitFeeToken,
                            gasData: gasData,
                            feeInPercents: feeInPercents,
                            feeInfo: {
                                fixedFee: { amount: new bignumber_js_1.default(0), tokenSymbol: '' },
                                platformFee: { percent: feeInPercents, tokenSymbol: transitFeeToken.symbol },
                                cryptoFee: {
                                    amount: cryptoFeeToken.tokenAmount,
                                    tokenSymbol: cryptoFeeToken.symbol
                                }
                            }
                        }, providerAddress);
                        _l.label = 12;
                    case 12:
                        _l.trys.push([12, 14, , 15]);
                        return [4 /*yield*/, this.checkMinMaxAmountsErrors(fromTrade)];
                    case 13:
                        _l.sent();
                        return [3 /*break*/, 15];
                    case 14:
                        err_1 = _l.sent();
                        return [2 /*return*/, {
                                trade: trade,
                                error: cross_chain_trade_provider_1.CrossChainTradeProvider.parseError(err_1)
                            }];
                    case 15: return [2 /*return*/, {
                            trade: trade
                        }];
                }
            });
        });
    };
    RubicCrossChainTradeProvider.prototype.calculateBestTrade = function (blockchain, from, toToken, slippageTolerance) {
        return __awaiter(this, void 0, void 0, function () {
            var contract;
            return __generator(this, function (_a) {
                if ((0, common_1.compareAddresses)(from.address, toToken.address)) {
                    contract = this.contracts(blockchain);
                    if (!from.price.isFinite()) {
                        from = new price_token_amount_1.PriceTokenAmount(__assign(__assign({}, from.asStructWithAmount), { price: toToken.price }));
                    }
                    return [2 /*return*/, new rubic_direct_cross_chain_contract_trade_1.RubicDirectCrossChainContractTrade(blockchain, contract, from)];
                }
                return [2 /*return*/, this.getBestItContractTrade(blockchain, from, toToken, slippageTolerance)];
            });
        });
    };
    RubicCrossChainTradeProvider.prototype.getBestItContractTrade = function (blockchain, from, toToken, slippageTolerance) {
        return __awaiter(this, void 0, void 0, function () {
            var contract, promises, bestTrade;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        contract = this.contracts(blockchain);
                        promises = contract.providersData.map(function (_, providerIndex) { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                return [2 /*return*/, this.getItCalculatedTrade(contract, providerIndex, from, toToken, slippageTolerance)];
                            });
                        }); });
                        return [4 /*yield*/, Promise.allSettled(promises).then(function (results) { return __awaiter(_this, void 0, void 0, function () {
                                var sortedResults;
                                return __generator(this, function (_a) {
                                    sortedResults = results
                                        .map(function (result) {
                                        if (result.status === 'fulfilled') {
                                            return result.value;
                                        }
                                        return null;
                                    })
                                        .filter(common_1.notNull)
                                        .sort(function (a, b) { return b.toAmount.comparedTo(a.toAmount); });
                                    if (!sortedResults.length) {
                                        throw results[0].reason;
                                    }
                                    return [2 /*return*/, sortedResults[0]];
                                });
                            }); })];
                    case 1:
                        bestTrade = _a.sent();
                        if (!bestTrade) {
                            throw new common_1.RubicSdkError('Best trade has to be defined');
                        }
                        return [2 /*return*/, new rubic_it_cross_chain_contract_trade_1.RubicItCrossChainContractTrade(blockchain, contract, bestTrade.providerIndex, slippageTolerance, bestTrade.instantTrade)];
                }
            });
        });
    };
    return RubicCrossChainTradeProvider;
}(celer_rubic_cross_chain_trade_provider_1.CelerRubicCrossChainTradeProvider));
exports.RubicCrossChainTradeProvider = RubicCrossChainTradeProvider;
//# sourceMappingURL=rubic-cross-chain-trade-provider.js.map