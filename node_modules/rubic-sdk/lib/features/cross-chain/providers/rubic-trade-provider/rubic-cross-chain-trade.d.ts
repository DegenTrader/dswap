import { PriceTokenAmount } from "../../../../core/blockchain/tokens/price-token-amount";
import { GasData } from "../../models/gas-data";
import { SwapTransactionOptions } from "../../../instant-trades/models/swap-transaction-options";
import BigNumber from 'bignumber.js';
import { CelerRubicCrossChainTrade } from "../common/celer-rubic/celer-rubic-cross-chain-trade";
import { Web3Public } from "../../../../core";
import { CrossChainContractTrade } from "../common/celer-rubic/cross-chain-contract-trade";
import { ContractParams } from "../../models/contract-params";
import { TradeType } from "../../..";
import { FeeInfo } from "../common/models/fee";
/**
 * Calculated Rubic cross chain trade.
 */
export declare class RubicCrossChainTrade extends CelerRubicCrossChainTrade {
    readonly type: "RUBIC";
    readonly itType: {
        from: TradeType | undefined;
        to: TradeType | undefined;
    };
    readonly feeInPercents: number;
    readonly feeInfo: FeeInfo;
    /** @internal */
    static getGasData(fromTrade: CrossChainContractTrade, toTrade: CrossChainContractTrade, cryptoFeeToken: PriceTokenAmount): Promise<GasData | null>;
    readonly transitFeeToken: PriceTokenAmount;
    readonly from: PriceTokenAmount;
    readonly to: PriceTokenAmount;
    readonly toTokenAmountMin: BigNumber;
    readonly fromTrade: CrossChainContractTrade;
    readonly toTrade: CrossChainContractTrade;
    readonly gasData: GasData | null;
    readonly cryptoFeeToken: PriceTokenAmount;
    protected readonly fromWeb3Public: Web3Public;
    protected readonly toWeb3Public: Web3Public;
    constructor(crossChainTrade: {
        fromTrade: CrossChainContractTrade;
        toTrade: CrossChainContractTrade;
        cryptoFeeToken: PriceTokenAmount;
        transitFeeToken: PriceTokenAmount;
        gasData: GasData | null;
        feeInPercents: number;
        feeInfo: FeeInfo;
    }, providerAddress: string);
    protected checkTradeErrors(): Promise<void | never>;
    getContractParams(options?: {
        fromAddress?: string;
        swapTokenWithFee?: boolean;
        receiverAddress?: string;
    }): Promise<ContractParams>;
    swap(options?: SwapTransactionOptions): Promise<string | never>;
    private executeContractMethod;
    private parseSwapErrors;
}
