"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RubicCrossChainTrade = void 0;
var web3_pure_1 = require("../../../../core/blockchain/web3-pure/web3-pure");
var injector_1 = require("../../../../core/sdk/injector");
var price_token_amount_1 = require("../../../../core/blockchain/tokens/price-token-amount");
var cross_chain_is_unavailable_error_1 = require("../../../../common/errors/cross-chain/cross-chain-is-unavailable.error");
var failed_to_check_for_transaction_receipt_error_1 = require("../../../../common/errors/swap/failed-to-check-for-transaction-receipt.error");
var insufficient_funds_gas_price_value_error_1 = require("../../../../common/errors/cross-chain/insufficient-funds-gas-price-value.error");
var bignumber_js_1 = __importDefault(require("bignumber.js"));
var rubic_it_cross_chain_contract_trade_1 = require("./rubic-cross-chain-contract-trade/rubic-it-cross-chain-contract-trade/rubic-it-cross-chain-contract-trade");
var empty_address_1 = require("../../../../core/blockchain/constants/empty-address");
var celer_rubic_cross_chain_trade_1 = require("../common/celer-rubic/celer-rubic-cross-chain-trade");
var common_1 = require("../../../../common");
var token_with_fee_errors_1 = require("../../constants/token-with-fee-errors");
var features_1 = require("../../..");
var rubic_direct_cross_chain_contract_trade_1 = require("./rubic-cross-chain-contract-trade/rubic-direct-cross-chain-contract-trade/rubic-direct-cross-chain-contract-trade");
/**
 * Calculated Rubic cross chain trade.
 */
var RubicCrossChainTrade = /** @class */ (function (_super) {
    __extends(RubicCrossChainTrade, _super);
    function RubicCrossChainTrade(crossChainTrade, providerAddress) {
        var _this = _super.call(this, providerAddress) || this;
        _this.type = features_1.CROSS_CHAIN_TRADE_TYPE.RUBIC;
        _this.feeInPercents = crossChainTrade.feeInPercents;
        _this.fromTrade = crossChainTrade.fromTrade;
        _this.toTrade = crossChainTrade.toTrade;
        _this.gasData = crossChainTrade.gasData;
        _this.cryptoFeeToken = crossChainTrade.cryptoFeeToken;
        _this.feeInfo = crossChainTrade.feeInfo;
        _this.fromWeb3Public = injector_1.Injector.web3PublicService.getWeb3Public(_this.fromTrade.blockchain);
        _this.toWeb3Public = injector_1.Injector.web3PublicService.getWeb3Public(_this.toTrade.blockchain);
        _this.transitFeeToken = crossChainTrade.transitFeeToken;
        _this.from = _this.fromTrade.fromToken;
        var fromSlippage = _this.fromTrade instanceof rubic_it_cross_chain_contract_trade_1.RubicItCrossChainContractTrade ? _this.fromTrade.slippage : 0;
        _this.to = new price_token_amount_1.PriceTokenAmount(__assign(__assign({}, _this.toTrade.toToken.asStruct), { weiAmount: _this.toTrade.toToken.weiAmount.dividedBy(1 - fromSlippage).dp(0) }));
        _this.itType = {
            from: crossChainTrade.fromTrade instanceof rubic_direct_cross_chain_contract_trade_1.RubicDirectCrossChainContractTrade
                ? undefined
                : crossChainTrade.fromTrade.provider.type,
            to: crossChainTrade.toTrade instanceof rubic_direct_cross_chain_contract_trade_1.RubicDirectCrossChainContractTrade
                ? undefined
                : crossChainTrade.toTrade.provider.type
        };
        _this.toTokenAmountMin = _this.toTrade.toTokenAmountMin;
        return _this;
    }
    /** @internal */
    RubicCrossChainTrade.getGasData = function (fromTrade, toTrade, cryptoFeeToken) {
        return __awaiter(this, void 0, void 0, function () {
            var fromBlockchain, walletAddress, _a, contractAddress, contractAbi, methodName, methodArguments, value, web3Public, _b, gasLimit, gasPrice, _c, _d, _e, _f, increasedGasLimit, _err_1;
            return __generator(this, function (_g) {
                switch (_g.label) {
                    case 0:
                        fromBlockchain = fromTrade.blockchain;
                        walletAddress = injector_1.Injector.web3Private.address;
                        if (!walletAddress) {
                            console.debug('Cannot calculate gas data before user logged in');
                            return [2 /*return*/, null];
                        }
                        _g.label = 1;
                    case 1:
                        _g.trys.push([1, 5, , 6]);
                        return [4 /*yield*/, new RubicCrossChainTrade({
                                fromTrade: fromTrade,
                                toTrade: toTrade,
                                cryptoFeeToken: cryptoFeeToken,
                                transitFeeToken: {},
                                gasData: null,
                                feeInPercents: 0,
                                feeInfo: {
                                    fixedFee: { amount: new bignumber_js_1.default(0), tokenSymbol: '' },
                                    platformFee: { percent: 0, tokenSymbol: '' },
                                    cryptoFee: null
                                }
                            }, empty_address_1.EMPTY_ADDRESS).getContractParams()];
                    case 2:
                        _a = _g.sent(), contractAddress = _a.contractAddress, contractAbi = _a.contractAbi, methodName = _a.methodName, methodArguments = _a.methodArguments, value = _a.value;
                        web3Public = injector_1.Injector.web3PublicService.getWeb3Public(fromBlockchain);
                        _d = (_c = Promise).all;
                        _e = [web3Public.getEstimatedGas(contractAbi, contractAddress, methodName, methodArguments, walletAddress, value)];
                        _f = bignumber_js_1.default.bind;
                        return [4 /*yield*/, injector_1.Injector.gasPriceApi.getGasPrice(fromTrade.blockchain)];
                    case 3: return [4 /*yield*/, _d.apply(_c, [_e.concat([
                                new (_f.apply(bignumber_js_1.default, [void 0, _g.sent()]))()
                            ])])];
                    case 4:
                        _b = _g.sent(), gasLimit = _b[0], gasPrice = _b[1];
                        if (!(gasLimit === null || gasLimit === void 0 ? void 0 : gasLimit.isFinite())) {
                            return [2 /*return*/, null];
                        }
                        increasedGasLimit = web3_pure_1.Web3Pure.calculateGasMargin(gasLimit, 1.2);
                        return [2 /*return*/, {
                                gasLimit: increasedGasLimit,
                                gasPrice: gasPrice
                            }];
                    case 5:
                        _err_1 = _g.sent();
                        return [2 /*return*/, null];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    RubicCrossChainTrade.prototype.checkTradeErrors = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.checkWalletConnected();
                        this.checkBlockchainCorrect();
                        return [4 /*yield*/, Promise.all([
                                this.checkContractsState(),
                                this.checkToBlockchainGasPrice(),
                                this.checkToContractBalance(),
                                this.checkUserBalance()
                            ])];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    RubicCrossChainTrade.prototype.getContractParams = function (options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var _a, fromTrade, toTrade, contractAddress, _b, methodName, contractAbi, methodArguments, tokenInAmountAbsolute, value;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _a = this, fromTrade = _a.fromTrade, toTrade = _a.toTrade;
                        contractAddress = fromTrade.contract.address;
                        _b = fromTrade.getMethodNameAndContractAbi(), methodName = _b.methodName, contractAbi = _b.contractAbi;
                        return [4 /*yield*/, fromTrade.getMethodArguments(toTrade, (options === null || options === void 0 ? void 0 : options.fromAddress) || this.walletAddress, this.providerAddress, {
                                swapTokenWithFee: (options === null || options === void 0 ? void 0 : options.swapTokenWithFee) || false,
                                receiverAddress: (options === null || options === void 0 ? void 0 : options.receiverAddress) || this.walletAddress
                            })];
                    case 1:
                        methodArguments = _c.sent();
                        tokenInAmountAbsolute = fromTrade.fromToken.weiAmount;
                        value = this.cryptoFeeToken.weiAmount
                            .plus(fromTrade.fromToken.isNative ? tokenInAmountAbsolute : 0)
                            .toFixed(0);
                        return [2 /*return*/, {
                                contractAddress: contractAddress,
                                contractAbi: contractAbi,
                                methodName: methodName,
                                methodArguments: methodArguments,
                                value: value
                            }];
                }
            });
        });
    };
    RubicCrossChainTrade.prototype.swap = function (options) {
        var _a;
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var transactionHash, err_1, errMessage_1, _err_2;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.checkTradeErrors()];
                    case 1:
                        _b.sent();
                        return [4 /*yield*/, this.checkAllowanceAndApprove(options)];
                    case 2:
                        _b.sent();
                        _b.label = 3;
                    case 3:
                        _b.trys.push([3, 5, , 12]);
                        return [4 /*yield*/, this.executeContractMethod(options)];
                    case 4:
                        transactionHash = _b.sent();
                        return [3 /*break*/, 12];
                    case 5:
                        err_1 = _b.sent();
                        errMessage_1 = err_1.message || ((_a = err_1.toString) === null || _a === void 0 ? void 0 : _a.call(err_1));
                        if (!token_with_fee_errors_1.TOKEN_WITH_FEE_ERRORS.some(function (errText) {
                            return errMessage_1.toLowerCase().includes(errText.toLowerCase());
                        })) return [3 /*break*/, 10];
                        _b.label = 6;
                    case 6:
                        _b.trys.push([6, 8, , 9]);
                        return [4 /*yield*/, this.executeContractMethod(options, true)];
                    case 7:
                        transactionHash = _b.sent();
                        return [3 /*break*/, 9];
                    case 8:
                        _err_2 = _b.sent();
                        throw new common_1.LowSlippageDeflationaryTokenError();
                    case 9: return [3 /*break*/, 11];
                    case 10: throw this.parseSwapErrors(err_1);
                    case 11: return [3 /*break*/, 12];
                    case 12: return [2 /*return*/, transactionHash];
                }
            });
        });
    };
    RubicCrossChainTrade.prototype.executeContractMethod = function (options, swapTokenWithFee) {
        if (swapTokenWithFee === void 0) { swapTokenWithFee = false; }
        return __awaiter(this, void 0, void 0, function () {
            var onConfirm, gasLimit, gasPrice, _a, contractAddress, contractAbi, methodName, methodArguments, value, transactionHash, onTransactionHash, err_2;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        onConfirm = options.onConfirm, gasLimit = options.gasLimit, gasPrice = options.gasPrice;
                        return [4 /*yield*/, this.getContractParams({ fromAddress: this.walletAddress, swapTokenWithFee: swapTokenWithFee })];
                    case 1:
                        _a = _b.sent(), contractAddress = _a.contractAddress, contractAbi = _a.contractAbi, methodName = _a.methodName, methodArguments = _a.methodArguments, value = _a.value;
                        onTransactionHash = function (hash) {
                            if (onConfirm) {
                                onConfirm(hash);
                            }
                            transactionHash = hash;
                        };
                        _b.label = 2;
                    case 2:
                        _b.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, injector_1.Injector.web3Private.tryExecuteContractMethod(contractAddress, contractAbi, methodName, methodArguments, {
                                gas: gasLimit,
                                gasPrice: gasPrice,
                                value: value,
                                onTransactionHash: onTransactionHash
                            }, function (err) {
                                var _a;
                                var includesErrCode = (_a = err === null || err === void 0 ? void 0 : err.message) === null || _a === void 0 ? void 0 : _a.includes('-32000');
                                var allowedErrors = [
                                    'insufficient funds for transfer',
                                    'insufficient funds for gas * price + value'
                                ];
                                var includesPhrase = allowedErrors.some(function (error) { var _a; return (_a = err === null || err === void 0 ? void 0 : err.message) === null || _a === void 0 ? void 0 : _a.includes(error); });
                                return includesErrCode && includesPhrase;
                            })];
                    case 3:
                        _b.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        err_2 = _b.sent();
                        if (err_2 instanceof failed_to_check_for_transaction_receipt_error_1.FailedToCheckForTransactionReceiptError) {
                            return [2 /*return*/, transactionHash];
                        }
                        throw err_2;
                    case 5: return [2 /*return*/, transactionHash];
                }
            });
        });
    };
    RubicCrossChainTrade.prototype.parseSwapErrors = function (err) {
        var _a;
        var errMessage = (err === null || err === void 0 ? void 0 : err.message) || ((_a = err === null || err === void 0 ? void 0 : err.toString) === null || _a === void 0 ? void 0 : _a.call(err));
        if (errMessage === null || errMessage === void 0 ? void 0 : errMessage.includes('swapContract: Not enough amount of tokens')) {
            return new cross_chain_is_unavailable_error_1.CrossChainIsUnavailableError();
        }
        if (errMessage === null || errMessage === void 0 ? void 0 : errMessage.includes('err: insufficient funds for gas * price + value')) {
            return new insufficient_funds_gas_price_value_error_1.InsufficientFundsGasPriceValueError();
        }
        return err;
    };
    return RubicCrossChainTrade;
}(celer_rubic_cross_chain_trade_1.CelerRubicCrossChainTrade));
exports.RubicCrossChainTrade = RubicCrossChainTrade;
//# sourceMappingURL=rubic-cross-chain-trade.js.map