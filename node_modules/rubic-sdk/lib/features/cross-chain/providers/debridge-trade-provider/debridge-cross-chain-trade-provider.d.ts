import { CrossChainTradeProvider } from "../common/cross-chain-trade-provider";
import { BlockchainName, PriceToken } from "../../../../core";
import { RequiredCrossChainOptions } from "../../models/cross-chain-options";
import { PriceTokenAmount } from "../../../../core/blockchain/tokens/price-token-amount";
import { WrappedCrossChainTrade } from "../common/models/wrapped-cross-chain-trade";
import { DeBridgeCrossChainSupportedBlockchain } from "./constants/debridge-cross-chain-supported-blockchain";
import { FeeInfo } from "../common/models/fee";
export declare class DebridgeCrossChainTradeProvider extends CrossChainTradeProvider {
    static isSupportedBlockchain(blockchain: BlockchainName): blockchain is DeBridgeCrossChainSupportedBlockchain;
    static readonly apiEndpoint = "https://deswap.debridge.finance/v1.0/transaction";
    private readonly deBridgeReferralCode;
    readonly type: "DEBRIDGE";
    protected get walletAddress(): string;
    isSupportedBlockchains(fromBlockchain: BlockchainName, toBlockchain: BlockchainName): boolean;
    calculate(from: PriceTokenAmount, toToken: PriceToken, options: RequiredCrossChainOptions): Promise<Omit<WrappedCrossChainTrade, 'tradeType'> | null>;
    private checkContractState;
    protected getFeeInfo(fromBlockchain: DeBridgeCrossChainSupportedBlockchain, providerAddress: string): Promise<FeeInfo>;
}
