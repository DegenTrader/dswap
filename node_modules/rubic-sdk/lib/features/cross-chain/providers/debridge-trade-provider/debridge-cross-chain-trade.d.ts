import { SwapTransactionOptions, TradeType } from "../../..";
import { CrossChainTrade } from "../common/cross-chain-trade";
import { PriceTokenAmount, Web3Public } from "../../../../core";
import { GasData } from "../../models/gas-data";
import BigNumber from 'bignumber.js';
import { FeeInfo } from "../common/models/fee";
import { ContractParams } from "../../models/contract-params";
import { TransactionRequest } from "./models/transaction-request";
/**
 * Calculated DeBridge cross chain trade.
 */
export declare class DebridgeCrossChainTrade extends CrossChainTrade {
    /** @internal */
    readonly transitAmount: BigNumber;
    private readonly cryptoFeeToken;
    private readonly transactionRequest;
    /** @internal */
    static getGasData(from: PriceTokenAmount, to: PriceTokenAmount, transactionRequest: TransactionRequest): Promise<GasData | null>;
    readonly type: "DEBRIDGE";
    readonly itType: {
        from: TradeType;
        to: TradeType;
    };
    readonly from: PriceTokenAmount;
    readonly to: PriceTokenAmount;
    readonly toTokenAmountMin: BigNumber;
    readonly priceImpact: number;
    readonly gasData: GasData | null;
    protected readonly fromWeb3Public: Web3Public;
    private get fromBlockchain();
    protected get fromContractAddress(): string;
    readonly feeInfo: FeeInfo;
    constructor(crossChainTrade: {
        from: PriceTokenAmount;
        to: PriceTokenAmount;
        transactionRequest: TransactionRequest;
        gasData: GasData | null;
        priceImpact: number;
        slippage: number;
        feeInfo: FeeInfo;
        transitAmount: BigNumber;
        cryptoFeeToken: PriceTokenAmount;
    }, providerAddress: string);
    protected checkTradeErrors(): Promise<void | never>;
    swap(options?: SwapTransactionOptions): Promise<string | never>;
    getContractParams(options: SwapTransactionOptions): Promise<ContractParams>;
    getTradeAmountRatio(fromUsd: BigNumber): BigNumber;
    private getTransactionRequest;
}
