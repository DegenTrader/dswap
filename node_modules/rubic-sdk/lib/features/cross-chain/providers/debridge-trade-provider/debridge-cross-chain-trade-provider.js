"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DebridgeCrossChainTradeProvider = void 0;
var cross_chain_trade_provider_1 = require("../common/cross-chain-trade-provider");
var features_1 = require("../../..");
var core_1 = require("../../../../core");
var common_1 = require("../../../../common");
var injector_1 = require("../../../../core/sdk/injector");
var price_token_amount_1 = require("../../../../core/blockchain/tokens/price-token-amount");
var debridge_cross_chain_supported_blockchain_1 = require("./constants/debridge-cross-chain-supported-blockchain");
var debridge_cross_chain_trade_1 = require("./debridge-cross-chain-trade");
var contract_address_1 = require("./constants/contract-address");
var common_cross_chain_abi_1 = require("../common/constants/common-cross-chain-abi");
var native_tokens_1 = require("../../../../core/blockchain/constants/native-tokens");
var bignumber_js_1 = __importDefault(require("bignumber.js"));
var empty_address_1 = require("../../../../core/blockchain/constants/empty-address");
var DebridgeCrossChainTradeProvider = /** @class */ (function (_super) {
    __extends(DebridgeCrossChainTradeProvider, _super);
    function DebridgeCrossChainTradeProvider() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.deBridgeReferralCode = '4350';
        _this.type = features_1.CROSS_CHAIN_TRADE_TYPE.DEBRIDGE;
        return _this;
    }
    DebridgeCrossChainTradeProvider.isSupportedBlockchain = function (blockchain) {
        return debridge_cross_chain_supported_blockchain_1.deBridgeCrossChainSupportedBlockchains.some(function (supportedBlockchain) { return supportedBlockchain === blockchain; });
    };
    Object.defineProperty(DebridgeCrossChainTradeProvider.prototype, "walletAddress", {
        get: function () {
            return injector_1.Injector.web3Private.address;
        },
        enumerable: false,
        configurable: true
    });
    DebridgeCrossChainTradeProvider.prototype.isSupportedBlockchains = function (fromBlockchain, toBlockchain) {
        return (DebridgeCrossChainTradeProvider.isSupportedBlockchain(fromBlockchain) &&
            DebridgeCrossChainTradeProvider.isSupportedBlockchain(toBlockchain));
    };
    DebridgeCrossChainTradeProvider.prototype.calculate = function (from, toToken, options) {
        return __awaiter(this, void 0, void 0, function () {
            var fromBlockchain, toBlockchain, fromAddress, feeInfo, feeAmount, tokenAmountIn, slippageTolerance, requestParams, _a, tx, estimation, to, gasData, _b, transitToken, cryptoFeeAmount, nativeToken, cryptoFeeToken, err_1, rubicSdkError;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        fromBlockchain = from.blockchain;
                        toBlockchain = toToken.blockchain;
                        if (!DebridgeCrossChainTradeProvider.isSupportedBlockchain(fromBlockchain) ||
                            !DebridgeCrossChainTradeProvider.isSupportedBlockchain(toBlockchain)) {
                            return [2 /*return*/, null];
                        }
                        _c.label = 1;
                    case 1:
                        _c.trys.push([1, 9, , 10]);
                        fromAddress = options.fromAddress || this.walletAddress;
                        return [4 /*yield*/, this.checkContractState(fromBlockchain)];
                    case 2:
                        _c.sent();
                        return [4 /*yield*/, this.getFeeInfo(fromBlockchain, options.providerAddress)];
                    case 3:
                        feeInfo = _c.sent();
                        feeAmount = core_1.Web3Pure.toWei(from.tokenAmount.multipliedBy(feeInfo.platformFee.percent).dividedBy(100), from.decimals, 1);
                        tokenAmountIn = from.weiAmount.minus(feeAmount).toFixed(0);
                        slippageTolerance = options.slippageTolerance * 100;
                        requestParams = {
                            srcChainId: core_1.BlockchainsInfo.getBlockchainByName(fromBlockchain).id,
                            srcChainTokenIn: from.address,
                            srcChainTokenInAmount: tokenAmountIn,
                            slippage: slippageTolerance,
                            dstChainId: core_1.BlockchainsInfo.getBlockchainByName(toBlockchain).id,
                            dstChainTokenOut: toToken.address,
                            dstChainTokenOutRecipient: empty_address_1.EMPTY_ADDRESS,
                            referralCode: this.deBridgeReferralCode
                        };
                        return [4 /*yield*/, injector_1.Injector.httpClient.get(DebridgeCrossChainTradeProvider.apiEndpoint, {
                                params: requestParams
                            })];
                    case 4:
                        _a = _c.sent(), tx = _a.tx, estimation = _a.estimation;
                        to = new price_token_amount_1.PriceTokenAmount(__assign(__assign({}, toToken.asStruct), { tokenAmount: core_1.Web3Pure.fromWei(estimation.dstChainTokenOut.amount, estimation.dstChainTokenOut.decimals) }));
                        if (!(options.gasCalculation === 'enabled')) return [3 /*break*/, 6];
                        return [4 /*yield*/, debridge_cross_chain_trade_1.DebridgeCrossChainTrade.getGasData(from, to, requestParams)];
                    case 5:
                        _b = _c.sent();
                        return [3 /*break*/, 7];
                    case 6:
                        _b = null;
                        _c.label = 7;
                    case 7:
                        gasData = _b;
                        transitToken = estimation.srcChainTokenOut;
                        cryptoFeeAmount = new bignumber_js_1.default(tx.value).minus(from.isNative ? from.stringWeiAmount : 0);
                        nativeToken = core_1.BlockchainsInfo.getBlockchainByName(fromBlockchain).nativeCoin;
                        return [4 /*yield*/, price_token_amount_1.PriceTokenAmount.createFromToken(__assign(__assign({}, nativeToken), { weiAmount: cryptoFeeAmount }))];
                    case 8:
                        cryptoFeeToken = _c.sent();
                        return [2 /*return*/, {
                                trade: new debridge_cross_chain_trade_1.DebridgeCrossChainTrade({
                                    from: from,
                                    to: to,
                                    transactionRequest: __assign(__assign({}, requestParams), { dstChainTokenOutRecipient: fromAddress }),
                                    gasData: gasData,
                                    // @TODO price impact
                                    priceImpact: 0,
                                    slippage: options.slippageTolerance,
                                    feeInfo: __assign(__assign({}, feeInfo), { cryptoFee: {
                                            amount: core_1.Web3Pure.fromWei(cryptoFeeAmount),
                                            tokenSymbol: native_tokens_1.nativeTokensList[fromBlockchain].symbol
                                        } }),
                                    transitAmount: core_1.Web3Pure.fromWei(transitToken.amount, transitToken.decimals),
                                    cryptoFeeToken: cryptoFeeToken
                                }, options.providerAddress)
                            }];
                    case 9:
                        err_1 = _c.sent();
                        rubicSdkError = cross_chain_trade_provider_1.CrossChainTradeProvider.parseError(err_1);
                        return [2 /*return*/, {
                                trade: null,
                                error: rubicSdkError
                            }];
                    case 10: return [2 /*return*/];
                }
            });
        });
    };
    DebridgeCrossChainTradeProvider.prototype.checkContractState = function (fromBlockchain) {
        return __awaiter(this, void 0, void 0, function () {
            var web3PublicService, isPaused;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        web3PublicService = injector_1.Injector.web3PublicService.getWeb3Public(fromBlockchain);
                        return [4 /*yield*/, web3PublicService.callContractMethod(contract_address_1.DE_BRIDGE_CONTRACT_ADDRESS[fromBlockchain].rubicRouter, common_cross_chain_abi_1.commonCrossChainAbi, 'paused')];
                    case 1:
                        isPaused = _a.sent();
                        if (isPaused) {
                            throw new common_1.CrossChainIsUnavailableError();
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    DebridgeCrossChainTradeProvider.prototype.getFeeInfo = function (fromBlockchain, providerAddress) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _a = {};
                        _b = {};
                        return [4 /*yield*/, this.getFixedFee(fromBlockchain, providerAddress, contract_address_1.DE_BRIDGE_CONTRACT_ADDRESS[fromBlockchain].rubicRouter, common_cross_chain_abi_1.commonCrossChainAbi)];
                    case 1:
                        _a.fixedFee = (_b.amount = _d.sent(),
                            _b.tokenSymbol = native_tokens_1.nativeTokensList[fromBlockchain].symbol,
                            _b);
                        _c = {};
                        return [4 /*yield*/, this.getFeePercent(fromBlockchain, providerAddress, contract_address_1.DE_BRIDGE_CONTRACT_ADDRESS[fromBlockchain].rubicRouter, common_cross_chain_abi_1.commonCrossChainAbi)];
                    case 2: return [2 /*return*/, (_a.platformFee = (_c.percent = _d.sent(),
                            _c.tokenSymbol = 'USDC',
                            _c),
                            _a.cryptoFee = null,
                            _a)];
                }
            });
        });
    };
    DebridgeCrossChainTradeProvider.apiEndpoint = 'https://deswap.debridge.finance/v1.0/transaction';
    return DebridgeCrossChainTradeProvider;
}(cross_chain_trade_provider_1.CrossChainTradeProvider));
exports.DebridgeCrossChainTradeProvider = DebridgeCrossChainTradeProvider;
//# sourceMappingURL=debridge-cross-chain-trade-provider.js.map