import { CrossChainTradeType } from './models/cross-chain-trade-type';
import { CrossChainStatus } from './models/cross-chain-status';
import { CrossChainTradeData } from './models/cross-chain-trade-data';
/**
 * Contains methods for getting cross-chain trade statuses.
 */
export declare class CrossChainStatusManager {
    private readonly httpClient;
    private readonly getDstTxStatusFnMap;
    /**
     * Returns cross-chain trade statuses on the source and target network.
     * The result consists of the status of the source and target transactions.
     * @example
     * ```ts
     * const tradeData = {
     *   fromBlockchain: BLOCKCHAIN_NAME.FANTOM,
     *   toBlockchain: BLOCKCHAIN_NAME.BSC,
     *   txTimestamp: 1658241570024,
     *   srxTxHash: '0xd2263ca82ac0fce606cb75df27d7f0dc94909d41a58c37563bd6772496cb8924'
     * };
     * const provider = CROSS_CHAIN_TRADE_TYPE.CELER;
     * const crossChainStatus = await sdk.crossChainStatusManager.getCrossChainStatus(tradeData, provider);
     * console.log('Source transaction status', crossChainStatus.srcTxStatus);
     * console.log('Destination transaction status', crossChainStatus.dstTxStatus);
     * ```
     * @param data Data needed to calculate statuses.
     * @param provider Cross-chain trade type.
     * @returns Object with transaction statuses.
     */
    getCrossChainStatus(data: CrossChainTradeData, provider: CrossChainTradeType): Promise<CrossChainStatus>;
    /**
     * Get cross-chain trade's source transaction status via receipt.
     * @param srcTxReceipt Transaction receipt.
     * @returns Cross-chain transaction status.
     */
    private getSrcTxStatus;
    /**
     * Get destination transaction status based on source transaction status,
     * source transaction receipt, trade data and provider type.
     * @param srcTxStatus Source transaction status.
     * @param srcTxReceipt Source transaction receipt.
     * @param tradeData Trade data.
     * @param provider Cross-chain trade type.
     * @returns Cross-chain transaction status.
     */
    private getDstTxStatus;
    /**
     * Get Symbiosis trade dst transaction status.
     * @param data Trade data.
     * @param srcTxReceipt Source transaction receipt.
     * @returns Cross-chain transaction status.
     */
    private getSymbiosisDstSwapStatus;
    /**
     * Get Li-fi trade dst transaction status.
     * @param data Trade data.
     * @param srcTxReceipt Source transaction receipt.
     * @returns Cross-chain transaction status.
     */
    private getLifiDstSwapStatus;
    /**
     * Get Celer trade dst transaction status.
     * @param data Trade data.
     * @param srcTxReceipt Source transaction receipt.
     * @returns Cross-chain transaction status.
     */
    private getCelerDstSwapStatus;
    /**
     * Get Rubic trade dst transaction status.
     * @param data Trade data.
     * @param srcTxReceipt Source transaction receipt.
     * @returns Cross-chain transaction status.
     */
    private getRubicDstSwapStatus;
    /**
     * Get transaction receipt.
     * @param blockchain Blockchain name.
     * @param txHash Transaction hash.
     * @returns Transaction receipt.
     */
    private getTxReceipt;
    /**
     * Get DeBridge trade dst transaction status.
     * @param _data Trade data.
     * @param srcTxReceipt Source transaction receipt.
     * @returns Cross-chain transaction status.
     */
    private getDebridgeDstSwapStatus;
    /**
     * Get Via trade dst transaction status.
     * @param data Trade data.
     * @param _srcTxReceipt Source transaction receipt.
     * @returns Cross-chain transaction status.
     */
    private getViaDstSwapStatus;
    /**
     * @internal
     * Get transaction status in bitcoin network;
     * @param hash Bitcoin transaction hash.
     */
    private getBitcoinStatus;
}
