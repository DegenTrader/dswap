"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CrossChainSymbiosisManager = void 0;
var symbiosis_js_sdk_1 = require("symbiosis-js-sdk");
var symbiosis_config_1 = require("./providers/symbiosis-trade-provider/constants/symbiosis-config");
var injector_1 = require("../../core/sdk/injector");
var bignumber_js_1 = __importDefault(require("bignumber.js"));
var common_1 = require("../../common");
var core_1 = require("../../core");
var CrossChainSymbiosisManager = /** @class */ (function () {
    function CrossChainSymbiosisManager() {
        this.symbiosis = new symbiosis_js_sdk_1.Symbiosis((0, symbiosis_config_1.getSymbiosisConfig)(), 'rubic');
    }
    Object.defineProperty(CrossChainSymbiosisManager.prototype, "walletAddress", {
        get: function () {
            return injector_1.Injector.web3Private.address;
        },
        enumerable: false,
        configurable: true
    });
    CrossChainSymbiosisManager.prototype.getUserTrades = function (fromAddress) {
        fromAddress || (fromAddress = this.walletAddress);
        if (!fromAddress) {
            throw new common_1.RubicSdkError('`fromAddress` parameter or wallet address must not be empty');
        }
        return this.symbiosis.getPendingRequests(fromAddress);
    };
    /**
     * Waiting for symbiosis trade to complete.
     * @param fromBlockchain Trade from blockchain.
     * @param toBlockchain Trade to blockchain.
     * @param toToken Trade to toke.
     * @param receipt Transaction receipt.
     * @returns Promise<EthersLog>
     */
    CrossChainSymbiosisManager.prototype.waitForComplete = function (fromBlockchain, toBlockchain, toToken, receipt) {
        return __awaiter(this, void 0, void 0, function () {
            var fromChainId, toChainId, tokenOut;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        fromChainId = core_1.BlockchainsInfo.getBlockchainByName(fromBlockchain).id;
                        toChainId = core_1.BlockchainsInfo.getBlockchainByName(toBlockchain).id;
                        tokenOut = new symbiosis_js_sdk_1.Token({
                            chainId: toChainId,
                            address: toToken.isNative ? '' : toToken.address,
                            decimals: toToken.decimals,
                            isNative: toToken.isNative
                        });
                        return [4 /*yield*/, new symbiosis_js_sdk_1.WaitForComplete({
                                direction: this.getDirection(fromChainId, toChainId),
                                symbiosis: this.symbiosis,
                                revertableAddress: this.walletAddress,
                                tokenOut: tokenOut,
                                chainIdIn: fromChainId
                            }).waitForComplete(receipt)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    CrossChainSymbiosisManager.prototype.revertTrade = function (revertTransactionHash, options) {
        var _a;
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var pendingRequest, request, transactionRequest, onConfirm, gasLimit, gasPrice, onTransactionHash;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.getUserTrades()];
                    case 1:
                        pendingRequest = _b.sent();
                        request = pendingRequest.find(function (pendingRequest) {
                            return pendingRequest.transactionHash.toLowerCase() === revertTransactionHash.toLowerCase();
                        });
                        if (!request) {
                            throw new common_1.RubicSdkError('No request with provided transaction hash');
                        }
                        return [4 /*yield*/, this.symbiosis.newRevertPending(request).revert()];
                    case 2:
                        transactionRequest = (_b.sent()).transactionRequest;
                        onConfirm = options.onConfirm, gasLimit = options.gasLimit, gasPrice = options.gasPrice;
                        onTransactionHash = function (hash) {
                            if (onConfirm) {
                                onConfirm(hash);
                            }
                        };
                        return [2 /*return*/, injector_1.Injector.web3Private.trySendTransaction(transactionRequest.to, new bignumber_js_1.default(((_a = transactionRequest.value) === null || _a === void 0 ? void 0 : _a.toString()) || 0), {
                                data: transactionRequest.data.toString(),
                                onTransactionHash: onTransactionHash,
                                gas: gasLimit,
                                gasPrice: gasPrice
                            })];
                }
            });
        });
    };
    CrossChainSymbiosisManager.prototype.getDirection = function (chainIdIn, chainIdOut) {
        var indexIn = symbiosis_js_sdk_1.CHAINS_PRIORITY.indexOf(chainIdIn);
        var indexOut = symbiosis_js_sdk_1.CHAINS_PRIORITY.indexOf(chainIdOut);
        return indexIn > indexOut ? 'burn' : 'mint';
    };
    return CrossChainSymbiosisManager;
}());
exports.CrossChainSymbiosisManager = CrossChainSymbiosisManager;
//# sourceMappingURL=cross-chain-symbiosis-manager.js.map