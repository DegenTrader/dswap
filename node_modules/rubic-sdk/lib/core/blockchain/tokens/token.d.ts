import { BlockchainName } from "../models/blockchain-name";
import { TokenBaseStruct } from "../models/token-base-struct";
export declare type TokenStruct = {
    blockchain: BlockchainName;
    address: string;
    name: string;
    symbol: string;
    decimals: number;
};
/**
 * Contains main token's fields.
 */
export declare class Token {
    /**
     * Creates Token based on token's address and blockchain.
     * @param tokenBaseStruct Base token structure.
     */
    static createToken(tokenBaseStruct: TokenBaseStruct): Promise<Token>;
    /**
     * Creates array of Tokens based on tokens' addresses and blockchain.
     */
    static createTokens(tokensAddresses: string[] | ReadonlyArray<string>, blockchain: BlockchainName): Promise<Token[]>;
    /**
     * Maps provided tokens to their addresses.
     */
    static tokensToAddresses(tokens: Token[]): string[];
    readonly blockchain: BlockchainName;
    readonly address: string;
    readonly name: string;
    readonly symbol: string;
    readonly decimals: number;
    get isNative(): boolean;
    constructor(tokenStruct: TokenStruct);
    isEqualTo(token: TokenBaseStruct): boolean;
    isEqualToTokens(tokens: TokenBaseStruct[]): boolean;
    clone(tokenStruct?: Partial<TokenStruct>): Token;
}
