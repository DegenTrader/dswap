"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PriceToken = void 0;
var token_1 = require("./token");
var injector_1 = require("../../sdk/injector");
var bignumber_js_1 = __importDefault(require("bignumber.js"));
/**
 * Contains token structure with price in usd per 1 unit.
 */
var PriceToken = /** @class */ (function (_super) {
    __extends(PriceToken, _super);
    function PriceToken(tokenStruct) {
        var _this = _super.call(this, tokenStruct) || this;
        _this._price = tokenStruct.price;
        return _this;
    }
    /**
     * Creates PriceToken based on token's address and blockchain.
     * @param tokenBaseStruct Base token structure.
     */
    PriceToken.createToken = function (tokenBaseStruct) {
        return __awaiter(this, void 0, void 0, function () {
            var coingeckoApi, tokenPromise, pricePromise, results;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        coingeckoApi = injector_1.Injector.coingeckoApi;
                        tokenPromise = _super.createToken.call(this, tokenBaseStruct);
                        pricePromise = coingeckoApi
                            .getTokenPrice(tokenBaseStruct)
                            .catch(function (_err) { return new bignumber_js_1.default(NaN); });
                        return [4 /*yield*/, Promise.all([tokenPromise, pricePromise])];
                    case 1:
                        results = _a.sent();
                        return [2 /*return*/, new PriceToken(__assign(__assign({}, results[0]), { price: results[1] }))];
                }
            });
        });
    };
    /**
     * Creates PriceToken, fetching token's price.
     * @param token Token structure.
     */
    PriceToken.createFromToken = function (token) {
        return __awaiter(this, void 0, void 0, function () {
            var coingeckoApi, price;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        coingeckoApi = injector_1.Injector.coingeckoApi;
                        return [4 /*yield*/, coingeckoApi.getTokenPrice(token).catch(function (_err) { return new bignumber_js_1.default(NaN); })];
                    case 1:
                        price = _a.sent();
                        return [2 /*return*/, new PriceToken(__assign(__assign({}, token), { price: price }))];
                }
            });
        });
    };
    Object.defineProperty(PriceToken.prototype, "price", {
        get: function () {
            return this._price;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PriceToken.prototype, "asStruct", {
        /**
         * Serializes priceToken and its price to struct object.
         */
        get: function () {
            return __assign(__assign({}, this), { price: this.price });
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Fetches current token price and saves it into token.
     */
    PriceToken.prototype.getAndUpdateTokenPrice = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.updateTokenPrice()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, this.price];
                }
            });
        });
    };
    PriceToken.prototype.updateTokenPrice = function () {
        return __awaiter(this, void 0, void 0, function () {
            var coingeckoApi, _a;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        coingeckoApi = injector_1.Injector.coingeckoApi;
                        _a = this;
                        return [4 /*yield*/, coingeckoApi.getTokenPrice(__assign({}, this)).catch(function (_err) { return _this._price; })];
                    case 1:
                        _a._price = _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Clones token with fetching new price.
     */
    PriceToken.prototype.cloneAndCreate = function (tokenStruct) {
        return __awaiter(this, void 0, void 0, function () {
            var coingeckoApi, price;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        coingeckoApi = injector_1.Injector.coingeckoApi;
                        return [4 /*yield*/, coingeckoApi.getTokenPrice(this).catch(function (_err) { return _this._price; })];
                    case 1:
                        price = _a.sent();
                        return [2 /*return*/, new PriceToken(__assign(__assign(__assign({}, this.asStruct), { price: price }), tokenStruct))];
                }
            });
        });
    };
    PriceToken.prototype.clone = function (tokenStruct) {
        return new PriceToken(__assign(__assign({}, this), tokenStruct));
    };
    return PriceToken;
}(token_1.Token));
exports.PriceToken = PriceToken;
//# sourceMappingURL=price-token.js.map