"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionRevertedError = exports.UserRejectError = exports.HealthcheckError = exports.LowGasError = exports.MaxGasPriceOverflowError = exports.InsufficientFundsGasPriceValueError = exports.CrossChainIsUnavailableError = exports.WrongChainIdError = exports.WrongNetworkError = exports.WalletNotConnectedError = exports.UnnecessaryApproveError = exports.NotSupportedBlockchain = exports.LowSlippageDeflationaryTokenError = exports.LowSlippageError = exports.InsufficientLiquidityError = exports.InsufficientFundsOneinchError = exports.InsufficientFundsError = exports.FailedToCheckForTransactionReceiptError = exports.RubicSdkError = void 0;
var rubic_sdk_error_1 = require("./rubic-sdk.error");
Object.defineProperty(exports, "RubicSdkError", { enumerable: true, get: function () { return rubic_sdk_error_1.RubicSdkError; } });
var failed_to_check_for_transaction_receipt_error_1 = require("./swap/failed-to-check-for-transaction-receipt.error");
Object.defineProperty(exports, "FailedToCheckForTransactionReceiptError", { enumerable: true, get: function () { return failed_to_check_for_transaction_receipt_error_1.FailedToCheckForTransactionReceiptError; } });
var insufficient_funds_error_1 = require("./swap/insufficient-funds.error");
Object.defineProperty(exports, "InsufficientFundsError", { enumerable: true, get: function () { return insufficient_funds_error_1.InsufficientFundsError; } });
var insufficient_funds_oneinch_error_1 = require("./swap/insufficient-funds-oneinch.error");
Object.defineProperty(exports, "InsufficientFundsOneinchError", { enumerable: true, get: function () { return insufficient_funds_oneinch_error_1.InsufficientFundsOneinchError; } });
var insufficient_liquidity_error_1 = require("./swap/insufficient-liquidity.error");
Object.defineProperty(exports, "InsufficientLiquidityError", { enumerable: true, get: function () { return insufficient_liquidity_error_1.InsufficientLiquidityError; } });
var low_slippage_error_1 = require("./swap/low-slippage.error");
Object.defineProperty(exports, "LowSlippageError", { enumerable: true, get: function () { return low_slippage_error_1.LowSlippageError; } });
var low_slippage_deflationary_token_error_1 = require("./swap/low-slippage-deflationary-token.error");
Object.defineProperty(exports, "LowSlippageDeflationaryTokenError", { enumerable: true, get: function () { return low_slippage_deflationary_token_error_1.LowSlippageDeflationaryTokenError; } });
var not_supported_blockchain_1 = require("./swap/not-supported-blockchain");
Object.defineProperty(exports, "NotSupportedBlockchain", { enumerable: true, get: function () { return not_supported_blockchain_1.NotSupportedBlockchain; } });
var unnecessary_approve_error_1 = require("./swap/unnecessary-approve.error");
Object.defineProperty(exports, "UnnecessaryApproveError", { enumerable: true, get: function () { return unnecessary_approve_error_1.UnnecessaryApproveError; } });
var wallet_not_connected_error_1 = require("./swap/wallet-not-connected.error");
Object.defineProperty(exports, "WalletNotConnectedError", { enumerable: true, get: function () { return wallet_not_connected_error_1.WalletNotConnectedError; } });
var wrong_network_error_1 = require("./swap/wrong-network.error");
Object.defineProperty(exports, "WrongNetworkError", { enumerable: true, get: function () { return wrong_network_error_1.WrongNetworkError; } });
var wrong_chain_id_error_1 = require("./provider/wrong-chain-id.error");
Object.defineProperty(exports, "WrongChainIdError", { enumerable: true, get: function () { return wrong_chain_id_error_1.WrongChainIdError; } });
var cross_chain_is_unavailable_error_1 = require("./cross-chain/cross-chain-is-unavailable.error");
Object.defineProperty(exports, "CrossChainIsUnavailableError", { enumerable: true, get: function () { return cross_chain_is_unavailable_error_1.CrossChainIsUnavailableError; } });
var insufficient_funds_gas_price_value_error_1 = require("./cross-chain/insufficient-funds-gas-price-value.error");
Object.defineProperty(exports, "InsufficientFundsGasPriceValueError", { enumerable: true, get: function () { return insufficient_funds_gas_price_value_error_1.InsufficientFundsGasPriceValueError; } });
var max_gas_price_overflow_error_1 = require("./cross-chain/max-gas-price-overflow.error");
Object.defineProperty(exports, "MaxGasPriceOverflowError", { enumerable: true, get: function () { return max_gas_price_overflow_error_1.MaxGasPriceOverflowError; } });
var low_gas_error_1 = require("./blockchain/low-gas.error");
Object.defineProperty(exports, "LowGasError", { enumerable: true, get: function () { return low_gas_error_1.LowGasError; } });
var healthcheck_error_1 = require("./blockchain/healthcheck.error");
Object.defineProperty(exports, "HealthcheckError", { enumerable: true, get: function () { return healthcheck_error_1.HealthcheckError; } });
var user_reject_error_1 = require("./blockchain/user-reject.error");
Object.defineProperty(exports, "UserRejectError", { enumerable: true, get: function () { return user_reject_error_1.UserRejectError; } });
var transaction_reverted_error_1 = require("./blockchain/transaction-reverted.error");
Object.defineProperty(exports, "TransactionRevertedError", { enumerable: true, get: function () { return transaction_reverted_error_1.TransactionRevertedError; } });
//# sourceMappingURL=index.js.map