"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const isomorphic_ws_1 = __importDefault(require("isomorphic-ws"));
const errors_1 = require("./errors");
class Via {
    httpCli;
    apiKey;
    baseURL;
    constructor(config) {
        this.baseURL = config.url || 'https://router-api.via.exchange';
        this.httpCli = axios_1.default.create({
            baseURL: this.baseURL,
            timeout: config.timeout || 30 * 1000,
        });
        this.apiKey = config.apiKey;
    }
    getRoutesViaWs(params) {
        const buildURLQuery = (obj) => Object.entries(obj)
            .map((pair) => pair.map(encodeURIComponent).join('='))
            .join('&');
        const urlParams = buildURLQuery(params);
        const urlInfo = new URL(this.baseURL);
        const wsProtocol = urlInfo.protocol === 'https:' ? 'wss:' : 'ws:';
        const ws = new isomorphic_ws_1.default(`${wsProtocol}//${urlInfo.host}/api/v1/routes/ws?${urlParams}`);
        return ws;
    }
    async getRoutes(params) {
        try {
            const res = await this.httpCli.get('/api/v1/routes', {
                params: { apiKey: this.apiKey, ...params },
            });
            return res.data;
        }
        catch (e) {
            if (axios_1.default.isAxiosError(e)) {
                throw new errors_1.ViaError(e.response?.status, e.response?.data?.message);
            }
            else {
                throw e;
            }
        }
    }
    async getAllowanceStatus(params) {
        try {
            const res = await this.httpCli.get('/api/v2/approval/check-allowance', {
                params: { apiKey: this.apiKey, ...params },
            });
            return res.data;
        }
        catch (e) {
            if (axios_1.default.isAxiosError(e)) {
                throw new errors_1.ViaError(e.response?.status, e.response?.data?.message);
            }
            else {
                throw e;
            }
        }
    }
    async buildApprovalTx(params) {
        try {
            const res = await this.httpCli.get('/api/v2/approval/build-tx', {
                params: { apiKey: this.apiKey, ...params },
            });
            return res.data;
        }
        catch (e) {
            if (axios_1.default.isAxiosError(e)) {
                throw new errors_1.ViaError(e.response?.status, e.response?.data?.message);
            }
            else {
                throw e;
            }
        }
    }
    async buildTx(params) {
        try {
            const res = await this.httpCli.get('/api/v2/send/build-tx', {
                params: { apiKey: this.apiKey, ...params },
            });
            return res.data;
        }
        catch (e) {
            if (axios_1.default.isAxiosError(e)) {
                throw new errors_1.ViaError(e.response?.status, e.response?.data?.message);
            }
            else {
                throw e;
            }
        }
    }
    async startRoute(params) {
        try {
            const res = await this.httpCli.post('/api/v1/start-route', { apiKey: this.apiKey, ...params });
            return res.data;
        }
        catch (e) {
            if (axios_1.default.isAxiosError(e)) {
                throw new errors_1.ViaError(e.response?.status, e.response?.data?.message);
            }
            else {
                throw e;
            }
        }
    }
    async startAction(params) {
        try {
            const res = await this.httpCli.post('/api/v1/start-action', { apiKey: this.apiKey, ...params });
        }
        catch (e) {
            if (axios_1.default.isAxiosError(e)) {
                throw new errors_1.ViaError(e.response?.status, e.response?.data?.message);
            }
            else {
                throw e;
            }
        }
    }
    async routesPages() {
        try {
            const res = await this.httpCli.get('/api/v1/routes/pages');
            return res.data.pages;
        }
        catch (e) {
            if (axios_1.default.isAxiosError(e)) {
                throw new errors_1.ViaError(e.response?.status, e.response?.data?.message);
            }
            else {
                throw e;
            }
        }
    }
    async checkTx(params) {
        try {
            const res = await this.httpCli.get('/api/v2/tx-status', {
                params: { apiKey: this.apiKey, ...params },
            });
            return res.data;
        }
        catch (e) {
            if (axios_1.default.isAxiosError(e)) {
                throw new errors_1.ViaError(e.response?.status, e.response?.data?.message);
            }
            else {
                throw e;
            }
        }
    }
}
exports.default = Via;
//# sourceMappingURL=Via.js.map