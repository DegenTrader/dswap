"use strict";
/* eslint-disable @typescript-eslint/no-explicit-any */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.unmarshalTypedPackValue = exports.unmarshalPackValue = exports.unmarshalPackList = exports.unmarshalPackStruct = exports.unmarshalPackPrimitive = void 0;
/**
 * Takes a pack primitive value (bool, uint, string or bytes) and convert it to
 * its corresponding JavaScript value (bool, BigNumber, string or Uint8Array).
 */
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const internal_1 = require("../../internal");
const common_1 = require("./common");
const types_1 = require("./types");
const unmarshalPackPrimitive = (type, value) => {
    switch (type) {
        // Booleans
        case types_1.PackPrimitive.Bool:
            return value;
        // Integers
        case types_1.PackPrimitive.U8:
        case types_1.PackPrimitive.U16:
        case types_1.PackPrimitive.U32:
        case types_1.PackPrimitive.U64:
        case types_1.PackPrimitive.U128:
        case types_1.PackPrimitive.U256:
            return new bignumber_js_1.default(value);
        // Strings
        case types_1.PackPrimitive.Str:
            return value;
        // Bytes
        case types_1.PackPrimitive.Bytes:
        case types_1.PackPrimitive.Bytes32:
        case types_1.PackPrimitive.Bytes65:
            return internal_1.utils.fromBase64(value);
    }
    throw new Error(`Unknown pack type '${type}'.`);
};
exports.unmarshalPackPrimitive = unmarshalPackPrimitive;
/**
 * Takes a pack struct and converts it to a JavaScript object.
 */
const unmarshalPackStruct = (type, value) => {
    const struct = {};
    for (const member of type.struct) {
        const keys = Object.keys(member);
        if (keys.length === 0) {
            throw new Error(`Invalid struct member with no entries.`);
        }
        if (keys.length > 1) {
            throw new Error(`Invalid struct member with multiple entries.`);
        }
        const key = Object.keys(member)[0];
        const memberType = member[key];
        if (value && !value.hasOwnProperty(key)) {
            throw new Error(`Missing pack value for key ${key}.`);
        }
        struct[key] = (0, exports.unmarshalPackValue)(memberType, value[key]);
    }
    return struct;
};
exports.unmarshalPackStruct = unmarshalPackStruct;
/**
 * Unmarshals a pack list.
 */
const unmarshalPackList = (type, value) => value.map((element) => (0, exports.unmarshalPackValue)(type.list, element));
exports.unmarshalPackList = unmarshalPackList;
/**
 * Converts the passed-in value to its corresponding JavaScript value based on
 * the passed-in type.
 */
const unmarshalPackValue = (type, value) => {
    if ((0, common_1.isPackListType)(type)) {
        return (0, exports.unmarshalPackList)(type, value);
    }
    else if ((0, common_1.isPackStructType)(type)) {
        return (0, exports.unmarshalPackStruct)(type, value);
    }
    else if (typeof type === "string") {
        if (type === "nil")
            return null;
        return (0, exports.unmarshalPackPrimitive)(type, value);
    }
    let valueString;
    try {
        valueString = JSON.stringify(value);
    }
    catch (_error) {
        valueString = String(value);
    }
    if (valueString.length > 20) {
        valueString = `${valueString.slice(0, 17)}...`;
    }
    throw new Error(`Unknown value type ${String(type)}${!type ? ` for value ${valueString}` : ""}.`);
};
exports.unmarshalPackValue = unmarshalPackValue;
/**
 * Converts a { t, v } pack object, using `t` as a pack type and `v` as a pack
 * value.
 */
const unmarshalTypedPackValue = ({ t, v }) => {
    try {
        return (0, exports.unmarshalPackValue)(t, v);
    }
    catch (error) {
        console.error(error);
        if (error instanceof Error) {
            error.message = `Error unmarshalling typed pack value: ${error.message}`;
            throw error;
        }
        throw new Error(`Error unmarshalling typed pack value: ${internal_1.utils.extractError(error)}`);
    }
};
exports.unmarshalTypedPackValue = unmarshalTypedPackValue;
//# sourceMappingURL=unmarshal.js.map