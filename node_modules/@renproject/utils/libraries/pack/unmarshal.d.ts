import { PackListType, PackPrimitive, PackStructType, PackTypeDefinition, TypedPackValue, Unmarshalled } from "./types";
export declare const unmarshalPackPrimitive: <T extends PackPrimitive = PackPrimitive>(type: T, value: any) => Unmarshalled<T, PackTypeDefinition>;
/**
 * Takes a pack struct and converts it to a JavaScript object.
 */
export declare const unmarshalPackStruct: <T extends PackStructType<{
    [name: string]: PackTypeDefinition;
}[]> = PackStructType<{
    [name: string]: PackTypeDefinition;
}[]>>(type: T, value: object) => any;
/**
 * Unmarshals a pack list.
 */
export declare const unmarshalPackList: <T>(type: PackListType, value: T[]) => any[];
/**
 * Converts the passed-in value to its corresponding JavaScript value based on
 * the passed-in type.
 */
export declare const unmarshalPackValue: <T extends PackTypeDefinition = PackTypeDefinition>(type: T, value: unknown) => any;
/**
 * Converts a { t, v } pack object, using `t` as a pack type and `v` as a pack
 * value.
 */
export declare const unmarshalTypedPackValue: ({ t, v }: TypedPackValue) => any;
//# sourceMappingURL=unmarshal.d.ts.map