/**
 * @file PromiEvent.js
 * @author Fabian Vogelsteller <fabian@ethereum.org>, Samuel Furter <samuel@ethereum.org>
 * 2018
 */
var _a;
/* eslint-disable @typescript-eslint/ban-ts-comment */
/* eslint-disable @typescript-eslint/no-explicit-any */
import { EventEmitter } from "events";
import { EventEmitterTyped } from "../../types/eventEmitter";
/** PromiEvent implementation, modified from the Web3 PromiEvent. */
export class Web3PromiEvent extends EventEmitterTyped {
    /**
     * Sets up the event emitter and the promise, as well as a proxy handler
     * for routing method calls to the promise or event emitter.
     */
    constructor(eventEmitter) {
        super();
        this[_a] = "Promise";
        /**
         * Proxy handler to call the promise or eventEmitter methods
         */
        this.proxyHandler = (target, name) => {
            if (name === "resolve" || name === "reject") {
                // eslint-disable-next-line security/detect-object-injection
                return target[name];
            }
            if (name === "then") {
                return target.promise.then.bind(target.promise);
            }
            if (name === "catch") {
                return target.promise.catch.bind(target.promise);
            }
            if (name === "_cancel") {
                return () => {
                    this._cancelled = true;
                };
            }
            if (name === "_isCancelled") {
                return () => this._cancelled === true;
            }
            if (name === "_resume") {
                return () => {
                    this._cancelled = false;
                };
            }
            // eslint-disable-next-line security/detect-object-injection, @typescript-eslint/no-unsafe-member-access
            if (target.eventEmitter[name]) {
                // eslint-disable-next-line security/detect-object-injection, @typescript-eslint/no-unsafe-member-access
                return target.eventEmitter[name];
            }
            return;
        };
        this.promise = new Promise((resolve, reject) => {
            this.resolve = resolve;
            this.reject = reject;
        });
        this._cancelled = false;
        this.eventEmitter =
            eventEmitter ||
                new EventEmitter();
        return new Proxy(this, {
            // eslint-disable-next-line @typescript-eslint/unbound-method
            get: this.proxyHandler,
        });
    }
}
_a = Symbol.toStringTag;
//# sourceMappingURL=index.js.map