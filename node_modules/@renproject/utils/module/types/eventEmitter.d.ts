import { EventEmitter } from "events";
import { Web3PromiEvent } from "../libraries/promiEvent";
/** Interface for EventEmitter with well-typed events. */
export declare class EventEmitterTyped<EventTypes extends {
    [event: string]: any[];
} = {}> {
    readonly emit: <Event extends keyof EventTypes>(event: Event, ...args: EventTypes[Event]) => boolean;
    readonly removeListener: EventEmitter["removeListener"];
    readonly on: <Event extends keyof EventTypes>(event: Event, callback: (...values: EventTypes[Event]) => void | Promise<void>) => this;
    readonly once: <Event extends keyof EventTypes>(event: Event, callback: (...values: EventTypes[Event]) => void | Promise<void>) => this;
    readonly listenerCount: (event: string | symbol) => number;
}
/** Create a new EventEmitterTyped */
export declare const eventEmitter: <EventTypes extends {
    [event: string]: any[];
} = {}>() => EventEmitterTyped<EventTypes>;
export declare type PromiEvent<T, EventTypes extends {
    [event: string]: any[];
} = {}> = Web3PromiEvent<T, EventTypes> & Promise<T>;
//# sourceMappingURL=eventEmitter.d.ts.map