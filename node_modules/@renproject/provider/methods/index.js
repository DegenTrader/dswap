"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RPCMethod = void 0;
__exportStar(require("./ren_queryBlock"), exports);
__exportStar(require("./ren_queryBlockState"), exports);
__exportStar(require("./ren_queryConfig"), exports);
__exportStar(require("./ren_submitGateway"), exports);
__exportStar(require("./ren_submitTx"), exports);
var RPCMethod;
(function (RPCMethod) {
    // MethodSubmitGateway submits the details of a gateway to the lightnode,
    // used for recovering mints that didn't get submitted to RenVM.
    RPCMethod["SubmitGateway"] = "ren_submitGateway";
    // MethodSubmitTx submits a new transaction to the Darknode for acceptance
    // into the transaction pool.
    RPCMethod["SubmitTx"] = "ren_submitTx";
    // MethodQueryTx returns the latest information about a transaction
    // identified by a transaction hash.
    RPCMethod["QueryTx"] = "ren_queryTx";
    // MethodQueryTxs returns pages of transactions with optional filtering by
    // status and tags.
    RPCMethod["QueryTxs"] = "ren_queryTxs";
    // MethodQueryBlock returns a block identified by the block height.
    RPCMethod["QueryBlock"] = "ren_queryBlock";
    // MethodQueryBlocks returns recently committed blocks.
    RPCMethod["QueryBlocks"] = "ren_queryBlocks";
    // MethodQueryConfig returns the node configuration.
    RPCMethod["QueryConfig"] = "ren_queryConfig";
    // MethodQueryBlockState returns the contract state.
    RPCMethod["QueryBlockState"] = "ren_queryBlockState";
})(RPCMethod = exports.RPCMethod || (exports.RPCMethod = {}));
// The following lines will throw a type error if RenVMResponses or RenVMParams
// aren't defined for all RPC methods.
() => { };
() => { };
//# sourceMappingURL=index.js.map