import { Marshalled, PackPrimitive, PackTypeDefinition, TxStatus, TypedPackValue } from "@renproject/utils";
export declare const burnParamsType: PackTypeDefinition;
export declare const crossChainParamsType: PackTypeDefinition;
export declare type EmptyRPCStruct = TypedPackValue<{
    struct: [];
}, {}>;
export declare type CrossChainParams = TypedPackValue<typeof crossChainParamsType, {
    amount: Marshalled<PackPrimitive.U256>;
    ghash: Marshalled<PackPrimitive.Bytes32>;
    gpubkey: Marshalled<PackPrimitive.Bytes>;
    nhash: Marshalled<PackPrimitive.Bytes32>;
    nonce: Marshalled<PackPrimitive.Bytes32>;
    payload: Marshalled<PackPrimitive.Bytes>;
    phash: Marshalled<PackPrimitive.Bytes32>;
    to: Marshalled<PackPrimitive.Str>;
    txid: Marshalled<PackPrimitive.Bytes>;
    txindex: Marshalled<PackPrimitive.U32>;
}>;
export interface ParamsQueryTxs {
    txStatus?: TxStatus;
    offset?: Marshalled<PackPrimitive.U32>;
    limit?: Marshalled<PackPrimitive.U32>;
    latest?: Marshalled<PackPrimitive.Bool>;
}
export interface TransactionInput<Input extends TypedPackValue = TypedPackValue> {
    hash: string;
    version: string;
    selector: string;
    in: Input;
}
export interface TransactionOutput<Input extends TypedPackValue, Output extends TypedPackValue> extends TransactionInput<Input> {
    out: Output;
}
export interface ParamsSubmitTx<T extends TransactionInput = TransactionInput> {
    tx: T;
}
export interface ParamsQueryTx {
    txHash: string;
}
export interface ResponseSubmitTx {
}
export interface ResponseSubmitGateway {
}
export interface ResponseQueryTx<Input extends TypedPackValue = TypedPackValue, Output extends TypedPackValue = TypedPackValue> {
    tx: {
        version: "0" | "1";
        hash: string;
        selector: string;
        in: Input;
        out: Output;
    };
    txStatus: TxStatus;
}
export interface ResponseQueryTxs {
    txs: Array<ResponseQueryTx["tx"]>;
}
//# sourceMappingURL=ren_submitTx.d.ts.map