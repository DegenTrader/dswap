import { Logger, SyncOrPromise } from "@renproject/utils";
export interface Provider<Requests extends {
    [event: string]: any;
} = {}, Responses extends {
    [event: string]: any;
} = {}> {
    sendMessage<Method extends keyof Requests & string>(method: Method, request: Requests[Method], retry?: number, timeout?: number): SyncOrPromise<Responses[Method]>;
}
/**
 * The JsonRpcProvider class implements the Provider interface by connecting to
 * a JSON-RPC endpoint over http/https.
 */
export declare class JsonRpcProvider<Requests extends {
    [event: string]: any;
} = {}, Responses extends {
    [event: string]: any;
} = {}> implements Provider<Requests, Responses> {
    readonly endpointOrProvider: Provider<Requests, Responses> | string;
    readonly logger: Logger;
    /**
     * Create a new JsonRpcProvider.
     *
     * @param endpointOrProvider A URI for a RenVM JSON-RPC endpoint, or another
     * JsonRpcProvider to forward calls to.
     * @param logger Optionally pass a logger object.
     */
    constructor(endpointOrProvider: Provider<Requests, Responses> | string, logger?: Logger);
    sendMessage: <Method extends keyof Requests & string>(method: Method, request: Requests[Method], retry?: number, timeout?: number) => Promise<Responses[Method]>;
    private readonly responseError;
}
export declare type JSONRPCResponse<T> = {
    jsonrpc: string;
    version: string;
    result: T;
    error: undefined;
    id: number;
} | {
    jsonrpc: string;
    version: string;
    result: undefined;
    error: any;
    id: number;
};
//# sourceMappingURL=jsonRpc.d.ts.map