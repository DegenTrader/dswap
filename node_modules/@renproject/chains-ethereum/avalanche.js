"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Avalanche = void 0;
const utils_1 = require("@renproject/utils");
const base_1 = require("./base");
const generic_1 = require("./utils/generic");
const configMap = {
    [utils_1.RenNetwork.Mainnet]: {
        selector: "Avalanche",
        nativeAsset: { name: "Avalanche", symbol: "AVAX", decimals: 18 },
        averageConfirmationTime: 2,
        config: {
            chainId: "0xa86a",
            chainName: "Avalanche C-Chain",
            nativeCurrency: { name: "Avalanche", symbol: "AVAX", decimals: 18 },
            rpcUrls: [
                "https://api.avax.network/ext/bc/C/rpc",
                "https://rpc.ankr.com/avalanche",
                "https://ava-mainnet.public.blastapi.io/ext/bc/C/rpc",
            ],
            blockExplorerUrls: ["https://snowtrace.io"],
        },
        logRequestLimit: 2048,
        addresses: {
            GatewayRegistry: "0xf36666C230Fa12333579b9Bd6196CB634D6BC506",
            BasicBridge: "0x82DF02A52E2e76C0c233367f2fE6c9cfe51578c5",
        },
    },
    [utils_1.RenNetwork.Testnet]: {
        selector: "Avalanche",
        isTestnet: true,
        nativeAsset: {
            name: "Testnet Avalanche",
            symbol: "AVAX",
            decimals: 18,
        },
        averageConfirmationTime: 2,
        config: {
            chainId: "0xa869",
            chainName: "Avalanche Fuji Testnet",
            nativeCurrency: { name: "Avalanche", symbol: "AVAX", decimals: 18 },
            rpcUrls: ["https://api.avax-test.network/ext/bc/C/rpc"],
            blockExplorerUrls: ["https://testnet.snowtrace.io"],
        },
        logRequestLimit: 2048,
        addresses: {
            GatewayRegistry: "0x5076a1F237531fa4dC8ad99bb68024aB6e1Ff701",
            BasicBridge: "0xcb6bD6B6c7D7415C0157e393Bb2B6Def7555d518",
        },
    },
};
/**
 * Avalanche/AVAX configuration.
 */
class Avalanche extends base_1.EthereumBaseChain {
    constructor(_a) {
        var { network } = _a, params = __rest(_a, ["network"]);
        super(Object.assign(Object.assign({}, params), { network: (0, generic_1.resolveEVMNetworkConfig)(configMap, network) }));
        this.configMap = configMap;
        this.assets = Avalanche.assets;
    }
}
exports.Avalanche = Avalanche;
// Static members.
Avalanche.chain = "Avalanche";
Avalanche.configMap = configMap;
Avalanche.assets = {
    AVAX: "AVAX",
};
//# sourceMappingURL=avalanche.js.map