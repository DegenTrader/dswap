"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.approvalPayloadHandler = void 0;
const utils_1 = require("@renproject/utils");
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const contracts_1 = require("../../contracts");
const evmContractPayload_1 = require("./evmContractPayload");
const evmParams_1 = require("./evmParams");
const resolveEVMApprovalParams = async (payload, evmParams) => {
    return Object.assign(Object.assign({}, payload), { params: Object.assign(Object.assign({}, payload.params), { token: await (0, evmParams_1.replaceRenParam)(payload.params.token, evmParams), spender: await (0, evmParams_1.replaceRenParam)(payload.params.spender, evmParams), amount: await (0, evmParams_1.replaceRenParam)(payload.params.amount, evmParams) }) });
};
const getContractFromApproval = async (network, payload, evmParams) => {
    const amount = utils_1.utils.isDefined(payload.params.amount)
        ? new bignumber_js_1.default(payload.params.amount)
            .shiftedBy(payload.params.convertUnit
            ? await evmParams[evmParams_1.EVMParam.EVM_TOKEN_DECIMALS]()
            : 0)
            .toFixed()
        : undefined;
    return {
        chain: network.selector,
        type: "contract",
        params: {
            to: payload.params.token,
            method: "approve",
            params: [
                {
                    type: "address",
                    name: "to",
                    value: payload.params.spender,
                },
                {
                    type: "uint256",
                    name: "amount",
                    value: amount,
                },
            ],
        },
    };
};
exports.approvalPayloadHandler = {
    getSetup: ({ payload }) => payload.setup || {},
    required: async ({ signer, payload, evmParams, }) => {
        payload = await resolveEVMApprovalParams(payload, evmParams);
        const token = payload.params.token;
        if (!signer) {
            return true;
        }
        const erc20Instance = (0, contracts_1.getERC20Instance)(signer, token);
        const account = await signer.getAddress();
        const allowance = new bignumber_js_1.default((await erc20Instance.allowance(account, payload.params.spender)).toString());
        const amount = new bignumber_js_1.default(payload.params.amount).shiftedBy(payload.params.convertUnit
            ? await evmParams[evmParams_1.EVMParam.EVM_TOKEN_DECIMALS]()
            : 0);
        return allowance.lt(amount);
    },
    export: async ({ network, signer, payload, evmParams, overrides, getPayloadHandler, }) => {
        payload = await resolveEVMApprovalParams(payload, evmParams);
        return evmContractPayload_1.contractPayloadHandler.export({
            network,
            signer,
            payload: await getContractFromApproval(network, payload, evmParams),
            evmParams,
            overrides,
            getPayloadHandler,
        });
    },
};
//# sourceMappingURL=evmApprovalPayload.js.map