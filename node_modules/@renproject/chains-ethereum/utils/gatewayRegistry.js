"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLockAsset = exports.getRenAsset = exports.getLockGateway = exports.getMintGateway = void 0;
const utils_1 = require("@renproject/utils");
const contracts_1 = require("../contracts");
const errors_1 = require("./errors");
/**
 * Utilities for fetching gateway contract addresses and token addresses.
 */
/** The equivalent to `address(0x0)` in Solidity. */
const EMPTY_ADDRESS = "0x" + "00".repeat(20);
var GatewayRegistryLookup;
(function (GatewayRegistryLookup) {
    GatewayRegistryLookup["MintGateway"] = "Mint Gateway";
    GatewayRegistryLookup["LockGateway"] = "Lock Gateway";
    GatewayRegistryLookup["RenAsset"] = "Ren Asset";
    GatewayRegistryLookup["LockAsset"] = "Lock Asset";
})(GatewayRegistryLookup || (GatewayRegistryLookup = {}));
const gatewayRegistryMethods = {
    [GatewayRegistryLookup.MintGateway]: "getMintGatewayBySymbol",
    [GatewayRegistryLookup.LockGateway]: "getLockGatewayBySymbol",
    [GatewayRegistryLookup.RenAsset]: "getRenAssetBySymbol",
    [GatewayRegistryLookup.LockAsset]: "getLockAssetBySymbol",
};
const createGatewayRegistryFetcher = (lookup) => async (network, provider, asset) => {
    try {
        const registry = (0, contracts_1.getGatewayRegistryInstance)(provider, network.addresses.GatewayRegistry);
        const registryAddress = utils_1.utils.Ox(await registry[gatewayRegistryMethods[lookup]](asset));
        if (!registryAddress || registryAddress === EMPTY_ADDRESS) {
            throw new utils_1.ErrorWithCode(`${asset} not supported on ${network.selector} - unable to get ${asset} ${lookup}`, errors_1.EVM_ERROR.ASSET_NOT_SUPPORTED);
        }
        return registryAddress;
    }
    catch (error) {
        throw utils_1.ErrorWithCode.updateError(error, errors_1.EVM_ERROR.NETWORK_ERROR, `Error looking up ${asset} ${lookup}`);
    }
};
exports.getMintGateway = createGatewayRegistryFetcher(GatewayRegistryLookup.MintGateway);
exports.getLockGateway = createGatewayRegistryFetcher(GatewayRegistryLookup.LockGateway);
exports.getRenAsset = createGatewayRegistryFetcher(GatewayRegistryLookup.RenAsset);
exports.getLockAsset = createGatewayRegistryFetcher(GatewayRegistryLookup.LockAsset);
//# sourceMappingURL=gatewayRegistry.js.map