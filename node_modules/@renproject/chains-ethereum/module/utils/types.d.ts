import { Provider } from "@ethersproject/providers";
import { ExternalProvider, JsonRpcFetchFunc } from "@ethersproject/providers/lib/web3-provider";
import { Logger, RenNetwork, RenNetworkString } from "@renproject/utils";
import { ethers } from "ethers";
export interface EVMExplorer {
    url: string;
    address: (address: string) => string;
    transaction: (txid: string) => string;
}
/**
 * Returns an EVMExplorer with the format `${url}/address/${address}` and
 * `${url}/tx/${txHash}` for addresses and transactions respectively.
 */
export declare const StandardEVMExplorer: (baseUrl: string) => EVMExplorer;
export interface EIP3085Config {
    /** The integer ID of the chain as a hexadecimal string. */
    chainId: string;
    /** One or more URLs pointing to block explorer web sites for the chain. */
    blockExplorerUrls: string[];
    /** A human-readable name for the chain. */
    chainName: string;
    /**
     * One or more URLs pointing to reasonably sized images that can be used to
     * visually identify the chain.
     */
    iconUrls?: string[];
    /** The native currency of the chain. */
    nativeCurrency: {
        name: string;
        symbol: string;
        decimals: number;
    };
    /**
     * One or more URLs pointing to RPC endpoints that can be used to
     * communicate with the chain. Each chain may define variables that will be
     * replaced using the notation `${VARIABLE_NAME}`, such as
     * `${INFURA_API_KEY}`.
     */
    rpcUrls: string[];
}
export interface EVMNetworkConfig {
    selector: string;
    isTestnet?: boolean;
    logRequestLimit?: number;
    addresses: {
        GatewayRegistry: string;
        BasicBridge: string;
    };
    nativeAsset: {
        name: string;
        symbol: string;
        decimals: number;
    };
    averageConfirmationTime: number;
    config: EIP3085Config;
}
export declare type EVMNetworkInput = RenNetwork | RenNetworkString | EVMNetworkConfig;
export declare type EvmNetworkInput = EVMNetworkInput;
export declare type EthProvider = string | {
    sendAsync?: (request: any, callback: any) => any;
    send?: (request: any, callback: any) => any;
    request?: (request: {
        method: string;
        params?: any[];
    }) => Promise<any>;
} | ExternalProvider | JsonRpcFetchFunc | Provider;
export declare type EthSigner = ethers.Signer;
export interface EthereumClassConfig {
    logger?: Logger;
}
//# sourceMappingURL=types.d.ts.map