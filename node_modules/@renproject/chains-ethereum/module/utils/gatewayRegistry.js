var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { ErrorWithCode, utils } from "@renproject/utils";
import { getGatewayRegistryInstance } from "../contracts";
import { EVM_ERROR } from "./errors";
/**
 * Utilities for fetching gateway contract addresses and token addresses.
 */
/** The equivalent to `address(0x0)` in Solidity. */
const EMPTY_ADDRESS = "0x" + "00".repeat(20);
var GatewayRegistryLookup;
(function (GatewayRegistryLookup) {
    GatewayRegistryLookup["MintGateway"] = "Mint Gateway";
    GatewayRegistryLookup["LockGateway"] = "Lock Gateway";
    GatewayRegistryLookup["RenAsset"] = "Ren Asset";
    GatewayRegistryLookup["LockAsset"] = "Lock Asset";
})(GatewayRegistryLookup || (GatewayRegistryLookup = {}));
const gatewayRegistryMethods = {
    [GatewayRegistryLookup.MintGateway]: "getMintGatewayBySymbol",
    [GatewayRegistryLookup.LockGateway]: "getLockGatewayBySymbol",
    [GatewayRegistryLookup.RenAsset]: "getRenAssetBySymbol",
    [GatewayRegistryLookup.LockAsset]: "getLockAssetBySymbol",
};
const createGatewayRegistryFetcher = (lookup) => (network, provider, asset) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const registry = getGatewayRegistryInstance(provider, network.addresses.GatewayRegistry);
        const registryAddress = utils.Ox(yield registry[gatewayRegistryMethods[lookup]](asset));
        if (!registryAddress || registryAddress === EMPTY_ADDRESS) {
            throw new ErrorWithCode(`${asset} not supported on ${network.selector} - unable to get ${asset} ${lookup}`, EVM_ERROR.ASSET_NOT_SUPPORTED);
        }
        return registryAddress;
    }
    catch (error) {
        throw ErrorWithCode.updateError(error, EVM_ERROR.NETWORK_ERROR, `Error looking up ${asset} ${lookup}`);
    }
});
export const getMintGateway = createGatewayRegistryFetcher(GatewayRegistryLookup.MintGateway);
export const getLockGateway = createGatewayRegistryFetcher(GatewayRegistryLookup.LockGateway);
export const getRenAsset = createGatewayRegistryFetcher(GatewayRegistryLookup.RenAsset);
export const getLockAsset = createGatewayRegistryFetcher(GatewayRegistryLookup.LockAsset);
//# sourceMappingURL=gatewayRegistry.js.map