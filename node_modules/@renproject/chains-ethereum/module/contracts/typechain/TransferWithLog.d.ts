import { BaseContract, BigNumber, BytesLike, CallOverrides, ContractTransaction, PayableOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import { EventFragment, FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { OnEvent, TypedEvent, TypedEventFilter, TypedListener } from "./common";
export interface TransferWithLogInterface extends utils.Interface {
    functions: {
        "NAME()": FunctionFragment;
        "transferWithLog(address)": FunctionFragment;
    };
    encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
    encodeFunctionData(functionFragment: "transferWithLog", values: [string]): string;
    decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferWithLog", data: BytesLike): Result;
    events: {
        "LogTransferred(address,address,uint256)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "LogTransferred"): EventFragment;
}
export declare type LogTransferredEvent = TypedEvent<[
    string,
    string,
    BigNumber
], {
    from: string;
    to: string;
    amount: BigNumber;
}>;
export declare type LogTransferredEventFilter = TypedEventFilter<LogTransferredEvent>;
export interface TransferWithLog extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: TransferWithLogInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        NAME(overrides?: CallOverrides): Promise<[string]>;
        transferWithLog(to: string, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
    };
    NAME(overrides?: CallOverrides): Promise<string>;
    transferWithLog(to: string, overrides?: PayableOverrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        NAME(overrides?: CallOverrides): Promise<string>;
        transferWithLog(to: string, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "LogTransferred(address,address,uint256)"(from?: string | null, to?: string | null, amount?: null): LogTransferredEventFilter;
        LogTransferred(from?: string | null, to?: string | null, amount?: null): LogTransferredEventFilter;
    };
    estimateGas: {
        NAME(overrides?: CallOverrides): Promise<BigNumber>;
        transferWithLog(to: string, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        transferWithLog(to: string, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=TransferWithLog.d.ts.map