import { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { OnEvent, TypedEvent, TypedEventFilter, TypedListener } from "./common";
export interface BasicBridgeInterface extends utils.Interface {
    functions: {
        "NAME()": FunctionFragment;
        "burn(string,string,uint256)": FunctionFragment;
        "lock(string,string,string,bytes,uint256)": FunctionFragment;
        "mint(string,address,uint256,bytes32,bytes)": FunctionFragment;
        "registry()": FunctionFragment;
        "release(string,address,uint256,bytes32,bytes)": FunctionFragment;
    };
    encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
    encodeFunctionData(functionFragment: "burn", values: [string, string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "lock", values: [string, string, string, BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "mint", values: [string, string, BigNumberish, BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "registry", values?: undefined): string;
    encodeFunctionData(functionFragment: "release", values: [string, string, BigNumberish, BytesLike, BytesLike]): string;
    decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "release", data: BytesLike): Result;
    events: {};
}
export interface BasicBridge extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: BasicBridgeInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        NAME(overrides?: CallOverrides): Promise<[string]>;
        burn(symbol: string, recipient: string, amount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        lock(symbol: string, recipientAddress: string, recipientChain: string, recipientPayload: BytesLike, amount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        mint(symbol: string, recipient: string, amount: BigNumberish, nHash: BytesLike, sig: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        registry(overrides?: CallOverrides): Promise<[string]>;
        release(symbol: string, recipient: string, amount: BigNumberish, nHash: BytesLike, sig: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
    };
    NAME(overrides?: CallOverrides): Promise<string>;
    burn(symbol: string, recipient: string, amount: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    lock(symbol: string, recipientAddress: string, recipientChain: string, recipientPayload: BytesLike, amount: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    mint(symbol: string, recipient: string, amount: BigNumberish, nHash: BytesLike, sig: BytesLike, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    registry(overrides?: CallOverrides): Promise<string>;
    release(symbol: string, recipient: string, amount: BigNumberish, nHash: BytesLike, sig: BytesLike, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        NAME(overrides?: CallOverrides): Promise<string>;
        burn(symbol: string, recipient: string, amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
        lock(symbol: string, recipientAddress: string, recipientChain: string, recipientPayload: BytesLike, amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
        mint(symbol: string, recipient: string, amount: BigNumberish, nHash: BytesLike, sig: BytesLike, overrides?: CallOverrides): Promise<void>;
        registry(overrides?: CallOverrides): Promise<string>;
        release(symbol: string, recipient: string, amount: BigNumberish, nHash: BytesLike, sig: BytesLike, overrides?: CallOverrides): Promise<void>;
    };
    filters: {};
    estimateGas: {
        NAME(overrides?: CallOverrides): Promise<BigNumber>;
        burn(symbol: string, recipient: string, amount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        lock(symbol: string, recipientAddress: string, recipientChain: string, recipientPayload: BytesLike, amount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        mint(symbol: string, recipient: string, amount: BigNumberish, nHash: BytesLike, sig: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        registry(overrides?: CallOverrides): Promise<BigNumber>;
        release(symbol: string, recipient: string, amount: BigNumberish, nHash: BytesLike, sig: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        burn(symbol: string, recipient: string, amount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        lock(symbol: string, recipientAddress: string, recipientChain: string, recipientPayload: BytesLike, amount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        mint(symbol: string, recipient: string, amount: BigNumberish, nHash: BytesLike, sig: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        release(symbol: string, recipient: string, amount: BigNumberish, nHash: BytesLike, sig: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=BasicBridge.d.ts.map