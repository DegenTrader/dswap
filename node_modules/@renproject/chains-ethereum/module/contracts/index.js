import { Contract } from "ethers";
import { utils } from "@renproject/utils";
import BasicBridgeJSON from "./ABIs/BasicBridge.json";
import ERC20JSON from "./ABIs/ERC20.json";
import GatewayRegistryJSON from "./ABIs/GatewayRegistryV2.json";
import LockGatewayJSON from "./ABIs/LockGatewayV3.json";
import MintGatewayJSON from "./ABIs/MintGatewayV3.json";
import TransferWithLogJSON from "./ABIs/TransferWithLog.json";
export const BasicBridgeABI = BasicBridgeJSON;
export const ERC20ABI = ERC20JSON;
export const GatewayRegistryABI = GatewayRegistryJSON;
export const LockGatewayABI = LockGatewayJSON;
export const MintGatewayABI = MintGatewayJSON;
export const TransferWithLogABI = TransferWithLogJSON;
export const findABIMethod = (abi, name) => {
    const first = abi.filter((item) => item.name === name)[0];
    if (!first) {
        throw new Error(`No ABI entry found for "${name}".`);
    }
    return first;
};
export const getEventTopic = (abiItem) => {
    const parameters = abiItem.inputs && abiItem.inputs.length > 0
        ? abiItem.inputs.map((input) => input.type).join(",")
        : "";
    if (!abiItem.name) {
        throw new Error(`No name found in ABI item (parameters: ${parameters}).`);
    }
    const eventSignature = `${abiItem.name}(${parameters})`;
    return utils.keccak256(utils.fromUTF8String(eventSignature));
};
export const getMintGatewayInstance = (signerOrProvider, address) => new Contract(address, MintGatewayABI, signerOrProvider);
export const getLockGatewayInstance = (signerOrProvider, address) => new Contract(address, LockGatewayABI, signerOrProvider);
export const getGatewayRegistryInstance = (signerOrProvider, address) => new Contract(address, GatewayRegistryABI, signerOrProvider);
export const getERC20Instance = (signerOrProvider, address) => new Contract(address, ERC20ABI, signerOrProvider);
//# sourceMappingURL=index.js.map