var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { RenNetwork } from "@renproject/utils";
import { EthereumBaseChain } from "./base";
import { resolveEVMNetworkConfig } from "./utils/generic";
const configMap = {
    [RenNetwork.Mainnet]: {
        selector: "Optimism",
        nativeAsset: { name: "Optimism Ether", symbol: "oETH", decimals: 18 },
        averageConfirmationTime: 5,
        logRequestLimit: 10000,
        config: {
            chainId: "0xA",
            chainName: "Optimism",
            nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
            rpcUrls: ["https://mainnet.optimism.io/"],
            blockExplorerUrls: ["https://optimistic.etherscan.io"],
        },
        addresses: {
            GatewayRegistry: "0xf36666C230Fa12333579b9Bd6196CB634D6BC506",
            BasicBridge: "0xa3FA9A73D22618FfdF6958Ba6285FB3F565e1443",
        },
    },
    [RenNetwork.Testnet]: {
        selector: "Optimism",
        nativeAsset: { name: "Optimism Ether", symbol: "oETH", decimals: 18 },
        averageConfirmationTime: 5,
        logRequestLimit: 10000,
        config: {
            chainId: "0x45",
            chainName: "Optimism",
            nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
            rpcUrls: ["https://kovan.optimism.io/"],
            blockExplorerUrls: ["https://kovan-optimistic.etherscan.io"],
        },
        addresses: {
            GatewayRegistry: "0x5076a1F237531fa4dC8ad99bb68024aB6e1Ff701",
            BasicBridge: "0xcb6bD6B6c7D7415C0157e393Bb2B6Def7555d518",
        },
    },
};
export class Optimism extends EthereumBaseChain {
    constructor(_a) {
        var { network } = _a, params = __rest(_a, ["network"]);
        super(Object.assign(Object.assign({}, params), { network: resolveEVMNetworkConfig(configMap, network) }));
        this.configMap = configMap;
        this.assets = Optimism.assets;
    }
}
// Static members.
Optimism.chain = "Optimism";
Optimism.configMap = configMap;
Optimism.assets = {
    oETH: "oETH",
};
//# sourceMappingURL=optimism.js.map