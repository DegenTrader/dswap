var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { RenNetwork } from "@renproject/utils";
import { EthereumBaseChain } from "./base";
import { resolveEVMNetworkConfig } from "./utils/generic";
const configMap = {
    [RenNetwork.Mainnet]: {
        selector: "Catalog",
        nativeAsset: { name: "DCE EVM", symbol: "dceETH", decimals: 18 },
        averageConfirmationTime: 15,
        config: {
            chainId: "0xC30",
            chainName: "Catalog Mainnet",
            nativeCurrency: { name: "DCE EVM", symbol: "dceETH", decimals: 18 },
            rpcUrls: ["https://mainnet.catalog.fi/rpc"],
            blockExplorerUrls: [""],
        },
        addresses: {
            GatewayRegistry: "0x44c2CdaE368F90544A01522C413376fC72ebd4F2",
            BasicBridge: "0x5D952fA25eD90b1151473d57F2B6C6DB568b865d",
        },
    },
    [RenNetwork.Testnet]: {
        selector: "Catalog",
        nativeAsset: { name: "DCE EVM", symbol: "dceETH", decimals: 18 },
        averageConfirmationTime: 15,
        config: {
            chainId: "0x47EE",
            chainName: "Catalog Testnet",
            nativeCurrency: { name: "DCE EVM", symbol: "dceETH", decimals: 18 },
            rpcUrls: ["https://rpc.catalog.fi/testnet"],
            blockExplorerUrls: [""],
        },
        addresses: {
            GatewayRegistry: "0x44c2CdaE368F90544A01522C413376fC72ebd4F2",
            BasicBridge: "0x5D952fA25eD90b1151473d57F2B6C6DB568b865d",
        },
    },
};
/**
 * Catalog configuration.
 */
export class Catalog extends EthereumBaseChain {
    constructor(_a) {
        var { network } = _a, params = __rest(_a, ["network"]);
        super(Object.assign(Object.assign({}, params), { network: resolveEVMNetworkConfig(configMap, network) }));
        this.configMap = configMap;
        this.assets = Catalog.assets;
    }
}
// Static members.
Catalog.chain = "Catalog";
Catalog.configMap = configMap;
Catalog.assets = {};
//# sourceMappingURL=catalog.js.map