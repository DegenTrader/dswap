"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getERC20Instance = exports.getGatewayRegistryInstance = exports.getLockGatewayInstance = exports.getMintGatewayInstance = exports.getEventTopic = exports.findABIMethod = exports.TransferWithLogABI = exports.MintGatewayABI = exports.LockGatewayABI = exports.GatewayRegistryABI = exports.ERC20ABI = exports.BasicBridgeABI = void 0;
const ethers_1 = require("ethers");
const utils_1 = require("@renproject/utils");
const BasicBridge_json_1 = __importDefault(require("./ABIs/BasicBridge.json"));
const ERC20_json_1 = __importDefault(require("./ABIs/ERC20.json"));
const GatewayRegistryV2_json_1 = __importDefault(require("./ABIs/GatewayRegistryV2.json"));
const LockGatewayV3_json_1 = __importDefault(require("./ABIs/LockGatewayV3.json"));
const MintGatewayV3_json_1 = __importDefault(require("./ABIs/MintGatewayV3.json"));
const TransferWithLog_json_1 = __importDefault(require("./ABIs/TransferWithLog.json"));
exports.BasicBridgeABI = BasicBridge_json_1.default;
exports.ERC20ABI = ERC20_json_1.default;
exports.GatewayRegistryABI = GatewayRegistryV2_json_1.default;
exports.LockGatewayABI = LockGatewayV3_json_1.default;
exports.MintGatewayABI = MintGatewayV3_json_1.default;
exports.TransferWithLogABI = TransferWithLog_json_1.default;
const findABIMethod = (abi, name) => {
    const first = abi.filter((item) => item.name === name)[0];
    if (!first) {
        throw new Error(`No ABI entry found for "${name}".`);
    }
    return first;
};
exports.findABIMethod = findABIMethod;
const getEventTopic = (abiItem) => {
    const parameters = abiItem.inputs && abiItem.inputs.length > 0
        ? abiItem.inputs.map((input) => input.type).join(",")
        : "";
    if (!abiItem.name) {
        throw new Error(`No name found in ABI item (parameters: ${parameters}).`);
    }
    const eventSignature = `${abiItem.name}(${parameters})`;
    return utils_1.utils.keccak256(utils_1.utils.fromUTF8String(eventSignature));
};
exports.getEventTopic = getEventTopic;
const getMintGatewayInstance = (signerOrProvider, address) => new ethers_1.Contract(address, exports.MintGatewayABI, signerOrProvider);
exports.getMintGatewayInstance = getMintGatewayInstance;
const getLockGatewayInstance = (signerOrProvider, address) => new ethers_1.Contract(address, exports.LockGatewayABI, signerOrProvider);
exports.getLockGatewayInstance = getLockGatewayInstance;
const getGatewayRegistryInstance = (signerOrProvider, address) => new ethers_1.Contract(address, exports.GatewayRegistryABI, signerOrProvider);
exports.getGatewayRegistryInstance = getGatewayRegistryInstance;
const getERC20Instance = (signerOrProvider, address) => new ethers_1.Contract(address, exports.ERC20ABI, signerOrProvider);
exports.getERC20Instance = getERC20Instance;
//# sourceMappingURL=index.js.map