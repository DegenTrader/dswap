"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Bitcoin = void 0;
const utils_1 = require("@renproject/utils");
const blockchain_1 = require("./APIs/blockchain");
const blockchair_1 = require("./APIs/blockchair");
const blockstream_1 = require("./APIs/blockstream");
const sochain_1 = require("./APIs/sochain");
const base_1 = require("./base");
const utils_2 = require("./utils/utils");
const BitcoinMainnet = {
    label: "Bitcoin",
    selector: "Bitcoin",
    nativeAsset: {
        name: "Bitcoin",
        symbol: "BTC",
        decimals: 8,
    },
    averageConfirmationTime: 60 * 10,
    explorer: (0, utils_2.StandardBitcoinExplorer)("https://live.blockcypher.com/btc/"),
    p2shPrefix: new Uint8Array([0x05]),
    providers: [
        new blockstream_1.Blockstream(),
        new blockchair_1.Blockchair(),
        { api: new sochain_1.SoChain(), priority: 15 },
        { api: new blockchain_1.Blockchain(blockchain_1.BlockchainNetwork.Bitcoin), priority: 20 },
    ],
    // validateAddress: (address: string) =>
    //     validateAddress(address, "BTC", "mainnet"),
};
const BitcoinTestnet = {
    label: "Bitcoin Testnet",
    selector: "Bitcoin",
    nativeAsset: {
        name: "Testnet Bitcoin",
        symbol: "BTC",
        decimals: 8,
    },
    averageConfirmationTime: 60 * 10,
    isTestnet: true,
    explorer: (0, utils_2.StandardBitcoinExplorer)("https://live.blockcypher.com/btc-testnet/"),
    p2shPrefix: new Uint8Array([0xc4]),
    providers: [
        new blockstream_1.Blockstream({ testnet: true }),
        { api: new blockchain_1.Blockchain(blockchain_1.BlockchainNetwork.BitcoinTestnet), priority: 20 },
        // new Blockchair(BlockchairNetwork.BITCOIN_TESTNET),
        // { api: new SoChain(SoChainNetwork.BTCTEST), priority: 15 },
    ],
    // validateAddress: (address: string) =>
    //     validateAddress(address, "BTC", "testnet"),
};
/**
 * The Bitcoin class adds support for the asset BTC.
 */
class Bitcoin extends base_1.BitcoinBaseChain {
    constructor({ network }) {
        super({
            network: (0, utils_2.resolveBitcoinNetworkConfig)(Bitcoin.configMap, network),
        });
        this.configMap = Bitcoin.configMap;
        this.assets = Bitcoin.assets;
    }
}
exports.Bitcoin = Bitcoin;
Bitcoin.chain = "Bitcoin";
Bitcoin.configMap = {
    [utils_1.RenNetwork.Mainnet]: BitcoinMainnet,
    [utils_1.RenNetwork.Testnet]: BitcoinTestnet,
    [utils_1.RenNetwork.Devnet]: BitcoinTestnet,
};
Bitcoin.assets = {
    BTC: "BTC",
};
//# sourceMappingURL=bitcoin.js.map