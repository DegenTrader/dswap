"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Blockstream = void 0;
const utils_1 = require("@renproject/utils");
const API_1 = require("./API");
class Blockstream {
    constructor({ testnet = false, apiKey = undefined } = {}) {
        this.getAPIUrl = (path) => {
            return `https://blockstream.info/${this.testnet ? "testnet/" : ""}api${path}${this.apiKey ? `?key=${this.apiKey}` : ""}`;
        };
        this.fetchHeight = async () => {
            return (await utils_1.utils.GET(this.getAPIUrl(`/blocks/tip/height`))).toString();
        };
        this.fetchUTXO = async (txid, txindex) => {
            const utxo = await utils_1.utils.GET(this.getAPIUrl(`/tx/${txid}`));
            return {
                txid,
                amount: utxo.vout[parseInt(txindex, 10)].value.toString(),
                txindex,
                height: utxo.status.confirmed
                    ? utxo.status.block_height.toString()
                    : null,
            };
        };
        this.fetchUTXOs = async (address) => {
            const response = await utils_1.utils.GET(this.getAPIUrl(`/address/${address}/utxo`));
            return response
                .map((utxo) => ({
                txid: utxo.txid,
                amount: utxo.value.toString(),
                txindex: utxo.vout.toString(),
                height: utxo.status.confirmed
                    ? utxo.status.block_height.toString()
                    : null,
            }))
                .sort(API_1.sortUTXOs);
        };
        this.fetchTXs = async (address) => {
            const response = await utils_1.utils.GET(this.getAPIUrl(`/address/${address}/txs`));
            const received = [];
            for (const tx of response) {
                for (let i = 0; i < tx.vout.length; i++) {
                    const vout = tx.vout[i];
                    if (vout.scriptpubkey_address === address) {
                        received.push({
                            txid: tx.txid,
                            amount: vout.value.toString(),
                            txindex: i.toString(),
                            height: tx.status.confirmed
                                ? tx.status.block_height.toString()
                                : null,
                        });
                    }
                }
            }
            return received.sort(API_1.sortUTXOs);
        };
        this.broadcastTransaction = async (txHex) => {
            const response = await utils_1.utils.POST(this.getAPIUrl(`/tx`), txHex);
            return response;
        };
        this.testnet = testnet;
        this.apiKey = apiKey;
    }
}
exports.Blockstream = Blockstream;
//# sourceMappingURL=blockstream.js.map