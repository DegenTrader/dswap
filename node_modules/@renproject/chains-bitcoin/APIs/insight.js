"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Insight = void 0;
// import https from "https";
const utils_1 = require("@renproject/utils");
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const API_1 = require("./API");
class Insight {
    constructor(url) {
        this.fetchHeight = async () => {
            return (await utils_1.utils.GET(`${this.url}/sync`)).height.toString();
        };
        this.fetchUTXOs = async (address, confirmations = 0) => {
            const url = `${this.url}/addr/${address}/utxo`;
            const response = await utils_1.utils.GET(url);
            const data = typeof response === "string" ? JSON.parse(response) : response;
            const height = new bignumber_js_1.default(await this.fetchHeight());
            return (await Promise.all(data
                .filter((utxo) => confirmations === 0 ||
                utxo.confirmations >= confirmations)
                .map((utxo) => ({
                txid: utxo.txid,
                txindex: utxo.vout.toString(),
                amount: utils_1.utils.isDefined(utxo.satoshis)
                    ? utxo.satoshis.toString()
                    : utils_1.utils.isDefined(utxo.amount)
                        ? (0, API_1.fixValue)(utxo.amount, 8).toFixed()
                        : undefined,
                height: utxo.confirmations && utxo.confirmations > 0
                    ? height
                        .minus(utxo.confirmations)
                        .plus(1)
                        .toFixed()
                    : null,
            }))
                // If the amount is undefined, fetch the UTXO again.
                // This is due to the DigiByte explorer not returning
                // amounts correctly when fetching UTXOs.
                .map((utxo) => utils_1.utils.isDefined(utxo.amount)
                ? utxo
                : this.fetchUTXO(utxo.txid, utxo.txindex)))).sort(API_1.sortUTXOs);
        };
        this.fetchTXs = async (address) => {
            const url = `${this.url}/txs/?address=${address}`;
            const response = await utils_1.utils.GET(url);
            const data = typeof response === "string" ? JSON.parse(response) : response;
            const received = [];
            for (const tx of data.txs) {
                for (let i = 0; i < tx.vout.length; i++) {
                    const vout = tx.vout[i];
                    if (vout.scriptPubKey.addresses.indexOf(address) >= 0) {
                        received.push({
                            txid: tx.txid,
                            txindex: i.toString(),
                            amount: (0, API_1.fixValue)(parseFloat(vout.value), 8).toFixed(),
                            height: tx.blockheight && tx.blockheight > 0
                                ? tx.blockheight.toString()
                                : null,
                        });
                    }
                }
            }
            return received.sort(API_1.sortUTXOs);
        };
        this.fetchUTXO = async (txid, txindex) => {
            const url = `${this.url}/tx/${txid}`;
            const tx = await utils_1.utils.GET(url);
            return (0, API_1.fixUTXO)({
                txid,
                amount: tx.vout[parseInt(txindex, 10)].value.toString(),
                txindex,
                height: tx.blockheight && tx.blockheight > 0
                    ? tx.blockheight.toString()
                    : null,
            }, 8);
        };
        this.broadcastTransaction = async (txHex) => {
            const url = `${this.url}/tx/send`;
            const response = await utils_1.utils.POST(url, { rawtx: txHex });
            if (response.error) {
                throw new Error(response.error);
            }
            return response.txid;
        };
        this.url = url.replace(/\/$/, "");
    }
}
exports.Insight = Insight;
//# sourceMappingURL=insight.js.map