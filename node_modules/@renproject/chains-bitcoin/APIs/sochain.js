"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SoChain = exports.SoChainNetwork = void 0;
const utils_1 = require("@renproject/utils");
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const API_1 = require("./API");
var SoChainNetwork;
(function (SoChainNetwork) {
    SoChainNetwork["BTC"] = "BTC";
    SoChainNetwork["LTC"] = "LTC";
    SoChainNetwork["ZEC"] = "ZEC";
    SoChainNetwork["DOGE"] = "DOGE";
    SoChainNetwork["DASH"] = "DASH";
    SoChainNetwork["BTCTEST"] = "BTCTEST";
    SoChainNetwork["LTCTEST"] = "LTCTEST";
    SoChainNetwork["ZECTEST"] = "ZECTEST";
    SoChainNetwork["DOGETEST"] = "DOGETEST";
    SoChainNetwork["DASHTEST"] = "DASHTEST";
})(SoChainNetwork = exports.SoChainNetwork || (exports.SoChainNetwork = {}));
class SoChain {
    constructor(network = SoChainNetwork.BTC) {
        this.fetchHeight = async () => {
            return (await utils_1.utils.GET(`https://sochain.com/api/v2/get_info/${this.network}`)).data.blocks.toString();
        };
        this.fetchUTXO = async (txid, txindex) => {
            const url = `https://sochain.com/api/v2/get_tx/${this.network}/${txid}`;
            const response = await utils_1.utils.GET(url);
            const tx = response.data;
            const height = new bignumber_js_1.default(await this.fetchHeight());
            return (0, API_1.fixUTXO)({
                txid: tx.txid,
                amount: tx.outputs[parseInt(txindex, 10)].value.toString(),
                txindex: txindex,
                height: tx.confirmations && tx.confirmations > 0
                    ? height.minus(tx.confirmations).plus(1).toFixed()
                    : null,
            }, 8);
        };
        this.fetchUTXOs = async (address) => {
            const url = `https://sochain.com/api/v2/get_tx_unspent/${this.network}/${address}/${0}`;
            const response = await utils_1.utils.GET(url);
            const height = new bignumber_js_1.default(await this.fetchHeight());
            return (0, API_1.fixUTXOs)(response.data.txs.map((utxo) => ({
                txid: utxo.txid,
                txindex: utxo.output_no.toString(),
                amount: utxo.value.toString(),
                height: utxo.confirmations && utxo.confirmations > 0
                    ? height.minus(utxo.confirmations).plus(1).toFixed()
                    : null,
            })), 8).sort(API_1.sortUTXOs);
        };
        this.fetchTXs = async (address) => {
            const url = `https://sochain.com/api/v2/get_tx_received/${this.network}/${address}/${0}`;
            const response = await utils_1.utils.GET(url);
            const height = new bignumber_js_1.default(await this.fetchHeight());
            return (0, API_1.fixUTXOs)(response.data.txs.map((utxo) => ({
                txid: utxo.txid,
                amount: utxo.value.toString(),
                // scriptPubKey: utxo.script_hex,
                txindex: utxo.output_no.toString(),
                height: utxo.confirmations && utxo.confirmations > 0
                    ? height.minus(utxo.confirmations).plus(1).toFixed()
                    : null,
            })), 8).sort(API_1.sortUTXOs);
        };
        this.broadcastTransaction = async (txHex) => {
            const response = await utils_1.utils.POST(`https://sochain.com/api/v2/send_tx/${this.network}`, {
                tx_hex: txHex,
            });
            return response.data.txid;
        };
        this.network = network;
    }
}
exports.SoChain = SoChain;
//# sourceMappingURL=sochain.js.map