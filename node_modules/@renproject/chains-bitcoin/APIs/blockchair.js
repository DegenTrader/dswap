"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Blockchair = exports.BlockchairNetwork = void 0;
const utils_1 = require("@renproject/utils");
const API_1 = require("./API");
var BlockchairNetwork;
(function (BlockchairNetwork) {
    BlockchairNetwork["BITCOIN"] = "bitcoin";
    BlockchairNetwork["BITCOIN_CASH"] = "bitcoin-cash";
    BlockchairNetwork["DOGECOIN"] = "dogecoin";
    BlockchairNetwork["ZCASH"] = "zcash";
    // LITECOIN = "litecoin",
    // BITCOIN_SV = "bitcoin-sv",
    // DASH = "dash",
    // GROESTLCOIN = "groestlcoin",
    BlockchairNetwork["BITCOIN_TESTNET"] = "bitcoin/testnet";
})(BlockchairNetwork = exports.BlockchairNetwork || (exports.BlockchairNetwork = {}));
class Blockchair {
    constructor(network = BlockchairNetwork.BITCOIN) {
        this.endpoint = () => {
            return `https://api.blockchair.com/${this.network}`;
        };
        this.fetchHeight = async () => {
            const url = `${this.endpoint()}/stats`;
            const response = await utils_1.utils.GET(`${url}`);
            return response.data.best_block_height.toString();
        };
        this.fetchUTXO = async (txid, txindex) => {
            const url = `${this.endpoint()}/dashboards/transaction/${txid}`;
            const response = await utils_1.utils.GET(`${url}`);
            if (!response.data[txid]) {
                throw new Error(`Transaction not found.`);
            }
            const tx = response.data[txid];
            let latestBlock = response.context.state;
            if (latestBlock === 0) {
                const statsUrl = `${this.endpoint()}/stats`;
                const statsResponse = await utils_1.utils.GET(statsUrl);
                latestBlock = statsResponse.data.blocks - 1;
            }
            return {
                txid: txid,
                txindex: txindex,
                amount: tx.outputs[parseInt(txindex, 10)].value.toString(),
                height: tx.transaction.block_id && tx.transaction.block_id > 0
                    ? tx.transaction.block_id.toString()
                    : null,
            };
        };
        this.fetchUTXOs = async (address) => {
            const url = `${this.endpoint()}/dashboards/address/${address}?limit=0,100`;
            const response = await utils_1.utils.GET(url);
            let latestBlock = response.context.state;
            if (latestBlock === 0) {
                const statsUrl = `${this.endpoint()}/stats`;
                const statsResponse = await utils_1.utils.GET(statsUrl);
                latestBlock = statsResponse.data.blocks - 1;
            }
            return response.data[address].utxo
                .map((utxo) => ({
                txid: utxo.transaction_hash,
                amount: utxo.value.toString(),
                txindex: utxo.index.toString(),
                height: utxo.block_id && utxo.block_id > 0
                    ? utxo.block_id.toString()
                    : null,
            }))
                .sort(API_1.sortUTXOs);
        };
        this.fetchTXs = async (address, limit = 25) => {
            const url = `${this.endpoint()}/dashboards/address/${address}?limit=${limit},0`;
            const response = await utils_1.utils.GET(url);
            // let latestBlock = response.context.state;
            // if (latestBlock === 0) {
            //     const statsUrl = `${this.endpoint()}/stats`;
            //     const statsResponse = (
            //         await utils.GET(statsUrl)
            //     );
            //     latestBlock = statsResponse.data.blocks - 1;
            // }
            const txHashes = response.data[address].transactions;
            let txDetails = {};
            // Fetch in sets of 10
            for (let i = 0; i < Math.ceil(txHashes.length / 10); i++) {
                const txUrl = `${this.endpoint()}/dashboards/transactions/${txHashes
                    .slice(i * 10, (i + 1) * 10)
                    .join(",")}`;
                const txResponse = await utils_1.utils.GET(txUrl);
                txDetails = Object.assign(Object.assign({}, txDetails), txResponse.data);
            }
            const received = [];
            for (const txHash of txHashes) {
                const tx = txDetails[txHash];
                for (let i = 0; i < tx.outputs.length; i++) {
                    const output = tx.outputs[i];
                    if (output.recipient === address) {
                        received.push({
                            txid: tx.transaction.hash,
                            amount: output.value.toString(),
                            txindex: i.toString(),
                            height: output.block_id && output.block_id > 0
                                ? output.block_id.toString()
                                : null,
                        });
                    }
                }
            }
            return received.sort(API_1.sortUTXOs);
        };
        this.broadcastTransaction = async (txHex) => {
            const url = `${this.endpoint()}/push/transaction`;
            const response = await utils_1.utils.POST(url, { data: txHex });
            if (response.data.error) {
                throw new Error(response.data.error);
            }
            return response.data.transaction_hash;
        };
        this.network = network;
    }
}
exports.Blockchair = Blockchair;
//# sourceMappingURL=blockchair.js.map