"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BitcoinDotCom = void 0;
const utils_1 = require("@renproject/utils");
const API_1 = require("./API");
class BitcoinDotCom {
    constructor({ testnet = false } = {}) {
        this.endpoint = () => {
            return this.testnet
                ? "https://trest.bitcoin.com/v2/"
                : "https://rest.bitcoin.com/v2/";
        };
        this.endpointV2 = () => {
            return this.testnet
                ? "https://explorer-tbch.api.bitcoin.com/tbch/v1"
                : "https://explorer.api.bitcoin.com/bch/v1";
        };
        this.fetchHeight = async () => {
            const url = `${this.endpointV2()}/blockchain/getBlockCount`;
            const height = await utils_1.utils.GET(url);
            return height.toString();
        };
        this.fetchUTXO = async (txid, txindex) => {
            const url = `${this.endpointV2()}/tx/${txid}`;
            const utxo = await utils_1.utils.GET(url);
            return (0, API_1.fixUTXO)({
                txid: txid,
                amount: utxo.vout[parseInt(txindex, 10)].value.toString(),
                txindex: txindex,
                height: utxo.blockheight && utxo.blockheight > 0
                    ? utxo.blockheight.toString()
                    : null,
            }, 8);
        };
        this.fetchUTXOs = async (address) => {
            const url = `${this.endpointV2()}/addr/${address}/utxo`;
            const utxos = await utils_1.utils.GET(url);
            return (0, API_1.fixUTXOs)(utxos.map((utxo) => ({
                txid: utxo.txid,
                amount: utxo.amount.toString(),
                txindex: utxo.vout.toString(),
                height: utxo.height && utxo.height > 0
                    ? utxo.height.toString()
                    : null,
            })), 8).sort(API_1.sortUTXOs);
        };
        this.fetchTXs = async (address) => {
            const url = `${this.endpoint().replace(/\/$/, "")}/address/transactions/${address}`;
            const { txs } = await utils_1.utils.GET(url);
            const received = [];
            for (const tx of txs) {
                for (let i = 0; i < tx.vout.length; i++) {
                    const vout = tx.vout[i];
                    if (vout.scriptPubKey.addresses.indexOf(address) >= 0) {
                        received.push({
                            txid: tx.txid,
                            amount: (0, API_1.fixValue)(parseFloat(vout.value), 8).toFixed(),
                            txindex: i.toString(),
                            height: tx.blockheight && tx.blockheight > 0
                                ? tx.blockheight.toString()
                                : null,
                        });
                    }
                }
            }
            return received.sort(API_1.sortUTXOs);
        };
        this.broadcastTransaction = async (hexEncodedTransaction) => {
            const url = `${this.endpoint().replace(/\/$/, "")}/rawtransactions/sendRawTransaction`;
            const response = await utils_1.utils.POST(url, {
                hexes: [hexEncodedTransaction],
            });
            if (response.error) {
                throw new Error(response.error);
            }
            return response[0];
        };
        this.testnet = testnet;
    }
}
exports.BitcoinDotCom = BitcoinDotCom;
//# sourceMappingURL=bitcoinDotCom.js.map