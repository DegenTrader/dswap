"use strict";
// import https from "https";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Blockbook = void 0;
const utils_1 = require("@renproject/utils");
const API_1 = require("./API");
class Blockbook {
    constructor(url) {
        this.fetchHeight = async () => {
            return (await utils_1.utils.GET(`${this.url}`)).bestHeight.toString();
        };
        this.fetchUTXOs = async (address) => {
            const url = `${this.url}/utxo/${address}`;
            const response = await utils_1.utils.GET(url);
            const data = typeof response === "string" ? JSON.parse(response) : response;
            return (await Promise.all(data
                .map((utxo) => ({
                txid: utxo.txid,
                amount: utils_1.utils.isDefined(utxo.satoshis)
                    ? utxo.satoshis.toString()
                    : utils_1.utils.isDefined(utxo.amount)
                        ? (0, API_1.fixValue)(utxo.amount, 8).toFixed()
                        : undefined,
                txindex: utxo.vout.toString(),
                height: utxo.height && utxo.height > 0
                    ? utxo.height.toString()
                    : null,
            }))
                // If the amount is undefined, fetch the UTXO again.
                // This is due to the Digibyte explorer not returning
                // amounts correctly when fetching UTXOs.
                .map((utxo) => utils_1.utils.isDefined(utxo.amount)
                ? utxo
                : this.fetchUTXO(utxo.txid, utxo.txindex)))).sort(API_1.sortUTXOs);
        };
        this.fetchUTXO = async (txid, txindex) => {
            const url = `${this.url}/tx/${txid}`;
            const tx = await utils_1.utils.GET(url);
            return (0, API_1.fixUTXO)({
                txid,
                amount: tx.vout[parseInt(txindex, 10)].value.toString(),
                txindex,
                height: tx.blockheight && tx.blockheight > 0
                    ? tx.blockheight.toString()
                    : null,
            }, 8);
        };
        this.broadcastTransaction = async (txHex) => {
            const url = `${this.url}/tx/send`;
            const response = await utils_1.utils.POST(url, { rawtx: txHex });
            if (response.error) {
                throw new Error(response.error);
            }
            return response.txid;
        };
        this.url = url.replace(/\/$/, "");
    }
}
exports.Blockbook = Blockbook;
//# sourceMappingURL=blockbook.js.map