import { RenNetwork } from "@renproject/utils";
import { isMainnetAddress, isTestnetAddress, isValidAddress, toCashAddress, } from "bchaddrjs";
import bs58 from "bs58";
import { BitcoinDotCom } from "./APIs/bitcoinDotCom";
import { Blockchain, BlockchainNetwork } from "./APIs/blockchain";
import { Blockchair, BlockchairNetwork } from "./APIs/blockchair";
import { BitcoinBaseChain } from "./base";
import { decodeBitcoinCashAddress } from "./utils/bchaddrjs";
import { resolveBitcoinNetworkConfig, StandardBitcoinExplorer, } from "./utils/utils";
const BitcoinCashMainnet = {
    label: "Bitcoin Cash",
    selector: "BitcoinCash",
    nativeAsset: {
        name: "Bitcoin Cash",
        symbol: "BCH",
        decimals: 8,
    },
    averageConfirmationTime: 60 * 10,
    explorer: StandardBitcoinExplorer("https://explorer.bitcoin.com/bch/"),
    p2shPrefix: new Uint8Array([0x05]),
    providers: [
        new Blockchair(BlockchairNetwork.BITCOIN_CASH),
        { api: new BitcoinDotCom(), priority: 15 },
        { api: new Blockchain(BlockchainNetwork.BitcoinCash), priority: 20 },
    ],
};
const BitcoinCashTestnet = {
    label: "Bitcoin Cash Testnet",
    selector: "BitcoinCash",
    nativeAsset: {
        name: "Testnet Bitcoin Cash",
        symbol: "BCH",
        decimals: 8,
    },
    averageConfirmationTime: 60 * 10,
    isTestnet: true,
    explorer: StandardBitcoinExplorer("https://explorer.bitcoin.com/tbch/"),
    p2shPrefix: new Uint8Array([0xc4]),
    providers: [
        new Blockchain(BlockchainNetwork.BitcoinCashTestnet),
        { api: new BitcoinDotCom({ testnet: true }), priority: 15 },
    ],
};
export class BitcoinCash extends BitcoinBaseChain {
    constructor({ network }) {
        super({
            network: resolveBitcoinNetworkConfig(BitcoinCash.configMap, network),
        });
        this.configMap = BitcoinCash.configMap;
        this.assets = BitcoinCash.assets;
        this.validateAddress = (address) => {
            try {
                return (isValidAddress(address) &&
                    (this.network.isTestnet
                        ? isTestnetAddress(address)
                        : isMainnetAddress(address)));
            }
            catch (error) {
                return false;
            }
        };
        this.addressFromBytes = (bytes) => {
            return toCashAddress(bs58.encode(bytes));
        };
        this.addressToBytes = (address) => {
            return decodeBitcoinCashAddress(address);
        };
    }
}
BitcoinCash.chain = "BitcoinCash";
BitcoinCash.configMap = {
    [RenNetwork.Mainnet]: BitcoinCashMainnet,
    [RenNetwork.Testnet]: BitcoinCashTestnet,
    [RenNetwork.Devnet]: BitcoinCashTestnet,
};
BitcoinCash.assets = {
    BCH: "BCH",
};
//# sourceMappingURL=bitcoincash.js.map