import { RenNetwork } from "@renproject/utils";
import BTCValidator from "wallet-address-validator/src/bitcoin_validator";
import { Blockchair, BlockchairNetwork } from "./APIs/blockchair";
import { SoChain, SoChainNetwork } from "./APIs/sochain";
import { BitcoinBaseChain } from "./base";
import { resolveBitcoinNetworkConfig, SoChainExplorer } from "./utils/utils";
const DogecoinMainnet = {
    label: "Dogecoin",
    selector: "Dogecoin",
    nativeAsset: {
        name: "Dogecoin",
        symbol: "DOGE",
        decimals: 8,
    },
    averageConfirmationTime: 60,
    explorer: SoChainExplorer("doge", "DOGE"),
    p2shPrefix: new Uint8Array([0x16]),
    providers: [
        new Blockchair(BlockchairNetwork.DOGECOIN),
        { api: new SoChain(SoChainNetwork.DOGE), priority: 15 },
    ],
    // validateAddress: (address: string) =>
    //     validateAddress(address, "DOGE", "mainnet"),
};
const DogecoinTestnet = {
    label: "Dogecoin Testnet",
    selector: "Dogecoin",
    nativeAsset: {
        name: "Testnet Dogecoin",
        symbol: "DOGE",
        decimals: 8,
    },
    averageConfirmationTime: 60,
    isTestnet: true,
    explorer: SoChainExplorer("testnet/doge", "DOGETEST"),
    p2shPrefix: new Uint8Array([0xc4]),
    providers: [{ api: new SoChain(SoChainNetwork.DOGETEST), priority: 15 }],
    // validateAddress: (address: string) =>
    //     validateAddress(address, "DOGE", "testnet"),
};
export class Dogecoin extends BitcoinBaseChain {
    constructor({ network }) {
        super({
            network: resolveBitcoinNetworkConfig(Dogecoin.configMap, network),
        });
        this.configMap = Dogecoin.configMap;
        this.assets = Dogecoin.assets;
        this.validateAddress = (address) => {
            try {
                const currency = {
                    name: "dogecoin",
                    symbol: "doge",
                    addressTypes: { prod: ["1e", "16"], testnet: ["71", "c4"] },
                    segwitHrp: "invalid",
                    validator: BTCValidator,
                };
                return currency.validator.isValidAddress(address, currency, this.network.isTestnet ? "testnet" : "prod");
            }
            catch (error) {
                return false;
            }
        };
    }
}
Dogecoin.chain = "Dogecoin";
Dogecoin.configMap = {
    [RenNetwork.Mainnet]: DogecoinMainnet,
    [RenNetwork.Testnet]: DogecoinTestnet,
    [RenNetwork.Devnet]: DogecoinTestnet,
};
Dogecoin.assets = {
    DOGE: "DOGE",
};
//# sourceMappingURL=dogecoin.js.map