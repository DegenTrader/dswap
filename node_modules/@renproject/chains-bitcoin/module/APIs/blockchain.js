var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { utils } from "@renproject/utils";
import BigNumber from "bignumber.js";
import qs from "qs";
import { sortUTXOs } from "./API";
export var BlockchainNetwork;
(function (BlockchainNetwork) {
    BlockchainNetwork["Bitcoin"] = "btc";
    BlockchainNetwork["BitcoinCash"] = "bch";
    BlockchainNetwork["BitcoinTestnet"] = "btc-testnet";
    BlockchainNetwork["BitcoinCashTestnet"] = "bch-testnet";
})(BlockchainNetwork || (BlockchainNetwork = {}));
export class Blockchain {
    constructor(network) {
        this.fetchHeight = () => __awaiter(this, void 0, void 0, function* () {
            const statsUrl = `${this.url}/block/best?notx=true`;
            const statsResponse = yield utils.GET(statsUrl);
            return statsResponse.height.toString();
        });
        this.fetchUTXO = (txid, txindex) => __awaiter(this, void 0, void 0, function* () {
            const url = `${this.url}/transaction/${txid}`;
            const response = yield utils.GET(`${url}`);
            return {
                txid: txid,
                txindex: txindex.toString(),
                amount: response.outputs[txindex].value.toString(),
                height: response.block.height
                    ? response.block.height.toString()
                    : null,
            };
        });
        this.fetchUTXOs = (address, confirmations = 0, limit = 25, offset = 0) => __awaiter(this, void 0, void 0, function* () { return this.fetchTXs(address, confirmations, limit, offset, true); });
        this.fetchTXs = (address, _confirmations = 0, limit = 25, offset = 0, onlyUnspent = false) => __awaiter(this, void 0, void 0, function* () {
            const url = `${this.url}/address/${address}/transactions/full?limit=${limit}&offset=${offset}`;
            const response = yield utils.GET(url);
            let latestBlock;
            const received = [];
            for (const tx of response) {
                latestBlock =
                    latestBlock || new BigNumber(yield this.fetchHeight());
                for (let i = 0; i < tx.outputs.length; i++) {
                    const output = tx.outputs[i];
                    if (output.address === address &&
                        // If the onlyUnspent flag is true, check that the tx is unspent.
                        (!onlyUnspent || output.spent === false)) {
                        received.push({
                            txid: tx.txid,
                            amount: output.value.toString(),
                            txindex: i.toString(),
                            height: tx.block.height
                                ? tx.block.height.toString()
                                : null,
                        });
                    }
                }
            }
            return (received
                // .filter(
                //     (utxo) =>
                //         confirmations === 0 || utxo.confirmations >= confirmations,
                // )
                .sort(sortUTXOs));
        });
        this.broadcastTransaction = (txHex) => __awaiter(this, void 0, void 0, function* () {
            if (this.network !== BlockchainNetwork.Bitcoin) {
                throw new Error(`Broadcasting ${this.network} transactions not supported by endpoint.`);
            }
            const url = `https://blockchain.info/pushtx`;
            const response = yield utils.POST(url, qs.stringify({ tx: txHex }), 
            // URL-encoded params
            {
                headers: {
                    "content-type": "application/x-www-form-urlencoded",
                },
            });
            if (typeof response === "object" && response.error) {
                throw new Error(response.error);
            }
            // Check response type.
            return String(response);
        });
        this.network = network;
        this.url = `https://api.blockchain.info/haskoin-store/${network}`;
    }
}
//# sourceMappingURL=blockchain.js.map