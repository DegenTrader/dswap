import BigNumber from "bignumber.js";
export interface UTXO {
    txid: string;
    txindex: string;
    amount: string;
    height: string | null;
}
export interface BitcoinAPI {
    fetchHeight?: () => Promise<string>;
    fetchUTXO?: (txid: string, txindex: string) => Promise<UTXO>;
    fetchUTXOs?: (address: string, confirmations?: number) => Promise<UTXO[]>;
    fetchTXs?: (address: string, confirmations?: number) => Promise<UTXO[]>;
    broadcastTransaction?: (hex: string) => Promise<string>;
}
export declare const DEFAULT_TIMEOUT: number;
/**
 * sortUTXOs compares two UTXOs by height, then amount, then txid, then txindex.
 *
 * @returns a negative value to represent that a should come before b or a
 * positive value to represent that b should come before a, or 0 if a and b are
 * equal.
 */
export declare const sortUTXOs: (a: UTXO, b: UTXO) => number;
/**
 * fixValue turns a readable value, e.g. `0.0001` BTC, to the value in the smallest
 * unit, e.g. `10000` sats.
 *
 * @example
 * fixValue(0.0001, 8) = 10000;
 * @param value Value in the readable representation, e.g. `0.0001` BTC.
 * @param decimals The number of decimals to shift by, e.g. 8.
 */
export declare const fixValue: (value: BigNumber | string | number, decimals: number) => BigNumber;
/**
 * fixUTXO calls {{fixValue}} on the value of the UTXO.
 */
export declare const fixUTXO: (tx: UTXO, decimals: number) => UTXO;
/**
 * fixUTXOs maps over an array of UTXOs and calls {{fixValue}}.
 */
export declare const fixUTXOs: (utxos: UTXO[], decimals: number) => UTXO[];
export interface APIWithPriority {
    api: BitcoinAPI;
    priority: number;
}
export declare class CombinedAPI implements BitcoinAPI {
    apis: APIWithPriority[];
    constructor(apis?: Array<BitcoinAPI | APIWithPriority>, { priority }?: {
        priority?: number | undefined;
    });
    /**
     * Provide a new API to be used with the other APIs.
     *
     * @param api The API to add.
     * @param config Config for the API, including the priority.
     * @param config.priority Optionally set the priority of the API, where
     * a lower priority means it will be selected before other APIs.
     */
    withAPI: (api: BitcoinAPI | APIWithPriority, { priority }?: {
        priority?: number | undefined;
    }) => this;
    fetchHeight: () => Promise<string>;
    fetchUTXO: (txid: string, txindex: string) => Promise<UTXO>;
    fetchUTXOs: (address: string, confirmations?: number) => Promise<UTXO[]>;
    fetchTXs: (address: string, confirmations?: number) => Promise<UTXO[]>;
    broadcastTransaction: (hex: string) => Promise<string>;
    private forEachAPI;
}
//# sourceMappingURL=API.d.ts.map