var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
// import https from "https";
import { utils } from "@renproject/utils";
import BigNumber from "bignumber.js";
import { fixUTXO, fixValue, sortUTXOs } from "./API";
export class Insight {
    constructor(url) {
        this.fetchHeight = () => __awaiter(this, void 0, void 0, function* () {
            return (yield utils.GET(`${this.url}/sync`)).height.toString();
        });
        this.fetchUTXOs = (address, confirmations = 0) => __awaiter(this, void 0, void 0, function* () {
            const url = `${this.url}/addr/${address}/utxo`;
            const response = yield utils.GET(url);
            const data = typeof response === "string" ? JSON.parse(response) : response;
            const height = new BigNumber(yield this.fetchHeight());
            return (yield Promise.all(data
                .filter((utxo) => confirmations === 0 ||
                utxo.confirmations >= confirmations)
                .map((utxo) => ({
                txid: utxo.txid,
                txindex: utxo.vout.toString(),
                amount: utils.isDefined(utxo.satoshis)
                    ? utxo.satoshis.toString()
                    : utils.isDefined(utxo.amount)
                        ? fixValue(utxo.amount, 8).toFixed()
                        : undefined,
                height: utxo.confirmations && utxo.confirmations > 0
                    ? height
                        .minus(utxo.confirmations)
                        .plus(1)
                        .toFixed()
                    : null,
            }))
                // If the amount is undefined, fetch the UTXO again.
                // This is due to the DigiByte explorer not returning
                // amounts correctly when fetching UTXOs.
                .map((utxo) => utils.isDefined(utxo.amount)
                ? utxo
                : this.fetchUTXO(utxo.txid, utxo.txindex)))).sort(sortUTXOs);
        });
        this.fetchTXs = (address) => __awaiter(this, void 0, void 0, function* () {
            const url = `${this.url}/txs/?address=${address}`;
            const response = yield utils.GET(url);
            const data = typeof response === "string" ? JSON.parse(response) : response;
            const received = [];
            for (const tx of data.txs) {
                for (let i = 0; i < tx.vout.length; i++) {
                    const vout = tx.vout[i];
                    if (vout.scriptPubKey.addresses.indexOf(address) >= 0) {
                        received.push({
                            txid: tx.txid,
                            txindex: i.toString(),
                            amount: fixValue(parseFloat(vout.value), 8).toFixed(),
                            height: tx.blockheight && tx.blockheight > 0
                                ? tx.blockheight.toString()
                                : null,
                        });
                    }
                }
            }
            return received.sort(sortUTXOs);
        });
        this.fetchUTXO = (txid, txindex) => __awaiter(this, void 0, void 0, function* () {
            const url = `${this.url}/tx/${txid}`;
            const tx = yield utils.GET(url);
            return fixUTXO({
                txid,
                amount: tx.vout[parseInt(txindex, 10)].value.toString(),
                txindex,
                height: tx.blockheight && tx.blockheight > 0
                    ? tx.blockheight.toString()
                    : null,
            }, 8);
        });
        this.broadcastTransaction = (txHex) => __awaiter(this, void 0, void 0, function* () {
            const url = `${this.url}/tx/send`;
            const response = yield utils.POST(url, { rawtx: txHex });
            if (response.error) {
                throw new Error(response.error);
            }
            return response.txid;
        });
        this.url = url.replace(/\/$/, "");
    }
}
//# sourceMappingURL=insight.js.map