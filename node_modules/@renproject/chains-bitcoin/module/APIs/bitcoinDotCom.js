var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { utils } from "@renproject/utils";
import { fixUTXO, fixUTXOs, fixValue, sortUTXOs, } from "./API";
export class BitcoinDotCom {
    constructor({ testnet = false } = {}) {
        this.endpoint = () => {
            return this.testnet
                ? "https://trest.bitcoin.com/v2/"
                : "https://rest.bitcoin.com/v2/";
        };
        this.endpointV2 = () => {
            return this.testnet
                ? "https://explorer-tbch.api.bitcoin.com/tbch/v1"
                : "https://explorer.api.bitcoin.com/bch/v1";
        };
        this.fetchHeight = () => __awaiter(this, void 0, void 0, function* () {
            const url = `${this.endpointV2()}/blockchain/getBlockCount`;
            const height = yield utils.GET(url);
            return height.toString();
        });
        this.fetchUTXO = (txid, txindex) => __awaiter(this, void 0, void 0, function* () {
            const url = `${this.endpointV2()}/tx/${txid}`;
            const utxo = yield utils.GET(url);
            return fixUTXO({
                txid: txid,
                amount: utxo.vout[parseInt(txindex, 10)].value.toString(),
                txindex: txindex,
                height: utxo.blockheight && utxo.blockheight > 0
                    ? utxo.blockheight.toString()
                    : null,
            }, 8);
        });
        this.fetchUTXOs = (address) => __awaiter(this, void 0, void 0, function* () {
            const url = `${this.endpointV2()}/addr/${address}/utxo`;
            const utxos = yield utils.GET(url);
            return fixUTXOs(utxos.map((utxo) => ({
                txid: utxo.txid,
                amount: utxo.amount.toString(),
                txindex: utxo.vout.toString(),
                height: utxo.height && utxo.height > 0
                    ? utxo.height.toString()
                    : null,
            })), 8).sort(sortUTXOs);
        });
        this.fetchTXs = (address) => __awaiter(this, void 0, void 0, function* () {
            const url = `${this.endpoint().replace(/\/$/, "")}/address/transactions/${address}`;
            const { txs } = yield utils.GET(url);
            const received = [];
            for (const tx of txs) {
                for (let i = 0; i < tx.vout.length; i++) {
                    const vout = tx.vout[i];
                    if (vout.scriptPubKey.addresses.indexOf(address) >= 0) {
                        received.push({
                            txid: tx.txid,
                            amount: fixValue(parseFloat(vout.value), 8).toFixed(),
                            txindex: i.toString(),
                            height: tx.blockheight && tx.blockheight > 0
                                ? tx.blockheight.toString()
                                : null,
                        });
                    }
                }
            }
            return received.sort(sortUTXOs);
        });
        this.broadcastTransaction = (hexEncodedTransaction) => __awaiter(this, void 0, void 0, function* () {
            const url = `${this.endpoint().replace(/\/$/, "")}/rawtransactions/sendRawTransaction`;
            const response = yield utils.POST(url, {
                hexes: [hexEncodedTransaction],
            });
            if (response.error) {
                throw new Error(response.error);
            }
            return response[0];
        });
        this.testnet = testnet;
    }
}
//# sourceMappingURL=bitcoinDotCom.js.map