var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { utils } from "@renproject/utils";
import BigNumber from "bignumber.js";
import { fixUTXO, fixUTXOs, sortUTXOs } from "./API";
export var SoChainNetwork;
(function (SoChainNetwork) {
    SoChainNetwork["BTC"] = "BTC";
    SoChainNetwork["LTC"] = "LTC";
    SoChainNetwork["ZEC"] = "ZEC";
    SoChainNetwork["DOGE"] = "DOGE";
    SoChainNetwork["DASH"] = "DASH";
    SoChainNetwork["BTCTEST"] = "BTCTEST";
    SoChainNetwork["LTCTEST"] = "LTCTEST";
    SoChainNetwork["ZECTEST"] = "ZECTEST";
    SoChainNetwork["DOGETEST"] = "DOGETEST";
    SoChainNetwork["DASHTEST"] = "DASHTEST";
})(SoChainNetwork || (SoChainNetwork = {}));
export class SoChain {
    constructor(network = SoChainNetwork.BTC) {
        this.fetchHeight = () => __awaiter(this, void 0, void 0, function* () {
            return (yield utils.GET(`https://sochain.com/api/v2/get_info/${this.network}`)).data.blocks.toString();
        });
        this.fetchUTXO = (txid, txindex) => __awaiter(this, void 0, void 0, function* () {
            const url = `https://sochain.com/api/v2/get_tx/${this.network}/${txid}`;
            const response = yield utils.GET(url);
            const tx = response.data;
            const height = new BigNumber(yield this.fetchHeight());
            return fixUTXO({
                txid: tx.txid,
                amount: tx.outputs[parseInt(txindex, 10)].value.toString(),
                txindex: txindex,
                height: tx.confirmations && tx.confirmations > 0
                    ? height.minus(tx.confirmations).plus(1).toFixed()
                    : null,
            }, 8);
        });
        this.fetchUTXOs = (address) => __awaiter(this, void 0, void 0, function* () {
            const url = `https://sochain.com/api/v2/get_tx_unspent/${this.network}/${address}/${0}`;
            const response = yield utils.GET(url);
            const height = new BigNumber(yield this.fetchHeight());
            return fixUTXOs(response.data.txs.map((utxo) => ({
                txid: utxo.txid,
                txindex: utxo.output_no.toString(),
                amount: utxo.value.toString(),
                height: utxo.confirmations && utxo.confirmations > 0
                    ? height.minus(utxo.confirmations).plus(1).toFixed()
                    : null,
            })), 8).sort(sortUTXOs);
        });
        this.fetchTXs = (address) => __awaiter(this, void 0, void 0, function* () {
            const url = `https://sochain.com/api/v2/get_tx_received/${this.network}/${address}/${0}`;
            const response = yield utils.GET(url);
            const height = new BigNumber(yield this.fetchHeight());
            return fixUTXOs(response.data.txs.map((utxo) => ({
                txid: utxo.txid,
                amount: utxo.value.toString(),
                // scriptPubKey: utxo.script_hex,
                txindex: utxo.output_no.toString(),
                height: utxo.confirmations && utxo.confirmations > 0
                    ? height.minus(utxo.confirmations).plus(1).toFixed()
                    : null,
            })), 8).sort(sortUTXOs);
        });
        this.broadcastTransaction = (txHex) => __awaiter(this, void 0, void 0, function* () {
            const response = yield utils.POST(`https://sochain.com/api/v2/send_tx/${this.network}`, {
                tx_hex: txHex,
            });
            return response.data.txid;
        });
        this.network = network;
    }
}
//# sourceMappingURL=sochain.js.map