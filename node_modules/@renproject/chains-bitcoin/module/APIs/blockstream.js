var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { utils } from "@renproject/utils";
import { sortUTXOs } from "./API";
export class Blockstream {
    constructor({ testnet = false, apiKey = undefined } = {}) {
        this.getAPIUrl = (path) => {
            return `https://blockstream.info/${this.testnet ? "testnet/" : ""}api${path}${this.apiKey ? `?key=${this.apiKey}` : ""}`;
        };
        this.fetchHeight = () => __awaiter(this, void 0, void 0, function* () {
            return (yield utils.GET(this.getAPIUrl(`/blocks/tip/height`))).toString();
        });
        this.fetchUTXO = (txid, txindex) => __awaiter(this, void 0, void 0, function* () {
            const utxo = yield utils.GET(this.getAPIUrl(`/tx/${txid}`));
            return {
                txid,
                amount: utxo.vout[parseInt(txindex, 10)].value.toString(),
                txindex,
                height: utxo.status.confirmed
                    ? utxo.status.block_height.toString()
                    : null,
            };
        });
        this.fetchUTXOs = (address) => __awaiter(this, void 0, void 0, function* () {
            const response = yield utils.GET(this.getAPIUrl(`/address/${address}/utxo`));
            return response
                .map((utxo) => ({
                txid: utxo.txid,
                amount: utxo.value.toString(),
                txindex: utxo.vout.toString(),
                height: utxo.status.confirmed
                    ? utxo.status.block_height.toString()
                    : null,
            }))
                .sort(sortUTXOs);
        });
        this.fetchTXs = (address) => __awaiter(this, void 0, void 0, function* () {
            const response = yield utils.GET(this.getAPIUrl(`/address/${address}/txs`));
            const received = [];
            for (const tx of response) {
                for (let i = 0; i < tx.vout.length; i++) {
                    const vout = tx.vout[i];
                    if (vout.scriptpubkey_address === address) {
                        received.push({
                            txid: tx.txid,
                            amount: vout.value.toString(),
                            txindex: i.toString(),
                            height: tx.status.confirmed
                                ? tx.status.block_height.toString()
                                : null,
                        });
                    }
                }
            }
            return received.sort(sortUTXOs);
        });
        this.broadcastTransaction = (txHex) => __awaiter(this, void 0, void 0, function* () {
            const response = yield utils.POST(this.getAPIUrl(`/tx`), txHex);
            return response;
        });
        this.testnet = testnet;
        this.apiKey = apiKey;
    }
}
//# sourceMappingURL=blockstream.js.map