import { ChainTransaction, RenNetwork, RenNetworkString } from "@renproject/utils";
import { APIWithPriority, BitcoinAPI } from "../APIs/API";
export declare type BitcoinInputPayload = {
    chain: string;
    type?: "gatewayAddress";
} | {
    chain: string;
    type: "transaction";
    params: {
        tx: ChainTransaction;
    };
};
export interface BitcoinOutputPayload {
    chain: string;
    type?: "address";
    params: {
        address: string;
    };
}
export interface BitcoinNetworkConfig {
    label: string;
    selector: string;
    nativeAsset: {
        name: string;
        symbol: string;
        decimals: number;
    };
    averageConfirmationTime: number;
    isTestnet?: boolean;
    p2shPrefix: Uint8Array;
    explorer: {
        url: string;
        address: (address: string) => string;
        transaction: (txid: string) => string;
    };
    providers: Array<BitcoinAPI | APIWithPriority>;
}
export declare const isBitcoinNetworkConfig: (input: unknown) => input is BitcoinNetworkConfig;
export declare type BitcoinNetworkConfigMap = {
    [network in RenNetwork]?: BitcoinNetworkConfig;
};
export declare type BitcoinNetworkInput = RenNetwork | RenNetworkString | BitcoinNetworkConfig;
//# sourceMappingURL=types.d.ts.map