import { RenNetwork } from "@renproject/utils";
import BTCValidator from "wallet-address-validator/src/bitcoin_validator";
import { Blockbook } from "./APIs/blockbook";
import { BitcoinBaseChain } from "./base";
import { resolveBitcoinNetworkConfig, StandardBitcoinExplorer, } from "./utils/utils";
const DigiByteMainnet = {
    label: "DigiByte",
    selector: "DigiByte",
    nativeAsset: {
        name: "DigiByte",
        symbol: "DGB",
        decimals: 8,
    },
    averageConfirmationTime: 15,
    explorer: StandardBitcoinExplorer("https://digiexplorer.info/"),
    p2shPrefix: new Uint8Array([0x3f]),
    providers: [
        new Blockbook("https://multichain-web-proxy.herokuapp.com/digibyte-mainnet"),
        new Blockbook("https://digiexplorer.info/api"),
        new Blockbook("https://insight.digibyte.host/api"), // TODO: test again, currently broken
    ],
    // validateAddress: (address: string) =>
    //     validateAddress(address, "DGB", "mainnet"),
};
const DigiByteTestnet = {
    label: "DigiByte Testnet",
    selector: "DigiByte",
    nativeAsset: {
        name: "Testnet DigiByte",
        symbol: "DGB",
        decimals: 8,
    },
    averageConfirmationTime: 15,
    isTestnet: true,
    explorer: StandardBitcoinExplorer("`https://testnetexplorer.digibyteservers.io/"),
    p2shPrefix: new Uint8Array([0x8c]),
    providers: [
        new Blockbook("https://testnetexplorer.digibyteservers.io/api"),
    ],
    // validateAddress: (address: string) =>
    //     validateAddress(address, "DGB", "testnet"),
};
export class DigiByte extends BitcoinBaseChain {
    constructor({ network }) {
        super({
            network: resolveBitcoinNetworkConfig(DigiByte.configMap, network),
        });
        this.configMap = DigiByte.configMap;
        this.assets = DigiByte.assets;
        this.validateAddress = (address) => {
            try {
                const currency = {
                    name: "digibyte",
                    symbol: "dgb",
                    addressTypes: { prod: ["1e", "3f"], testnet: ["7e", "8c"] },
                    validator: BTCValidator,
                    segwitHrp: this.network.isTestnet ? "dgbt" : "dgb",
                };
                return currency.validator.isValidAddress(address, currency, this.network.isTestnet ? "testnet" : "prod");
            }
            catch (error) {
                return false;
            }
        };
    }
}
DigiByte.chain = "DigiByte";
DigiByte.configMap = {
    [RenNetwork.Mainnet]: DigiByteMainnet,
    [RenNetwork.Testnet]: DigiByteTestnet,
    [RenNetwork.Devnet]: DigiByteTestnet,
};
DigiByte.assets = {
    DGB: "DGB",
};
//# sourceMappingURL=digibyte.js.map