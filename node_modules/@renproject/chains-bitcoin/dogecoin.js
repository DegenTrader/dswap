"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Dogecoin = void 0;
const utils_1 = require("@renproject/utils");
const bitcoin_validator_1 = __importDefault(require("wallet-address-validator/src/bitcoin_validator"));
const blockchair_1 = require("./APIs/blockchair");
const sochain_1 = require("./APIs/sochain");
const base_1 = require("./base");
const utils_2 = require("./utils/utils");
const DogecoinMainnet = {
    label: "Dogecoin",
    selector: "Dogecoin",
    nativeAsset: {
        name: "Dogecoin",
        symbol: "DOGE",
        decimals: 8,
    },
    averageConfirmationTime: 60,
    explorer: (0, utils_2.SoChainExplorer)("doge", "DOGE"),
    p2shPrefix: new Uint8Array([0x16]),
    providers: [
        new blockchair_1.Blockchair(blockchair_1.BlockchairNetwork.DOGECOIN),
        { api: new sochain_1.SoChain(sochain_1.SoChainNetwork.DOGE), priority: 15 },
    ],
    // validateAddress: (address: string) =>
    //     validateAddress(address, "DOGE", "mainnet"),
};
const DogecoinTestnet = {
    label: "Dogecoin Testnet",
    selector: "Dogecoin",
    nativeAsset: {
        name: "Testnet Dogecoin",
        symbol: "DOGE",
        decimals: 8,
    },
    averageConfirmationTime: 60,
    isTestnet: true,
    explorer: (0, utils_2.SoChainExplorer)("testnet/doge", "DOGETEST"),
    p2shPrefix: new Uint8Array([0xc4]),
    providers: [{ api: new sochain_1.SoChain(sochain_1.SoChainNetwork.DOGETEST), priority: 15 }],
    // validateAddress: (address: string) =>
    //     validateAddress(address, "DOGE", "testnet"),
};
class Dogecoin extends base_1.BitcoinBaseChain {
    constructor({ network }) {
        super({
            network: (0, utils_2.resolveBitcoinNetworkConfig)(Dogecoin.configMap, network),
        });
        this.configMap = Dogecoin.configMap;
        this.assets = Dogecoin.assets;
        this.validateAddress = (address) => {
            try {
                const currency = {
                    name: "dogecoin",
                    symbol: "doge",
                    addressTypes: { prod: ["1e", "16"], testnet: ["71", "c4"] },
                    segwitHrp: "invalid",
                    validator: bitcoin_validator_1.default,
                };
                return currency.validator.isValidAddress(address, currency, this.network.isTestnet ? "testnet" : "prod");
            }
            catch (error) {
                return false;
            }
        };
    }
}
exports.Dogecoin = Dogecoin;
Dogecoin.chain = "Dogecoin";
Dogecoin.configMap = {
    [utils_1.RenNetwork.Mainnet]: DogecoinMainnet,
    [utils_1.RenNetwork.Testnet]: DogecoinTestnet,
    [utils_1.RenNetwork.Devnet]: DogecoinTestnet,
};
Dogecoin.assets = {
    DOGE: "DOGE",
};
//# sourceMappingURL=dogecoin.js.map