"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Zcash = void 0;
const utils_1 = require("@renproject/utils");
const blockbook_1 = require("./APIs/blockbook");
const blockchair_1 = require("./APIs/blockchair");
const insight_1 = require("./APIs/insight");
const sochain_1 = require("./APIs/sochain");
const base_1 = require("./base");
const utils_2 = require("./utils/utils");
const ZcashMainnet = {
    label: "Zcash",
    selector: "Zcash",
    nativeAsset: {
        name: "Zcash",
        symbol: "ZEC",
        decimals: 8,
    },
    averageConfirmationTime: 75,
    explorer: (0, utils_2.SoChainExplorer)("zcash", "ZEC"),
    p2shPrefix: new Uint8Array([0x1c, 0xbd]),
    providers: [
        new blockbook_1.Blockbook("https://zecblockexplorer.com/api/"),
        new blockchair_1.Blockchair(blockchair_1.BlockchairNetwork.ZCASH),
        { api: new sochain_1.SoChain(sochain_1.SoChainNetwork.ZEC), priority: 15 },
        { api: new insight_1.Insight("https://explorer.z.cash/api/"), priority: 20 },
        { api: new insight_1.Insight("https://zechain.net/api/v1/"), priority: 20 }, // TODO: test again, currently broken
    ],
    // validateAddress: (address: string) =>
    //     validateAddress(address, "ZEC", "mainnet"),
};
const ZcashTestnet = {
    label: "Zcash Testnet",
    selector: "Zcash",
    nativeAsset: {
        name: "Testnet Zcash",
        symbol: "ZEC",
        decimals: 8,
    },
    averageConfirmationTime: 75,
    isTestnet: true,
    explorer: (0, utils_2.SoChainExplorer)("testnet/zcash", "ZECTEST"),
    p2shPrefix: new Uint8Array([0x1c, 0xba]),
    providers: [
        new insight_1.Insight("https://explorer.testnet.z.cash/api/"),
        { api: new sochain_1.SoChain(sochain_1.SoChainNetwork.ZECTEST), priority: 15 },
    ],
    // validateAddress: (address: string) =>
    //     validateAddress(address, "ZEC", "testnet"),
};
class Zcash extends base_1.BitcoinBaseChain {
    constructor({ network }) {
        super({
            network: (0, utils_2.resolveBitcoinNetworkConfig)(Zcash.configMap, network),
        });
        this.configMap = Zcash.configMap;
        this.assets = Zcash.assets;
    }
}
exports.Zcash = Zcash;
Zcash.chain = "Zcash";
Zcash.configMap = {
    [utils_1.RenNetwork.Mainnet]: ZcashMainnet,
    [utils_1.RenNetwork.Testnet]: ZcashTestnet,
    [utils_1.RenNetwork.Devnet]: ZcashTestnet,
};
Zcash.assets = {
    ZEC: "ZEC",
};
//# sourceMappingURL=zcash.js.map