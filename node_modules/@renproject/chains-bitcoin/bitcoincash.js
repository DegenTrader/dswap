"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BitcoinCash = void 0;
const utils_1 = require("@renproject/utils");
const bchaddrjs_1 = require("bchaddrjs");
const bs58_1 = __importDefault(require("bs58"));
const bitcoinDotCom_1 = require("./APIs/bitcoinDotCom");
const blockchain_1 = require("./APIs/blockchain");
const blockchair_1 = require("./APIs/blockchair");
const base_1 = require("./base");
const bchaddrjs_2 = require("./utils/bchaddrjs");
const utils_2 = require("./utils/utils");
const BitcoinCashMainnet = {
    label: "Bitcoin Cash",
    selector: "BitcoinCash",
    nativeAsset: {
        name: "Bitcoin Cash",
        symbol: "BCH",
        decimals: 8,
    },
    averageConfirmationTime: 60 * 10,
    explorer: (0, utils_2.StandardBitcoinExplorer)("https://explorer.bitcoin.com/bch/"),
    p2shPrefix: new Uint8Array([0x05]),
    providers: [
        new blockchair_1.Blockchair(blockchair_1.BlockchairNetwork.BITCOIN_CASH),
        { api: new bitcoinDotCom_1.BitcoinDotCom(), priority: 15 },
        { api: new blockchain_1.Blockchain(blockchain_1.BlockchainNetwork.BitcoinCash), priority: 20 },
    ],
};
const BitcoinCashTestnet = {
    label: "Bitcoin Cash Testnet",
    selector: "BitcoinCash",
    nativeAsset: {
        name: "Testnet Bitcoin Cash",
        symbol: "BCH",
        decimals: 8,
    },
    averageConfirmationTime: 60 * 10,
    isTestnet: true,
    explorer: (0, utils_2.StandardBitcoinExplorer)("https://explorer.bitcoin.com/tbch/"),
    p2shPrefix: new Uint8Array([0xc4]),
    providers: [
        new blockchain_1.Blockchain(blockchain_1.BlockchainNetwork.BitcoinCashTestnet),
        { api: new bitcoinDotCom_1.BitcoinDotCom({ testnet: true }), priority: 15 },
    ],
};
class BitcoinCash extends base_1.BitcoinBaseChain {
    constructor({ network }) {
        super({
            network: (0, utils_2.resolveBitcoinNetworkConfig)(BitcoinCash.configMap, network),
        });
        this.configMap = BitcoinCash.configMap;
        this.assets = BitcoinCash.assets;
        this.validateAddress = (address) => {
            try {
                return ((0, bchaddrjs_1.isValidAddress)(address) &&
                    (this.network.isTestnet
                        ? (0, bchaddrjs_1.isTestnetAddress)(address)
                        : (0, bchaddrjs_1.isMainnetAddress)(address)));
            }
            catch (error) {
                return false;
            }
        };
        this.addressFromBytes = (bytes) => {
            return (0, bchaddrjs_1.toCashAddress)(bs58_1.default.encode(bytes));
        };
        this.addressToBytes = (address) => {
            return (0, bchaddrjs_2.decodeBitcoinCashAddress)(address);
        };
    }
}
exports.BitcoinCash = BitcoinCash;
BitcoinCash.chain = "BitcoinCash";
BitcoinCash.configMap = {
    [utils_1.RenNetwork.Mainnet]: BitcoinCashMainnet,
    [utils_1.RenNetwork.Testnet]: BitcoinCashTestnet,
    [utils_1.RenNetwork.Devnet]: BitcoinCashTestnet,
};
BitcoinCash.assets = {
    BCH: "BCH",
};
//# sourceMappingURL=bitcoincash.js.map