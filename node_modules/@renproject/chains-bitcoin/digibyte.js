"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DigiByte = void 0;
const utils_1 = require("@renproject/utils");
const bitcoin_validator_1 = __importDefault(require("wallet-address-validator/src/bitcoin_validator"));
const blockbook_1 = require("./APIs/blockbook");
const base_1 = require("./base");
const utils_2 = require("./utils/utils");
const DigiByteMainnet = {
    label: "DigiByte",
    selector: "DigiByte",
    nativeAsset: {
        name: "DigiByte",
        symbol: "DGB",
        decimals: 8,
    },
    averageConfirmationTime: 15,
    explorer: (0, utils_2.StandardBitcoinExplorer)("https://digiexplorer.info/"),
    p2shPrefix: new Uint8Array([0x3f]),
    providers: [
        new blockbook_1.Blockbook("https://multichain-web-proxy.herokuapp.com/digibyte-mainnet"),
        new blockbook_1.Blockbook("https://digiexplorer.info/api"),
        new blockbook_1.Blockbook("https://insight.digibyte.host/api"), // TODO: test again, currently broken
    ],
    // validateAddress: (address: string) =>
    //     validateAddress(address, "DGB", "mainnet"),
};
const DigiByteTestnet = {
    label: "DigiByte Testnet",
    selector: "DigiByte",
    nativeAsset: {
        name: "Testnet DigiByte",
        symbol: "DGB",
        decimals: 8,
    },
    averageConfirmationTime: 15,
    isTestnet: true,
    explorer: (0, utils_2.StandardBitcoinExplorer)("`https://testnetexplorer.digibyteservers.io/"),
    p2shPrefix: new Uint8Array([0x8c]),
    providers: [
        new blockbook_1.Blockbook("https://testnetexplorer.digibyteservers.io/api"),
    ],
    // validateAddress: (address: string) =>
    //     validateAddress(address, "DGB", "testnet"),
};
class DigiByte extends base_1.BitcoinBaseChain {
    constructor({ network }) {
        super({
            network: (0, utils_2.resolveBitcoinNetworkConfig)(DigiByte.configMap, network),
        });
        this.configMap = DigiByte.configMap;
        this.assets = DigiByte.assets;
        this.validateAddress = (address) => {
            try {
                const currency = {
                    name: "digibyte",
                    symbol: "dgb",
                    addressTypes: { prod: ["1e", "3f"], testnet: ["7e", "8c"] },
                    validator: bitcoin_validator_1.default,
                    segwitHrp: this.network.isTestnet ? "dgbt" : "dgb",
                };
                return currency.validator.isValidAddress(address, currency, this.network.isTestnet ? "testnet" : "prod");
            }
            catch (error) {
                return false;
            }
        };
    }
}
exports.DigiByte = DigiByte;
DigiByte.chain = "DigiByte";
DigiByte.configMap = {
    [utils_1.RenNetwork.Mainnet]: DigiByteMainnet,
    [utils_1.RenNetwork.Testnet]: DigiByteTestnet,
    [utils_1.RenNetwork.Devnet]: DigiByteTestnet,
};
DigiByte.assets = {
    DGB: "DGB",
};
//# sourceMappingURL=digibyte.js.map